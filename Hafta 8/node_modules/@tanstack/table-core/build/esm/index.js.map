{"version":3,"file":"index.js","sources":["../../src/utils.ts","../../src/features/Columns.ts","../../src/features/Rows.ts","../../src/features/Cells.ts","../../src/features/ColumnSizing.ts","../../src/features/Expanding.ts","../../src/filterFns.ts","../../src/features/Filters.ts","../../src/aggregationFns.ts","../../src/features/Grouping.ts","../../src/features/Ordering.ts","../../src/features/Pagination.ts","../../src/features/Pinning.ts","../../src/features/RowSelection.ts","../../src/sortingFns.ts","../../src/features/Sorting.ts","../../src/features/Visibility.ts","../../src/features/Headers.ts","../../src/core.ts","../../src/createTable.ts","../../src/utils/getCoreRowModel.ts","../../src/utils/filterRowsUtils.ts","../../src/utils/getFilteredRowModel.ts","../../src/utils/getFacetedRowModel.ts","../../src/utils/getFacetedUniqueValues.ts","../../src/utils/getFacetedMinMaxValues.ts","../../src/utils/getSortedRowModel.ts","../../src/utils/getGroupedRowModel.ts","../../src/utils/getExpandedRowModel.ts","../../src/utils/getPaginationRowModel.ts"],"sourcesContent":["import { NoInfer, TableState, Updater } from './types'\n\nexport type PartialKeys<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>\nexport type RequiredKeys<T, K extends keyof T> = Omit<T, K> &\n  Required<Pick<T, K>>\nexport type Overwrite<T, U extends { [TKey in keyof T]?: any }> = Omit<\n  T,\n  keyof U\n> &\n  U\n\nexport type IfDefined<T, N> = 0 extends 1 & T ? N : T extends {} ? T : N\n\nexport function functionalUpdate<T>(updater: Updater<T>, input: T): T {\n  return typeof updater === 'function'\n    ? (updater as (input: T) => T)(input)\n    : updater\n}\n\nexport function noop() {\n  //\n}\n\nexport function makeStateUpdater(key: keyof TableState, instance: unknown) {\n  return (updater: Updater<any>) => {\n    ;(instance as any).setState(<TTableState>(old: TTableState) => {\n      return {\n        ...old,\n        [key]: functionalUpdate(updater, (old as any)[key]),\n      }\n    })\n  }\n}\n\ntype AnyFunction = (...args: any) => any\n\nexport function isFunction<T extends AnyFunction>(d: any): d is T {\n  return d instanceof Function\n}\n\nexport function flattenBy<TNode>(\n  arr: TNode[],\n  getChildren: (item: TNode) => TNode[]\n) {\n  const flat: TNode[] = []\n\n  const recurse = (subArr: TNode[]) => {\n    subArr.forEach(item => {\n      flat.push(item)\n      const children = getChildren(item)\n      if (children?.length) {\n        recurse(children)\n      }\n    })\n  }\n\n  recurse(arr)\n\n  return flat\n}\n\nexport function memo<TDeps extends readonly any[], TResult>(\n  getDeps: () => [...TDeps],\n  fn: (...args: NoInfer<[...TDeps]>) => TResult,\n  opts: {\n    key: any\n    debug?: () => any\n    onChange?: (result: TResult) => void\n  }\n): () => TResult {\n  let deps: any[] = []\n  let result: TResult | undefined\n\n  return () => {\n    let depTime: number\n    if (opts.key && opts.debug) depTime = Date.now()\n\n    const newDeps = getDeps()\n\n    const depsChanged =\n      newDeps.length !== deps.length ||\n      newDeps.some((dep: any, index: number) => deps[index] !== dep)\n\n    if (!depsChanged) {\n      return result!\n    }\n\n    deps = newDeps\n\n    let resultTime: number\n    if (opts.key && opts.debug) resultTime = Date.now()\n\n    result = fn(...newDeps)\n    opts?.onChange?.(result)\n\n    if (opts.key && opts.debug) {\n      if (opts?.debug()) {\n        const depEndTime = Math.round((Date.now() - depTime!) * 100) / 100\n        const resultEndTime = Math.round((Date.now() - resultTime!) * 100) / 100\n        const resultFpsPercentage = resultEndTime / 16\n\n        const pad = (str: number | string, num: number) => {\n          str = String(str)\n          while (str.length < num) {\n            str = ' ' + str\n          }\n          return str\n        }\n\n        console.info(\n          `%c⏱ ${pad(resultEndTime, 5)} /${pad(depEndTime, 5)} ms`,\n          `\n            font-size: .6rem;\n            font-weight: bold;\n            color: hsl(${Math.max(\n              0,\n              Math.min(120 - 120 * resultFpsPercentage, 120)\n            )}deg 100% 31%);`,\n          opts?.key\n        )\n      }\n    }\n\n    return result!\n  }\n}\n","import {\n  Cell,\n  Column,\n  Header,\n  TableGenerics,\n  TableInstance,\n  Row,\n  AccessorFn,\n  ColumnDef,\n  Renderable,\n} from '../types'\nimport { memo } from '../utils'\n\nexport type CoreColumnDefType = 'data' | 'display' | 'group'\n\nexport type CoreColumnDef<TGenerics extends TableGenerics> = {\n  id: string\n  accessorKey?: string & keyof TGenerics['Row']\n  accessorFn?: AccessorFn<TGenerics['Row']>\n  columns?: ColumnDef<TGenerics>[]\n  header?: Renderable<\n    TGenerics,\n    {\n      instance: TableInstance<TGenerics>\n      header: Header<TGenerics>\n      column: Column<TGenerics>\n    }\n  >\n  footer?: Renderable<\n    TGenerics,\n    {\n      instance: TableInstance<TGenerics>\n      header: Header<TGenerics>\n      column: Column<TGenerics>\n    }\n  >\n  cell?: Renderable<\n    TGenerics,\n    {\n      instance: TableInstance<TGenerics>\n      row: Row<TGenerics>\n      column: Column<TGenerics>\n      cell: Cell<TGenerics>\n      getValue: () => TGenerics['Value']\n    }\n  >\n  meta?: TGenerics['ColumnMeta']\n}\n\nexport type CoreColumn<TGenerics extends TableGenerics> = {\n  id: string\n  depth: number\n  accessorFn?: AccessorFn<TGenerics['Row']>\n  columnDef: ColumnDef<TGenerics>\n  columnDefType: CoreColumnDefType\n  columns: Column<TGenerics>[]\n  parent?: Column<TGenerics>\n  getFlatColumns: () => Column<TGenerics>[]\n  getLeafColumns: () => Column<TGenerics>[]\n}\n\nexport type ColumnsOptions<TGenerics extends TableGenerics> = {\n  columns: ColumnDef<TGenerics>[]\n  defaultColumn?: Partial<ColumnDef<TGenerics>>\n}\n\nexport type ColumnsInstance<TGenerics extends TableGenerics> = {\n  getDefaultColumn: () => Partial<ColumnDef<TGenerics>>\n  getColumnDefs: () => ColumnDef<TGenerics>[]\n  createColumn: (\n    columnDef: ColumnDef<TGenerics>,\n    depth: number,\n    parent?: Column<TGenerics>\n  ) => Column<TGenerics>\n  getAllColumns: () => Column<TGenerics>[]\n  getAllFlatColumns: () => Column<TGenerics>[]\n  getAllFlatColumnsById: () => Record<string, Column<TGenerics>>\n  getAllLeafColumns: () => Column<TGenerics>[]\n  getColumn: (columnId: string) => Column<TGenerics>\n}\n\n//\n\nexport const Columns = {\n  createInstance: <TGenerics extends TableGenerics>(\n    instance: TableInstance<TGenerics>\n  ): ColumnsInstance<TGenerics> => {\n    return {\n      getDefaultColumn: memo(\n        () => [instance.options.defaultColumn],\n        defaultColumn => {\n          defaultColumn = (defaultColumn ?? {}) as Partial<ColumnDef<TGenerics>>\n\n          return {\n            header: props => props.header.column.id,\n            footer: props => props.header.column.id,\n            cell: props => props.getValue().toString?.() ?? null,\n            ...instance._features.reduce((obj, feature) => {\n              return Object.assign(obj, feature.getDefaultColumn?.())\n            }, {}),\n            ...defaultColumn,\n          } as Partial<ColumnDef<TGenerics>>\n        },\n        {\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugColumns,\n          key: process.env.NODE_ENV === 'development' && 'getDefaultColumn',\n        }\n      ),\n\n      getColumnDefs: () => instance.options.columns,\n\n      createColumn: (\n        columnDef: ColumnDef<TGenerics> & { columnDefType?: CoreColumnDefType },\n        depth: number,\n        parent\n      ) => {\n        const defaultColumn = instance.getDefaultColumn()\n\n        let id =\n          columnDef.id ??\n          columnDef.accessorKey ??\n          (typeof columnDef.header === 'string' ? columnDef.header : undefined)\n\n        let accessorFn: AccessorFn<TGenerics['Row']> | undefined\n\n        if (columnDef.accessorFn) {\n          accessorFn = columnDef.accessorFn\n        } else if (columnDef.accessorKey) {\n          accessorFn = (originalRow?: TGenerics['Row']) =>\n            (originalRow as any)[columnDef.accessorKey]\n        }\n\n        if (!id) {\n          if (process.env.NODE_ENV !== 'production') {\n            throw new Error(\n              columnDef.accessorFn\n                ? `Columns require an id when using an accessorFn`\n                : `Columns require an id when using a non-string header`\n            )\n          }\n          throw new Error()\n        }\n\n        let column: CoreColumn<TGenerics> = {\n          ...defaultColumn,\n          ...columnDef,\n          id: `${id}`,\n          accessorFn,\n          parent: parent as any,\n          depth,\n          columnDef,\n          columnDefType: columnDef.columnDefType as CoreColumnDefType,\n          columns: [],\n          getFlatColumns: memo(\n            () => [true],\n            () => {\n              return [\n                column as Column<TGenerics>,\n                ...column.columns?.flatMap(d => d.getFlatColumns()),\n              ]\n            },\n            {\n              key:\n                process.env.NODE_ENV === 'production' &&\n                'column.getFlatColumns',\n              debug: () =>\n                instance.options.debugAll ?? instance.options.debugColumns,\n            }\n          ),\n          getLeafColumns: memo(\n            () => [instance._getOrderColumnsFn()],\n            orderColumns => {\n              if (column.columns?.length) {\n                let leafColumns = column.columns.flatMap(column =>\n                  column.getLeafColumns()\n                )\n\n                return orderColumns(leafColumns)\n              }\n\n              return [column as Column<TGenerics>]\n            },\n            {\n              key:\n                process.env.NODE_ENV === 'production' &&\n                'column.getLeafColumns',\n              debug: () =>\n                instance.options.debugAll ?? instance.options.debugColumns,\n            }\n          ),\n        }\n\n        column = instance._features.reduce((obj, feature) => {\n          return Object.assign(obj, feature.createColumn?.(column, instance))\n        }, column)\n\n        // Yes, we have to convert instance to uknown, because we know more than the compiler here.\n        return column as Column<TGenerics>\n      },\n\n      getAllColumns: memo(\n        () => [instance.getColumnDefs()],\n        columnDefs => {\n          const recurseColumns = (\n            columnDefs: ColumnDef<TGenerics>[],\n            parent?: Column<TGenerics>,\n            depth = 0\n          ): Column<TGenerics>[] => {\n            return columnDefs.map(columnDef => {\n              const column = instance.createColumn(columnDef, depth, parent)\n\n              column.columns = columnDef.columns\n                ? recurseColumns(columnDef.columns, column, depth + 1)\n                : []\n\n              return column\n            })\n          }\n\n          return recurseColumns(columnDefs)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getAllColumns',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugColumns,\n        }\n      ),\n\n      getAllFlatColumns: memo(\n        () => [instance.getAllColumns()],\n        allColumns => {\n          return allColumns.flatMap(column => {\n            return column.getFlatColumns()\n          })\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getAllFlatColumns',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugColumns,\n        }\n      ),\n\n      getAllFlatColumnsById: memo(\n        () => [instance.getAllFlatColumns()],\n        flatColumns => {\n          return flatColumns.reduce((acc, column) => {\n            acc[column.id] = column\n            return acc\n          }, {} as Record<string, Column<TGenerics>>)\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'development' && 'getAllFlatColumnsById',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugColumns,\n        }\n      ),\n\n      getAllLeafColumns: memo(\n        () => [instance.getAllColumns(), instance._getOrderColumnsFn()],\n        (allColumns, orderColumns) => {\n          let leafColumns = allColumns.flatMap(column =>\n            column.getLeafColumns()\n          )\n          return orderColumns(leafColumns)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getAllLeafColumns',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugColumns,\n        }\n      ),\n\n      getColumn: columnId => {\n        const column = instance.getAllFlatColumnsById()[columnId]\n\n        if (!column) {\n          if (process.env.NODE_ENV !== 'production') {\n            console.warn(`[Table] Column with id ${columnId} does not exist.`)\n          }\n          throw new Error()\n        }\n\n        return column\n      },\n    }\n  },\n}\n","import {\n  TableGenerics,\n  TableInstance,\n  Row,\n  RowModel,\n  RowValues,\n} from '../types'\nimport { flattenBy } from '../utils'\n\nexport type CoreRow<TGenerics extends TableGenerics> = {\n  id: string\n  index: number\n  original?: TGenerics['Row']\n  depth: number\n  valuesCache: Record<string, any>\n  getValue: (columnId: string) => any\n  subRows: Row<TGenerics>[]\n  getLeafRows: () => Row<TGenerics>[]\n  originalSubRows?: TGenerics['Row'][]\n}\n\nexport type RowsOptions<TGenerics extends TableGenerics> = {\n  getCoreRowModel: (\n    instance: TableInstance<TGenerics>\n  ) => () => RowModel<TGenerics>\n  getSubRows?: (\n    originalRow: TGenerics['Row'],\n    index: number\n  ) => undefined | TGenerics['Row'][]\n  getRowId?: (\n    originalRow: TGenerics['Row'],\n    index: number,\n    parent?: Row<TGenerics>\n  ) => string\n}\n\nexport type RowsInstance<TGenerics extends TableGenerics> = {\n  getRowId: (\n    _: TGenerics['Row'],\n    index: number,\n    parent?: Row<TGenerics>\n  ) => string\n  createRow: (\n    id: string,\n    original: TGenerics['Row'] | undefined,\n    rowIndex: number,\n    depth: number,\n    subRows?: Row<TGenerics>[]\n  ) => Row<TGenerics>\n  getCoreRowModel: () => RowModel<TGenerics>\n  _getCoreRowModel?: () => RowModel<TGenerics>\n  getRowModel: () => RowModel<TGenerics>\n  getRow: (id: string) => Row<TGenerics>\n}\n\n//\n\nexport const Rows = {\n  // createRow: <TGenerics extends TableGenerics>(\n  //   row: Row<TGenerics>,\n  //   instance: TableInstance<TGenerics>\n  // ): CellsRow<TGenerics> => {\n  //   return {}\n  // },\n\n  createInstance: <TGenerics extends TableGenerics>(\n    instance: TableInstance<TGenerics>\n  ): RowsInstance<TGenerics> => {\n    return {\n      getRowId: (\n        row: TGenerics['Row'],\n        index: number,\n        parent?: Row<TGenerics>\n      ) =>\n        instance.options.getRowId?.(row, index, parent) ??\n        `${parent ? [parent.id, index].join('.') : index}`,\n      createRow: (id, original, rowIndex, depth, subRows) => {\n        let row: CoreRow<TGenerics> = {\n          id,\n          index: rowIndex,\n          original,\n          depth,\n          valuesCache: {},\n          getValue: columnId => {\n            if (row.valuesCache.hasOwnProperty(columnId)) {\n              return row.valuesCache[columnId]\n            }\n\n            const column = instance.getColumn(columnId)\n\n            if (!column.accessorFn) {\n              return undefined\n            }\n\n            row.valuesCache[columnId] = column.accessorFn(\n              row.original,\n              rowIndex\n            )\n\n            return row.valuesCache[columnId]\n          },\n          subRows: subRows ?? [],\n          getLeafRows: () => flattenBy(row.subRows, d => d.subRows),\n        }\n\n        for (let i = 0; i < instance._features.length; i++) {\n          const feature = instance._features[i]\n          Object.assign(row, feature?.createRow?.(row, instance))\n        }\n\n        return row as Row<TGenerics>\n      },\n\n      getCoreRowModel: () => {\n        if (!instance._getCoreRowModel) {\n          instance._getCoreRowModel = instance.options.getCoreRowModel(instance)\n        }\n\n        return instance._getCoreRowModel()\n      },\n\n      // The final calls start at the bottom of the model,\n      // expanded rows, which then work their way up\n\n      getRowModel: () => {\n        return instance.getPaginationRowModel()\n      },\n      getRow: (id: string) => {\n        const row = instance.getRowModel().rowsById[id]\n\n        if (!row) {\n          if (process.env.NODE_ENV !== 'production') {\n            throw new Error(`getRow expected an ID, but got ${id}`)\n          }\n          throw new Error()\n        }\n\n        return row\n      },\n    }\n  },\n}\n","import {\n  Cell,\n  TableGenerics,\n  TableInstance,\n  Row,\n  Column,\n  CoreCell,\n} from '../types'\nimport { memo } from '../utils'\n\nexport type CellsRow<TGenerics extends TableGenerics> = {\n  getAllCells: () => Cell<TGenerics>[]\n  getAllCellsByColumnId: () => Record<string, Cell<TGenerics>>\n}\n\nexport type CellsInstance<TGenerics extends TableGenerics> = {\n  createCell: (\n    row: Row<TGenerics>,\n    column: Column<TGenerics>,\n    columnId: string\n  ) => Cell<TGenerics>\n  getCell: (rowId: string, columnId: string) => Cell<TGenerics>\n}\n\n//\n\nexport const Cells = {\n  createRow: <TGenerics extends TableGenerics>(\n    row: Row<TGenerics>,\n    instance: TableInstance<TGenerics>\n  ): CellsRow<TGenerics> => {\n    return {\n      getAllCells: memo(\n        () => [instance.getAllLeafColumns()],\n        leafColumns => {\n          return leafColumns.map(column => {\n            return instance.createCell(row as Row<TGenerics>, column, column.id)\n          })\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'row.getAllCells',\n          debug: () => instance.options.debugAll ?? instance.options.debugRows,\n        }\n      ),\n\n      getAllCellsByColumnId: memo(\n        () => [row.getAllCells()],\n        allCells => {\n          return allCells.reduce((acc, cell) => {\n            acc[cell.columnId] = cell\n            return acc\n          }, {} as Record<string, Cell<TGenerics>>)\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' &&\n            'row.getAllCellsByColumnId',\n          debug: () => instance.options.debugAll ?? instance.options.debugRows,\n        }\n      ),\n    }\n  },\n\n  createInstance: <TGenerics extends TableGenerics>(\n    instance: TableInstance<TGenerics>\n  ): CellsInstance<TGenerics> => {\n    return {\n      createCell: (row, column, columnId) => {\n        const cell: CoreCell<TGenerics> = {\n          id: `${row.id}_${column.id}`,\n          rowId: row.id,\n          columnId,\n          row,\n          column,\n          getValue: () => row.getValue(columnId),\n          renderCell: () =>\n            column.cell\n              ? instance._render(column.cell, {\n                  instance,\n                  column,\n                  row,\n                  cell: cell as Cell<TGenerics>,\n                  getValue: cell.getValue,\n                })\n              : null,\n        }\n\n        instance._features.forEach(feature => {\n          Object.assign(\n            cell,\n            feature.createCell?.(\n              cell as Cell<TGenerics>,\n              column,\n              row as Row<TGenerics>,\n              instance\n            )\n          )\n        }, {})\n\n        return cell as Cell<TGenerics>\n      },\n\n      getCell: (rowId: string, columnId: string) => {\n        const row = instance.getRow(rowId)\n\n        if (!row) {\n          if (process.env.NODE_ENV !== 'production') {\n            throw new Error(`[Table] could not find row with id ${rowId}`)\n          }\n          throw new Error()\n        }\n\n        const cell = row.getAllCellsByColumnId()[columnId]\n\n        if (!cell) {\n          if (process.env.NODE_ENV !== 'production') {\n            throw new Error(\n              `[Table] could not find cell ${columnId} in row ${rowId}`\n            )\n          }\n          throw new Error()\n        }\n\n        return cell\n      },\n    }\n  },\n}\n","import {\n  Column,\n  Header,\n  OnChangeFn,\n  TableGenerics,\n  TableInstance,\n  Updater,\n  TableFeature,\n} from '../types'\nimport { makeStateUpdater } from '../utils'\nimport { ColumnPinningPosition } from './Pinning'\n\n//\n\nexport type ColumnSizingTableState = {\n  columnSizing: ColumnSizingState\n  columnSizingInfo: ColumnSizingInfoState\n}\n\nexport type ColumnSizingState = Record<string, number>\n\nexport type ColumnSizingInfoState = {\n  startOffset: null | number\n  startSize: null | number\n  deltaOffset: null | number\n  deltaPercentage: null | number\n  isResizingColumn: false | string\n  columnSizingStart: [string, number][]\n}\n\nexport type ColumnResizeMode = 'onChange' | 'onEnd'\n\nexport type ColumnSizingOptions = {\n  enableColumnResizing?: boolean\n  columnResizeMode?: ColumnResizeMode\n  onColumnSizingChange?: OnChangeFn<ColumnSizingState>\n  onColumnSizingInfoChange?: OnChangeFn<ColumnSizingInfoState>\n}\n\nexport type ColumnSizingDefaultOptions = {\n  columnResizeMode: ColumnResizeMode\n  onColumnSizingChange: OnChangeFn<ColumnSizingState>\n  onColumnSizingInfoChange: OnChangeFn<ColumnSizingInfoState>\n}\n\nexport type ColumnSizingInstance<TGenerics extends TableGenerics> = {\n  setColumnSizing: (updater: Updater<ColumnSizingState>) => void\n  setColumnSizingInfo: (updater: Updater<ColumnSizingInfoState>) => void\n  resetColumnSizing: (defaultState?: boolean) => void\n  resetHeaderSizeInfo: (defaultState?: boolean) => void\n  getTotalSize: () => number\n  getLeftTotalSize: () => number\n  getCenterTotalSize: () => number\n  getRightTotalSize: () => number\n}\n\nexport type ColumnSizingColumnDef = {\n  enableResizing?: boolean\n  size?: number\n  minSize?: number\n  maxSize?: number\n}\n\nexport type ColumnSizingColumn<TGenerics extends TableGenerics> = {\n  getSize: () => number\n  getStart: (position?: ColumnPinningPosition) => number\n  getCanResize: () => boolean\n  getIsResizing: () => boolean\n  resetSize: () => void\n}\n\nexport type ColumnSizingHeader<TGenerics extends TableGenerics> = {\n  getSize: () => number\n  getStart: (position?: ColumnPinningPosition) => number\n  getResizeHandler: () => (event: unknown) => void\n}\n\n//\n\nexport const defaultColumnSizing = {\n  size: 150,\n  minSize: 20,\n  maxSize: Number.MAX_SAFE_INTEGER,\n}\n\nconst getDefaultColumnSizingInfoState = (): ColumnSizingInfoState => ({\n  startOffset: null,\n  startSize: null,\n  deltaOffset: null,\n  deltaPercentage: null,\n  isResizingColumn: false,\n  columnSizingStart: [],\n})\n\nexport const ColumnSizing: TableFeature = {\n  getDefaultColumn: (): ColumnSizingColumnDef => {\n    return defaultColumnSizing\n  },\n  getInitialState: (state): ColumnSizingTableState => {\n    return {\n      columnSizing: {},\n      columnSizingInfo: getDefaultColumnSizingInfoState(),\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TGenerics extends TableGenerics>(\n    instance: TableInstance<TGenerics>\n  ): ColumnSizingDefaultOptions => {\n    return {\n      columnResizeMode: 'onEnd',\n      onColumnSizingChange: makeStateUpdater('columnSizing', instance),\n      onColumnSizingInfoChange: makeStateUpdater('columnSizingInfo', instance),\n    }\n  },\n\n  createColumn: <TGenerics extends TableGenerics>(\n    column: Column<TGenerics>,\n    instance: TableInstance<TGenerics>\n  ): ColumnSizingColumn<TGenerics> => {\n    return {\n      getSize: () => {\n        const columnSize = instance.getState().columnSizing[column.id]\n\n        return Math.min(\n          Math.max(\n            column.minSize ?? defaultColumnSizing.minSize,\n            columnSize ?? column.size ?? defaultColumnSizing.size\n          ),\n          column.maxSize ?? defaultColumnSizing.maxSize\n        )\n      },\n      getStart: position => {\n        const columns = !position\n          ? instance.getVisibleLeafColumns()\n          : position === 'left'\n          ? instance.getLeftVisibleLeafColumns()\n          : instance.getRightVisibleLeafColumns()\n\n        const index = columns.findIndex(d => d.id === column.id)\n\n        if (index > 0) {\n          const prevSiblingColumn = columns[index - 1]!\n\n          return (\n            prevSiblingColumn.getStart(position) + prevSiblingColumn.getSize()\n          )\n        }\n\n        return 0\n      },\n      resetSize: () => {\n        instance.setColumnSizing(({ [column.id]: _, ...rest }) => {\n          return rest\n        })\n      },\n      getCanResize: () => {\n        return (\n          (column.enableResizing ?? true) &&\n          (instance.options.enableColumnResizing ?? true)\n        )\n      },\n      getIsResizing: () => {\n        return (\n          instance.getState().columnSizingInfo.isResizingColumn === column.id\n        )\n      },\n    }\n  },\n\n  createHeader: <TGenerics extends TableGenerics>(\n    header: Header<TGenerics>,\n    instance: TableInstance<TGenerics>\n  ): ColumnSizingHeader<TGenerics> => {\n    return {\n      getSize: () => {\n        let sum = 0\n\n        const recurse = (header: Header<TGenerics>) => {\n          if (header.subHeaders.length) {\n            header.subHeaders.forEach(recurse)\n          } else {\n            sum += header.column.getSize() ?? 0\n          }\n        }\n\n        recurse(header)\n\n        return sum\n      },\n      getStart: () => {\n        if (header.index > 0) {\n          const prevSiblingHeader =\n            header.headerGroup.headers[header.index - 1]!\n          return prevSiblingHeader.getStart() + prevSiblingHeader.getSize()\n        }\n\n        return 0\n      },\n      getResizeHandler: () => {\n        const column = instance.getColumn(header.column.id)\n        const canResize = column.getCanResize()\n\n        return (e: unknown) => {\n          if (!canResize) {\n            return\n          }\n\n          ;(e as any).persist?.()\n\n          if (isTouchStartEvent(e)) {\n            // lets not respond to multiple touches (e.g. 2 or 3 fingers)\n            if (e.touches && e.touches.length > 1) {\n              return\n            }\n          }\n\n          const startSize = header.getSize()\n\n          const columnSizingStart: [string, number][] = header\n            ? header\n                .getLeafHeaders()\n                .map(d => [d.column.id, d.column.getSize()])\n            : [[column.id, column.getSize()]]\n\n          const clientX = isTouchStartEvent(e)\n            ? Math.round(e.touches[0]!.clientX)\n            : (e as MouseEvent).clientX\n\n          const updateOffset = (\n            eventType: 'move' | 'end',\n            clientXPos?: number\n          ) => {\n            if (typeof clientXPos !== 'number') {\n              return\n            }\n\n            let newColumnSizing: ColumnSizingState = {}\n\n            instance.setColumnSizingInfo(old => {\n              const deltaOffset = clientXPos - (old?.startOffset ?? 0)\n              const deltaPercentage = Math.max(\n                deltaOffset / (old?.startSize ?? 0),\n                -0.999999\n              )\n\n              old.columnSizingStart.forEach(([columnId, headerSize]) => {\n                newColumnSizing[columnId] =\n                  Math.round(\n                    Math.max(headerSize + headerSize * deltaPercentage, 0) * 100\n                  ) / 100\n              })\n\n              return {\n                ...old,\n                deltaOffset,\n                deltaPercentage,\n              }\n            })\n\n            if (\n              instance.options.columnResizeMode === 'onChange' ||\n              eventType === 'end'\n            ) {\n              instance.setColumnSizing(old => ({\n                ...old,\n                ...newColumnSizing,\n              }))\n            }\n          }\n\n          const onMove = (clientXPos?: number) =>\n            updateOffset('move', clientXPos)\n\n          const onEnd = (clientXPos?: number) => {\n            updateOffset('end', clientXPos)\n\n            instance.setColumnSizingInfo(old => ({\n              ...old,\n              isResizingColumn: false,\n              startOffset: null,\n              startSize: null,\n              deltaOffset: null,\n              deltaPercentage: null,\n              columnSizingStart: [],\n            }))\n          }\n\n          const mouseEvents = {\n            moveHandler: (e: MouseEvent) => onMove(e.clientX),\n            upHandler: (e: MouseEvent) => {\n              document.removeEventListener('mousemove', mouseEvents.moveHandler)\n              document.removeEventListener('mouseup', mouseEvents.upHandler)\n              onEnd(e.clientX)\n            },\n          }\n\n          const touchEvents = {\n            moveHandler: (e: TouchEvent) => {\n              if (e.cancelable) {\n                e.preventDefault()\n                e.stopPropagation()\n              }\n              onMove(e.touches[0]!.clientX)\n              return false\n            },\n            upHandler: (e: TouchEvent) => {\n              document.removeEventListener('touchmove', touchEvents.moveHandler)\n              document.removeEventListener('touchend', touchEvents.upHandler)\n              if (e.cancelable) {\n                e.preventDefault()\n                e.stopPropagation()\n              }\n              onEnd(e.touches[0]!.clientX)\n            },\n          }\n\n          const passiveIfSupported = passiveEventSupported()\n            ? { passive: false }\n            : false\n\n          if (isTouchStartEvent(e)) {\n          } else {\n            document.addEventListener(\n              'mousemove',\n              mouseEvents.moveHandler,\n              passiveIfSupported\n            )\n            document.addEventListener(\n              'mouseup',\n              mouseEvents.upHandler,\n              passiveIfSupported\n            )\n          }\n\n          instance.setColumnSizingInfo(old => ({\n            ...old,\n            startOffset: clientX,\n            startSize,\n            deltaOffset: 0,\n            deltaPercentage: 0,\n            columnSizingStart,\n            isResizingColumn: column.id,\n          }))\n        }\n      },\n    }\n  },\n\n  createInstance: <TGenerics extends TableGenerics>(\n    instance: TableInstance<TGenerics>\n  ): ColumnSizingInstance<TGenerics> => {\n    return {\n      setColumnSizing: updater =>\n        instance.options.onColumnSizingChange?.(updater),\n      setColumnSizingInfo: updater =>\n        instance.options.onColumnSizingInfoChange?.(updater),\n      resetColumnSizing: defaultState => {\n        instance.setColumnSizing(\n          defaultState ? {} : instance.initialState.columnSizing ?? {}\n        )\n      },\n      resetHeaderSizeInfo: defaultState => {\n        instance.setColumnSizingInfo(\n          defaultState\n            ? getDefaultColumnSizingInfoState()\n            : instance.initialState.columnSizingInfo ??\n                getDefaultColumnSizingInfoState()\n        )\n      },\n      getTotalSize: () =>\n        instance.getHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n      getLeftTotalSize: () =>\n        instance.getLeftHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n      getCenterTotalSize: () =>\n        instance.getCenterHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n      getRightTotalSize: () =>\n        instance.getRightHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n    }\n  },\n}\n\nlet passiveSupported: boolean | null = null\nexport function passiveEventSupported() {\n  if (typeof passiveSupported === 'boolean') return passiveSupported\n\n  let supported = false\n  try {\n    const options = {\n      get passive() {\n        supported = true\n        return false\n      },\n    }\n\n    const noop = () => {}\n\n    window.addEventListener('test', noop, options)\n    window.removeEventListener('test', noop)\n  } catch (err) {\n    supported = false\n  }\n  passiveSupported = supported\n  return passiveSupported\n}\n\nfunction isTouchStartEvent(e: unknown): e is TouchEvent {\n  return (e as TouchEvent).type === 'touchstart'\n}\n","import { RowModel } from '..'\nimport {\n  OnChangeFn,\n  TableGenerics,\n  TableInstance,\n  Row,\n  Updater,\n  TableFeature,\n} from '../types'\nimport { makeStateUpdater } from '../utils'\nimport { Rows } from './Rows'\n\nexport type ExpandedStateList = Record<string, boolean>\nexport type ExpandedState = true | Record<string, boolean>\nexport type ExpandedTableState = {\n  expanded: ExpandedState\n}\n\nexport type ExpandedRow = {\n  toggleExpanded: (expanded?: boolean) => void\n  getIsExpanded: () => boolean\n  getCanExpand: () => boolean\n  getToggleExpandedHandler: () => () => void\n}\n\nexport type ExpandedOptions<TGenerics extends TableGenerics> = {\n  manualExpanding?: boolean\n  onExpandedChange?: OnChangeFn<ExpandedState>\n  autoResetExpanded?: boolean\n  enableExpanding?: boolean\n  getExpandedRowModel?: (\n    instance: TableInstance<TGenerics>\n  ) => () => RowModel<TGenerics>\n  expandSubRows?: boolean\n  getIsRowExpanded?: (row: Row<TGenerics>) => boolean\n  getRowCanExpand?: (row: Row<TGenerics>) => boolean\n  paginateExpandedRows?: boolean\n}\n\nexport type ExpandedInstance<TGenerics extends TableGenerics> = {\n  _autoResetExpanded: () => void\n  setExpanded: (updater: Updater<ExpandedState>) => void\n  toggleAllRowsExpanded: (expanded?: boolean) => void\n  resetExpanded: (defaultState?: boolean) => void\n  getCanSomeRowsExpand: () => boolean\n  getToggleAllRowsExpandedHandler: () => (event: unknown) => void\n  getIsSomeRowsExpanded: () => boolean\n  getIsAllRowsExpanded: () => boolean\n  getExpandedDepth: () => number\n  getExpandedRowModel: () => RowModel<TGenerics>\n  _getExpandedRowModel?: () => RowModel<TGenerics>\n  getPreExpandedRowModel: () => RowModel<TGenerics>\n}\n\n//\n\nexport const Expanding: TableFeature = {\n  getInitialState: (state): ExpandedTableState => {\n    return {\n      expanded: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TGenerics extends TableGenerics>(\n    instance: TableInstance<TGenerics>\n  ): ExpandedOptions<TGenerics> => {\n    return {\n      onExpandedChange: makeStateUpdater('expanded', instance),\n      autoResetExpanded: true,\n      expandSubRows: true,\n      paginateExpandedRows: true,\n    }\n  },\n\n  createInstance: <TGenerics extends TableGenerics>(\n    instance: TableInstance<TGenerics>\n  ): ExpandedInstance<TGenerics> => {\n    let registered = false\n    let queued = false\n\n    return {\n      _autoResetExpanded: () => {\n        if (!registered) {\n          instance._queue(() => {\n            registered = true\n          })\n          return\n        }\n\n        if (instance.options.autoResetAll === false) {\n          return\n        }\n\n        if (\n          instance.options.autoResetAll === true ||\n          instance.options.autoResetExpanded\n        ) {\n          if (queued) return\n          queued = true\n          instance._queue(() => {\n            instance.resetExpanded()\n            queued = false\n          })\n        }\n      },\n      setExpanded: updater => instance.options.onExpandedChange?.(updater),\n      toggleAllRowsExpanded: expanded => {\n        if (expanded ?? !instance.getIsAllRowsExpanded()) {\n          instance.setExpanded(true)\n        } else {\n          instance.setExpanded({})\n        }\n      },\n      resetExpanded: defaultState => {\n        instance.setExpanded(\n          defaultState ? {} : instance.initialState?.expanded ?? {}\n        )\n      },\n      getCanSomeRowsExpand: () => {\n        return instance.getRowModel().flatRows.some(row => row.getCanExpand())\n      },\n      getToggleAllRowsExpandedHandler: () => {\n        return (e: unknown) => {\n          ;(e as any).persist?.()\n          instance.toggleAllRowsExpanded()\n        }\n      },\n      getIsSomeRowsExpanded: () => {\n        const expanded = instance.getState().expanded\n        return expanded === true || Object.values(expanded).some(Boolean)\n      },\n      getIsAllRowsExpanded: () => {\n        const expanded = instance.getState().expanded\n\n        // If expanded is true, save some cycles and return true\n        if (expanded === true) {\n          return true\n        }\n\n        // If any row is not expanded, return false\n        if (instance.getRowModel().flatRows.some(row => row.getIsExpanded())) {\n          return false\n        }\n\n        // They must all be expanded :shrug:\n        return true\n      },\n      getExpandedDepth: () => {\n        let maxDepth = 0\n\n        const rowIds =\n          instance.getState().expanded === true\n            ? Object.keys(instance.getRowModel().rowsById)\n            : Object.keys(instance.getState().expanded)\n\n        rowIds.forEach(id => {\n          const splitId = id.split('.')\n          maxDepth = Math.max(maxDepth, splitId.length)\n        })\n\n        return maxDepth\n      },\n      getPreExpandedRowModel: () => instance.getGroupedRowModel(),\n      getExpandedRowModel: () => {\n        if (\n          !instance._getExpandedRowModel &&\n          instance.options.getExpandedRowModel\n        ) {\n          instance._getExpandedRowModel =\n            instance.options.getExpandedRowModel(instance)\n        }\n\n        if (\n          instance.options.manualExpanding ||\n          !instance._getExpandedRowModel\n        ) {\n          return instance.getPreExpandedRowModel()\n        }\n\n        return instance._getExpandedRowModel()\n      },\n    }\n  },\n\n  createRow: <TGenerics extends TableGenerics>(\n    row: Row<TGenerics>,\n    instance: TableInstance<TGenerics>\n  ): ExpandedRow => {\n    return {\n      toggleExpanded: expanded => {\n        instance.setExpanded(old => {\n          const exists = old === true ? true : !!old?.[row.id]\n\n          let oldExpanded: ExpandedStateList = {}\n\n          if (old === true) {\n            Object.keys(instance.getRowModel().rowsById).forEach(rowId => {\n              oldExpanded[rowId] = true\n            })\n          } else {\n            oldExpanded = old\n          }\n\n          expanded = expanded ?? !exists\n\n          if (!exists && expanded) {\n            return {\n              ...oldExpanded,\n              [row.id]: true,\n            }\n          }\n\n          if (exists && !expanded) {\n            const { [row.id]: _, ...rest } = oldExpanded\n            return rest\n          }\n\n          return old\n        })\n      },\n      getIsExpanded: () => {\n        const expanded = instance.getState().expanded\n\n        return !!(\n          instance.options.getIsRowExpanded?.(row) ??\n          (expanded === true || expanded?.[row.id])\n        )\n      },\n      getCanExpand: () => {\n        return (\n          (instance.options.getRowCanExpand?.(row) ?? true) &&\n          (instance.options.enableExpanding ?? true) &&\n          !!row.subRows?.length\n        )\n      },\n      getToggleExpandedHandler: () => {\n        const canExpand = row.getCanExpand()\n\n        return () => {\n          if (!canExpand) return\n          row.toggleExpanded()\n        }\n      },\n    }\n  },\n}\n","import { FilterFn } from './features/Filters'\n\nconst includesString: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  const search = filterValue.toLowerCase()\n  return row.getValue(columnId).toLowerCase().includes(search)\n}\n\nincludesString.autoRemove = (val: any) => testFalsey(val)\n\nconst includesStringSensitive: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  return row.getValue(columnId).includes(filterValue)\n}\n\nincludesStringSensitive.autoRemove = (val: any) => testFalsey(val)\n\nconst equalsString: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  return row.getValue(columnId).toLowerCase() === filterValue.toLowerCase()\n}\n\nequalsString.autoRemove = (val: any) => testFalsey(val)\n\nconst arrIncludes: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown\n) => {\n  return row.getValue(columnId).includes(filterValue)\n}\n\narrIncludes.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst arrIncludesAll: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown[]\n) => {\n  return !filterValue.some(val => !row.getValue(columnId).includes(val))\n}\n\narrIncludesAll.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst arrIncludesSome: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown[]\n) => {\n  return filterValue.some(val => row.getValue(columnId).includes(val))\n}\n\narrIncludesSome.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst equals: FilterFn<any> = (row, columnId: string, filterValue: unknown) => {\n  return row.getValue(columnId) === filterValue\n}\n\nequals.autoRemove = (val: any) => testFalsey(val)\n\nconst weakEquals: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown\n) => {\n  return row.getValue(columnId) == filterValue\n}\n\nweakEquals.autoRemove = (val: any) => testFalsey(val)\n\nconst inNumberRange: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: [number, number]\n) => {\n  let [min, max] = filterValue\n\n  const rowValue = row.getValue(columnId)\n  return rowValue >= min && rowValue <= max\n}\n\ninNumberRange.resolveFilterValue = (val: [any, any]) => {\n  let [unsafeMin, unsafeMax] = val\n\n  let parsedMin =\n    typeof unsafeMin !== 'number' ? parseFloat(unsafeMin as string) : unsafeMin\n  let parsedMax =\n    typeof unsafeMax !== 'number' ? parseFloat(unsafeMax as string) : unsafeMax\n\n  let min =\n    unsafeMin === null || Number.isNaN(parsedMin) ? -Infinity : parsedMin\n  let max = unsafeMax === null || Number.isNaN(parsedMax) ? Infinity : parsedMax\n\n  if (min > max) {\n    const temp = min\n    min = max\n    max = temp\n  }\n\n  return [min, max] as const\n}\n\ninNumberRange.autoRemove = (val: any) =>\n  testFalsey(val) || (testFalsey(val[0]) && testFalsey(val[1]))\n\n// Export\n\nexport const filterFns = {\n  includesString,\n  includesStringSensitive,\n  equalsString,\n  arrIncludes,\n  arrIncludesAll,\n  arrIncludesSome,\n  equals,\n  weakEquals,\n  inNumberRange,\n}\n\nexport type BuiltInFilterFn = keyof typeof filterFns\n\n// Utils\n\nfunction testFalsey(val: any) {\n  return val === undefined || val === null || val === ''\n}\n","import { RowModel } from '..'\nimport { BuiltInFilterFn, filterFns } from '../filterFns'\nimport {\n  Column,\n  OnChangeFn,\n  TableGenerics,\n  TableInstance,\n  Row,\n  Updater,\n  TableFeature,\n} from '../types'\nimport {\n  functionalUpdate,\n  isFunction,\n  makeStateUpdater,\n  memo,\n  Overwrite,\n} from '../utils'\n\nexport type FiltersTableState = {\n  columnFilters: ColumnFiltersState\n  globalFilter: any\n  // filtersProgress: number\n  // facetProgress: Record<string, number>\n}\n\nexport type ColumnFiltersState = ColumnFilter[]\n\nexport type ColumnFilter = {\n  id: string\n  value: unknown\n}\n\nexport type ResolvedColumnFilter<TGenerics extends TableGenerics> = {\n  id: string\n  resolvedValue: unknown\n  filterFn: FilterFn<TGenerics>\n}\n\nexport type FilterFn<TGenerics extends TableGenerics> = {\n  (\n    row: Row<TGenerics>,\n    columnId: string,\n    filterValue: any,\n    addMeta: (meta: TGenerics['FilterMeta']) => void\n  ): boolean\n\n  resolveFilterValue?: TransformFilterValueFn<TGenerics>\n  autoRemove?: ColumnFilterAutoRemoveTestFn<TGenerics>\n}\n\nexport type TransformFilterValueFn<TGenerics extends TableGenerics> = (\n  value: any,\n  column?: Column<TGenerics>\n) => unknown\n\nexport type ColumnFilterAutoRemoveTestFn<TGenerics extends TableGenerics> = (\n  value: any,\n  column?: Column<TGenerics>\n) => boolean\n\nexport type CustomFilterFns<TGenerics extends TableGenerics> = Record<\n  string,\n  FilterFn<TGenerics>\n>\n\nexport type FilterFnOption<TGenerics extends TableGenerics> =\n  | 'auto'\n  | BuiltInFilterFn\n  | keyof TGenerics['FilterFns']\n  | FilterFn<TGenerics>\n\nexport type FiltersColumnDef<TGenerics extends TableGenerics> = {\n  filterFn?: FilterFnOption<Overwrite<TGenerics, { Value: any }>>\n  enableColumnFilter?: boolean\n  enableGlobalFilter?: boolean\n  enableFaceting?: boolean\n}\n\nexport type FiltersColumn<TGenerics extends TableGenerics> = {\n  filterFn: FilterFnOption<Overwrite<TGenerics, { Value: any }>>\n  getAutoFilterFn: () => FilterFn<TGenerics> | undefined\n  getFilterFn: () => FilterFn<TGenerics> | undefined\n  setFilterValue: (updater: Updater<any>) => void\n  getCanFilter: () => boolean\n  getCanGlobalFilter: () => boolean\n  getFacetedRowModel: () => RowModel<TGenerics>\n  _getFacetedRowModel?: () => RowModel<TGenerics>\n  getIsFiltered: () => boolean\n  getFilterValue: () => unknown\n  getFilterIndex: () => number\n  getFacetedUniqueValues: () => Map<any, number>\n  _getFacetedUniqueValues?: () => Map<any, number>\n  getFacetedMinMaxValues: () => undefined | [number, number]\n  _getFacetedMinMaxValues?: () => undefined | [number, number]\n}\n\nexport type FiltersRow<TGenerics extends TableGenerics> = {\n  columnFilters: Record<string, boolean>\n  columnFiltersMeta: Record<string, TGenerics['FilterMeta']>\n  subRowsByFacetId: Record<string, Row<TGenerics>[]>\n}\n\nexport type FiltersOptions<TGenerics extends TableGenerics> = {\n  enableFilters?: boolean\n  manualFiltering?: boolean\n  filterFromLeafRows?: boolean\n  filterFns?: TGenerics['FilterFns']\n  getFilteredRowModel?: (\n    instance: TableInstance<TGenerics>\n  ) => () => RowModel<TGenerics>\n\n  // Column\n  onColumnFiltersChange?: OnChangeFn<ColumnFiltersState>\n  enableColumnFilters?: boolean\n\n  // Global\n  globalFilterFn?: FilterFnOption<TGenerics>\n  onGlobalFilterChange?: OnChangeFn<any>\n  enableGlobalFilter?: boolean\n  getColumnCanGlobalFilter?: (column: Column<TGenerics>) => boolean\n\n  // Faceting\n  getFacetedRowModel?: (\n    instance: TableInstance<TGenerics>,\n    columnId: string\n  ) => () => RowModel<TGenerics>\n  getFacetedUniqueValues?: (\n    instance: TableInstance<TGenerics>,\n    columnId: string\n  ) => () => Map<any, number>\n  getFacetedMinMaxValues?: (\n    instance: TableInstance<TGenerics>,\n    columnId: string\n  ) => () => undefined | [number, number]\n}\n\nexport type FiltersInstance<TGenerics extends TableGenerics> = {\n  setColumnFilters: (updater: Updater<ColumnFiltersState>) => void\n\n  resetColumnFilters: (defaultState?: boolean) => void\n\n  // Column Filters\n  getPreFilteredRowModel: () => RowModel<TGenerics>\n  getFilteredRowModel: () => RowModel<TGenerics>\n  _getFilteredRowModel?: () => RowModel<TGenerics>\n\n  // Global Filters\n  setGlobalFilter: (updater: Updater<any>) => void\n  resetGlobalFilter: (defaultState?: boolean) => void\n  getGlobalAutoFilterFn: () => FilterFn<TGenerics> | undefined\n  getGlobalFilterFn: () => FilterFn<TGenerics> | undefined\n  getGlobalFacetedRowModel: () => RowModel<TGenerics>\n  _getGlobalFacetedRowModel?: () => RowModel<TGenerics>\n  getGlobalFacetedUniqueValues: () => Map<any, number>\n  _getGlobalFacetedUniqueValues?: () => Map<any, number>\n  getGlobalFacetedMinMaxValues: () => undefined | [number, number]\n  _getGlobalFacetedMinMaxValues?: () => undefined | [number, number]\n}\n\n//\n\nexport const Filters: TableFeature = {\n  getDefaultColumn: <\n    TGenerics extends TableGenerics\n  >(): FiltersColumnDef<TGenerics> => {\n    return {\n      filterFn: 'auto',\n    }\n  },\n\n  getInitialState: (state): FiltersTableState => {\n    return {\n      columnFilters: [],\n      globalFilter: undefined,\n      // filtersProgress: 1,\n      // facetProgress: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TGenerics extends TableGenerics>(\n    instance: TableInstance<TGenerics>\n  ): FiltersOptions<TGenerics> => {\n    return {\n      onColumnFiltersChange: makeStateUpdater('columnFilters', instance),\n      onGlobalFilterChange: makeStateUpdater('globalFilter', instance),\n      filterFromLeafRows: false,\n      globalFilterFn: 'auto',\n      getColumnCanGlobalFilter: column => {\n        const value = instance\n          .getCoreRowModel()\n          .flatRows[0]?.getAllCellsByColumnId()\n          [column.id]?.getValue()\n\n        return typeof value === 'string'\n      },\n    }\n  },\n\n  createColumn: <TGenerics extends TableGenerics>(\n    column: Column<TGenerics>,\n    instance: TableInstance<TGenerics>\n  ): FiltersColumn<TGenerics> => {\n    return {\n      filterFn: column.filterFn,\n      getAutoFilterFn: () => {\n        const firstRow = instance.getCoreRowModel().flatRows[0]\n\n        const value = firstRow?.getValue(column.id)\n\n        if (typeof value === 'string') {\n          return filterFns.includesString\n        }\n\n        if (typeof value === 'number') {\n          return filterFns.inNumberRange\n        }\n\n        if (value !== null && typeof value === 'object') {\n          return filterFns.equals\n        }\n\n        if (Array.isArray(value)) {\n          return filterFns.arrIncludes\n        }\n\n        return filterFns.weakEquals\n      },\n      getFilterFn: () => {\n        const userFilterFns = instance.options.filterFns\n\n        return isFunction(column.filterFn)\n          ? column.filterFn\n          : column.filterFn === 'auto'\n          ? column.getAutoFilterFn()\n          : (userFilterFns as Record<string, any>)?.[\n              column.filterFn as string\n            ] ??\n            (filterFns[\n              column.filterFn as BuiltInFilterFn\n            ] as FilterFn<TGenerics>)\n      },\n      getCanFilter: () => {\n        return (\n          (column.enableColumnFilter ?? true) &&\n          (instance.options.enableColumnFilters ?? true) &&\n          (instance.options.enableFilters ?? true) &&\n          !!column.accessorFn\n        )\n      },\n\n      getCanGlobalFilter: () => {\n        return (\n          (column.enableGlobalFilter ?? true) &&\n          (instance.options.enableGlobalFilter ?? true) &&\n          (instance.options.enableFilters ?? true) &&\n          (instance.options.getColumnCanGlobalFilter?.(column) ?? true) &&\n          !!column.accessorFn\n        )\n      },\n\n      getIsFiltered: () => column.getFilterIndex() > -1,\n\n      getFilterValue: () =>\n        instance.getState().columnFilters?.find(d => d.id === column.id)?.value,\n\n      getFilterIndex: () =>\n        instance.getState().columnFilters?.findIndex(d => d.id === column.id) ??\n        -1,\n\n      setFilterValue: value => {\n        instance.setColumnFilters(old => {\n          const filterFn = column.getFilterFn()\n          const previousfilter = old?.find(d => d.id === column.id)\n\n          const newFilter = functionalUpdate(\n            value,\n            previousfilter ? previousfilter.value : undefined\n          )\n\n          //\n          if (\n            shouldAutoRemoveFilter(\n              filterFn as FilterFn<TGenerics>,\n              newFilter,\n              column\n            )\n          ) {\n            return old?.filter(d => d.id !== column.id) ?? []\n          }\n\n          const newFilterObj = { id: column.id, value: newFilter }\n\n          if (previousfilter) {\n            return (\n              old?.map(d => {\n                if (d.id === column.id) {\n                  return newFilterObj\n                }\n                return d\n              }) ?? []\n            )\n          }\n\n          if (old?.length) {\n            return [...old, newFilterObj]\n          }\n\n          return [newFilterObj]\n        })\n      },\n      _getFacetedRowModel:\n        instance.options.getFacetedRowModel &&\n        instance.options.getFacetedRowModel(instance, column.id),\n      getFacetedRowModel: () => {\n        if (!column._getFacetedRowModel) {\n          return instance.getPreFilteredRowModel()\n        }\n\n        return column._getFacetedRowModel()\n      },\n      _getFacetedUniqueValues:\n        instance.options.getFacetedUniqueValues &&\n        instance.options.getFacetedUniqueValues(instance, column.id),\n      getFacetedUniqueValues: () => {\n        if (!column._getFacetedUniqueValues) {\n          return new Map()\n        }\n\n        return column._getFacetedUniqueValues()\n      },\n      _getFacetedMinMaxValues:\n        instance.options.getFacetedMinMaxValues &&\n        instance.options.getFacetedMinMaxValues(instance, column.id),\n      getFacetedMinMaxValues: () => {\n        if (!column._getFacetedMinMaxValues) {\n          return undefined\n        }\n\n        return column._getFacetedMinMaxValues()\n      },\n      // () => [column.getFacetedRowModel()],\n      // facetedRowModel => getRowModelMinMaxValues(facetedRowModel, column.id),\n    }\n  },\n\n  createRow: <TGenerics extends TableGenerics>(\n    row: Row<TGenerics>,\n    instance: TableInstance<TGenerics>\n  ): FiltersRow<TGenerics> => {\n    return {\n      columnFilters: {},\n      columnFiltersMeta: {},\n      subRowsByFacetId: {},\n    }\n  },\n\n  createInstance: <TGenerics extends TableGenerics>(\n    instance: TableInstance<TGenerics>\n  ): FiltersInstance<TGenerics> => {\n    return {\n      getGlobalAutoFilterFn: () => {\n        return filterFns.includesString\n      },\n\n      getGlobalFilterFn: () => {\n        const { filterFns: userFilterFns, globalFilterFn: globalFilterFn } =\n          instance.options\n\n        return isFunction(globalFilterFn)\n          ? globalFilterFn\n          : globalFilterFn === 'auto'\n          ? instance.getGlobalAutoFilterFn()\n          : (userFilterFns as Record<string, any>)?.[\n              globalFilterFn as string\n            ] ??\n            (filterFns[\n              globalFilterFn as BuiltInFilterFn\n            ] as FilterFn<TGenerics>)\n      },\n\n      setColumnFilters: (updater: Updater<ColumnFiltersState>) => {\n        const leafColumns = instance.getAllLeafColumns()\n\n        const updateFn = (old: ColumnFiltersState) => {\n          return functionalUpdate(updater, old)?.filter(filter => {\n            const column = leafColumns.find(d => d.id === filter.id)\n\n            if (column) {\n              const filterFn = column.getFilterFn()\n\n              if (shouldAutoRemoveFilter(filterFn, filter.value, column)) {\n                return false\n              }\n            }\n\n            return true\n          })\n        }\n\n        instance.options.onColumnFiltersChange?.(updateFn)\n      },\n\n      setGlobalFilter: updater => {\n        instance.options.onGlobalFilterChange?.(updater)\n      },\n\n      resetGlobalFilter: defaultState => {\n        instance.setGlobalFilter(\n          defaultState ? undefined : instance.initialState.globalFilter\n        )\n      },\n\n      resetColumnFilters: defaultState => {\n        instance.setColumnFilters(\n          defaultState ? [] : instance.initialState?.columnFilters ?? []\n        )\n      },\n\n      getPreFilteredRowModel: () => instance.getCoreRowModel(),\n      _getFilteredRowModel:\n        instance.options.getFilteredRowModel &&\n        instance.options.getFilteredRowModel(instance),\n      getFilteredRowModel: () => {\n        if (\n          instance.options.manualFiltering ||\n          !instance._getFilteredRowModel\n        ) {\n          return instance.getPreFilteredRowModel()\n        }\n\n        return instance._getFilteredRowModel()\n      },\n\n      _getGlobalFacetedRowModel:\n        instance.options.getFacetedRowModel &&\n        instance.options.getFacetedRowModel(instance, '__global__'),\n\n      getGlobalFacetedRowModel: () => {\n        if (\n          instance.options.manualFiltering ||\n          !instance._getGlobalFacetedRowModel\n        ) {\n          return instance.getPreFilteredRowModel()\n        }\n\n        return instance._getGlobalFacetedRowModel()\n      },\n\n      _getGlobalFacetedUniqueValues:\n        instance.options.getFacetedUniqueValues &&\n        instance.options.getFacetedUniqueValues(instance, '__global__'),\n      getGlobalFacetedUniqueValues: () => {\n        if (!instance._getGlobalFacetedUniqueValues) {\n          return new Map()\n        }\n\n        return instance._getGlobalFacetedUniqueValues()\n      },\n\n      _getGlobalFacetedMinMaxValues:\n        instance.options.getFacetedMinMaxValues &&\n        instance.options.getFacetedMinMaxValues(instance, '__global__'),\n      getGlobalFacetedMinMaxValues: () => {\n        if (!instance._getGlobalFacetedMinMaxValues) {\n          return\n        }\n\n        return instance._getGlobalFacetedMinMaxValues()\n      },\n    }\n  },\n}\n\nexport function shouldAutoRemoveFilter<TGenerics extends TableGenerics>(\n  filterFn?: FilterFn<TGenerics>,\n  value?: any,\n  column?: Column<TGenerics>\n) {\n  return (\n    (filterFn && filterFn.autoRemove\n      ? filterFn.autoRemove(value, column)\n      : false) ||\n    typeof value === 'undefined' ||\n    (typeof value === 'string' && !value)\n  )\n}\n","export const aggregationFns = {\n  sum,\n  min,\n  max,\n  extent,\n  mean,\n  median,\n  unique,\n  uniqueCount,\n  count,\n}\n\nexport type BuiltInAggregationFn = keyof typeof aggregationFns\n\nfunction sum(_getLeafValues: () => unknown[], getChildValues: () => unknown[]) {\n  // It's faster to just add the aggregations together instead of\n  // process leaf nodes individually\n  return getChildValues().reduce(\n    (sum: number, next: unknown) => sum + (typeof next === 'number' ? next : 0),\n    0\n  )\n}\n\nfunction min(_getLeafValues: () => unknown[], getChildValues: () => unknown[]) {\n  let min: number | undefined\n\n  for (const value of getChildValues() as number[]) {\n    if (\n      value != null &&\n      (min! > value || (min === undefined && value >= value))\n    ) {\n      min = value\n    }\n  }\n\n  return min\n}\n\nfunction max(_getLeafValues: () => unknown[], getChildValues: () => unknown[]) {\n  let max: number | undefined\n\n  for (const value of getChildValues() as number[]) {\n    if (\n      value != null &&\n      (max! < value || (max === undefined && value >= value))\n    ) {\n      max = value\n    }\n  }\n\n  return max\n}\n\nfunction extent(\n  _getLeafValues: () => unknown[],\n  getChildValues: () => unknown[]\n) {\n  let min: number | undefined\n  let max: number | undefined\n\n  for (const value of getChildValues() as number[]) {\n    if (value != null) {\n      if (min === undefined) {\n        if (value >= value) min = max = value\n      } else {\n        if (min > value) min = value\n        if (max! < value) max = value\n      }\n    }\n  }\n\n  return [min, max]\n}\n\nexport function mean(getLeafValues: () => unknown[]) {\n  let count = 0\n  let sum = 0\n\n  for (let value of getLeafValues() as number[]) {\n    if (value != null && (value = +value) >= value) {\n      ++count, (sum += value)\n    }\n  }\n\n  if (count) return sum / count\n\n  return\n}\n\nfunction median(getLeafValues: () => unknown[]) {\n  const leafValues = getLeafValues()\n  if (!leafValues.length) {\n    return\n  }\n\n  let min = 0\n  let max = 0\n\n  leafValues.forEach(value => {\n    if (typeof value === 'number') {\n      min = Math.min(min, value)\n      max = Math.max(max, value)\n    }\n  })\n\n  return (min + max) / 2\n}\n\nfunction unique<T>(getLeafValues: () => T[]) {\n  return Array.from(new Set(getLeafValues()).values())\n}\n\nfunction uniqueCount(getLeafValues: () => unknown[]) {\n  return new Set(getLeafValues()).size\n}\n\nfunction count(getLeafValues: () => unknown[]) {\n  return getLeafValues().length\n}\n","import { RowModel } from '..'\nimport { BuiltInAggregationFn, aggregationFns } from '../aggregationFns'\nimport {\n  Cell,\n  Column,\n  OnChangeFn,\n  TableInstance,\n  Row,\n  Updater,\n  Renderable,\n  TableGenerics,\n  TableFeature,\n} from '../types'\nimport { isFunction, makeStateUpdater, Overwrite } from '../utils'\n\nexport type GroupingState = string[]\n\nexport type AggregationFn<TGenerics extends TableGenerics> = (\n  getLeafValues: () => TGenerics['Value'][],\n  getChildValues: () => TGenerics['Value'][]\n) => any\n\nexport type CustomAggregationFns<TGenerics extends TableGenerics> = Record<\n  string,\n  AggregationFn<TGenerics>\n>\n\nexport type AggregationFnOption<TGenerics extends TableGenerics> =\n  | 'auto'\n  | BuiltInAggregationFn\n  | keyof TGenerics['AggregationFns']\n  | AggregationFn<TGenerics>\n\nexport type GroupingTableState = {\n  grouping: GroupingState\n}\n\nexport type GroupingColumnDef<TGenerics extends TableGenerics> = {\n  aggregationFn?: AggregationFnOption<Overwrite<TGenerics, { Value: any }>>\n  aggregateValue?: (columnValue: unknown) => any\n  aggregatedCell?: Renderable<\n    TGenerics,\n    {\n      instance: TableInstance<TGenerics>\n      row: Row<TGenerics>\n      column: Column<TGenerics>\n      cell: Cell<TGenerics>\n      getValue: () => TGenerics['Value']\n    }\n  >\n  enableGrouping?: boolean\n}\n\nexport type GroupingColumn<TGenerics extends TableGenerics> = {\n  aggregationFn?: AggregationFnOption<Overwrite<TGenerics, { Value: any }>>\n  getCanGroup: () => boolean\n  getIsGrouped: () => boolean\n  getGroupedIndex: () => number\n  toggleGrouping: () => void\n  getToggleGroupingHandler: () => () => void\n  getColumnAutoAggregationFn: () => AggregationFn<TGenerics> | undefined\n  getColumnAggregationFn: () => AggregationFn<TGenerics> | undefined\n}\n\nexport type GroupingRow = {\n  groupingColumnId?: string\n  groupingValue?: any\n  getIsGrouped: () => boolean\n  groupingValuesCache: Record<string, any>\n}\n\nexport type GroupingCell<TGenerics extends TableGenerics> = {\n  getIsGrouped: () => boolean\n  getIsPlaceholder: () => boolean\n  getIsAggregated: () => boolean\n  renderAggregatedCell: () => string | null | TGenerics['Rendered']\n}\n\nexport type ColumnDefaultOptions = {\n  // Column\n  onGroupingChange: OnChangeFn<GroupingState>\n  enableGrouping: boolean\n}\n\nexport type GroupingOptions<TGenerics extends TableGenerics> = {\n  manualGrouping?: boolean\n  aggregationFns?: TGenerics['AggregationFns']\n  onGroupingChange?: OnChangeFn<GroupingState>\n  enableGrouping?: boolean\n  enableGroupingRemoval?: boolean\n  getGroupedRowModel?: (\n    instance: TableInstance<TGenerics>\n  ) => () => RowModel<TGenerics>\n\n  groupedColumnMode?: false | 'reorder' | 'remove'\n}\n\nexport type GroupingColumnMode = false | 'reorder' | 'remove'\n\nexport type GroupingInstance<TGenerics extends TableGenerics> = {\n  setGrouping: (updater: Updater<GroupingState>) => void\n  resetGrouping: (defaultState?: boolean) => void\n  getPreGroupedRowModel: () => RowModel<TGenerics>\n  getGroupedRowModel: () => RowModel<TGenerics>\n  _getGroupedRowModel?: () => RowModel<TGenerics>\n}\n\n//\n\nexport const Grouping: TableFeature = {\n  getDefaultColumn: <\n    TGenerics extends TableGenerics\n  >(): GroupingColumnDef<TGenerics> => {\n    return {\n      aggregationFn: 'auto',\n    }\n  },\n\n  getInitialState: (state): GroupingTableState => {\n    return {\n      grouping: [],\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TGenerics extends TableGenerics>(\n    instance: TableInstance<TGenerics>\n  ): GroupingOptions<TGenerics> => {\n    return {\n      onGroupingChange: makeStateUpdater('grouping', instance),\n      groupedColumnMode: 'reorder',\n    }\n  },\n\n  createColumn: <TGenerics extends TableGenerics>(\n    column: Column<TGenerics>,\n    instance: TableInstance<TGenerics>\n  ): GroupingColumn<TGenerics> => {\n    return {\n      toggleGrouping: () => {\n        instance.setGrouping(old => {\n          // Find any existing grouping for this column\n          if (old?.includes(column.id)) {\n            return old.filter(d => d !== column.id)\n          }\n\n          return [...(old ?? []), column.id]\n        })\n      },\n\n      getCanGroup: () => {\n        return (\n          column.enableGrouping ??\n          true ??\n          instance.options.enableGrouping ??\n          true ??\n          !!column.accessorFn\n        )\n      },\n\n      getIsGrouped: () => {\n        return instance.getState().grouping?.includes(column.id)\n      },\n\n      getGroupedIndex: () => instance.getState().grouping?.indexOf(column.id),\n\n      getToggleGroupingHandler: () => {\n        const canGroup = column.getCanGroup()\n\n        return () => {\n          if (!canGroup) return\n          column.toggleGrouping()\n        }\n      },\n      getColumnAutoAggregationFn: () => {\n        const firstRow = instance.getCoreRowModel().flatRows[0]\n\n        const value = firstRow?.getValue(column.id)\n\n        if (typeof value === 'number') {\n          return aggregationFns.sum\n        }\n\n        if (Object.prototype.toString.call(value) === '[object Date]') {\n          return aggregationFns.extent\n        }\n\n        return aggregationFns.count\n      },\n      getColumnAggregationFn: () => {\n        const userAggregationFns = instance.options.aggregationFns\n\n        if (!column) {\n          throw new Error()\n        }\n\n        return isFunction(column.aggregationFn)\n          ? column.aggregationFn\n          : column.aggregationFn === 'auto'\n          ? column.getColumnAutoAggregationFn()\n          : (userAggregationFns as Record<string, any>)?.[\n              column.aggregationFn as string\n            ] ??\n            (aggregationFns[\n              column.aggregationFn as BuiltInAggregationFn\n            ] as AggregationFn<TGenerics>)\n      },\n    }\n  },\n\n  createInstance: <TGenerics extends TableGenerics>(\n    instance: TableInstance<TGenerics>\n  ): GroupingInstance<TGenerics> => {\n    return {\n      setGrouping: updater => instance.options.onGroupingChange?.(updater),\n\n      resetGrouping: defaultState => {\n        instance.setGrouping(\n          defaultState ? [] : instance.initialState?.grouping ?? []\n        )\n      },\n\n      getPreGroupedRowModel: () => instance.getSortedRowModel(),\n      getGroupedRowModel: () => {\n        if (\n          !instance._getGroupedRowModel &&\n          instance.options.getGroupedRowModel\n        ) {\n          instance._getGroupedRowModel =\n            instance.options.getGroupedRowModel(instance)\n        }\n\n        if (instance.options.manualGrouping || !instance._getGroupedRowModel) {\n          return instance.getPreGroupedRowModel()\n        }\n\n        return instance._getGroupedRowModel()\n      },\n    }\n  },\n\n  createRow: <TGenerics extends TableGenerics>(\n    row: Row<TGenerics>,\n    instance: TableInstance<TGenerics>\n  ): GroupingRow => {\n    return {\n      getIsGrouped: () => !!row.groupingColumnId,\n      groupingValuesCache: {},\n    }\n  },\n\n  createCell: <TGenerics extends TableGenerics>(\n    cell: Cell<TGenerics>,\n    column: Column<TGenerics>,\n    row: Row<TGenerics>,\n    instance: TableInstance<TGenerics>\n  ): GroupingCell<TGenerics> => {\n    return {\n      getIsGrouped: () =>\n        column.getIsGrouped() && column.id === row.groupingColumnId,\n      getIsPlaceholder: () => !cell.getIsGrouped() && column.getIsGrouped(),\n      getIsAggregated: () =>\n        !cell.getIsGrouped() &&\n        !cell.getIsPlaceholder() &&\n        row.subRows?.length > 1,\n      renderAggregatedCell: () => {\n        const template = column.aggregatedCell ?? column.cell\n\n        return template\n          ? instance._render(template, {\n              instance,\n              column,\n              row,\n              cell,\n              getValue: cell.getValue,\n            })\n          : null\n      },\n    }\n  },\n}\n\nexport function orderColumns<TGenerics extends TableGenerics>(\n  leafColumns: Column<TGenerics>[],\n  grouping: string[],\n  groupedColumnMode?: GroupingColumnMode\n) {\n  if (!grouping?.length || !groupedColumnMode) {\n    return leafColumns\n  }\n\n  const nonGroupingColumns = leafColumns.filter(\n    col => !grouping.includes(col.id)\n  )\n\n  if (groupedColumnMode === 'remove') {\n    return nonGroupingColumns\n  }\n\n  const groupingColumns = grouping\n    .map(g => leafColumns.find(col => col.id === g)!)\n    .filter(Boolean)\n\n  return [...groupingColumns, ...nonGroupingColumns]\n}\n","import { makeStateUpdater, memo } from '../utils'\n\nimport {\n  TableInstance,\n  OnChangeFn,\n  Updater,\n  Column,\n  TableGenerics,\n  TableFeature,\n} from '../types'\n\nimport { Grouping, orderColumns } from './Grouping'\n\nexport type ColumnOrderTableState = {\n  columnOrder: ColumnOrderState\n}\n\nexport type ColumnOrderState = string[]\n\nexport type ColumnOrderOptions = {\n  onColumnOrderChange?: OnChangeFn<ColumnOrderState>\n}\n\nexport type ColumnOrderDefaultOptions = {\n  onColumnOrderChange: OnChangeFn<ColumnOrderState>\n}\n\nexport type ColumnOrderInstance<TGenerics extends TableGenerics> = {\n  setColumnOrder: (updater: Updater<ColumnOrderState>) => void\n  resetColumnOrder: (defaultState?: boolean) => void\n  _getOrderColumnsFn: () => (\n    columns: Column<TGenerics>[]\n  ) => Column<TGenerics>[]\n}\n\n//\n\nexport const Ordering: TableFeature = {\n  getInitialState: (state): ColumnOrderTableState => {\n    return {\n      columnOrder: [],\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TGenerics extends TableGenerics>(\n    instance: TableInstance<TGenerics>\n  ): ColumnOrderDefaultOptions => {\n    return {\n      onColumnOrderChange: makeStateUpdater('columnOrder', instance),\n    }\n  },\n\n  createInstance: <TGenerics extends TableGenerics>(\n    instance: TableInstance<TGenerics>\n  ): ColumnOrderInstance<TGenerics> => {\n    return {\n      setColumnOrder: updater =>\n        instance.options.onColumnOrderChange?.(updater),\n      resetColumnOrder: defaultState => {\n        instance.setColumnOrder(\n          defaultState ? [] : instance.initialState.columnOrder ?? []\n        )\n      },\n      _getOrderColumnsFn: memo(\n        () => [\n          instance.getState().columnOrder,\n          instance.getState().grouping,\n          instance.options.groupedColumnMode,\n        ],\n        (columnOrder, grouping, groupedColumnMode) => columns => {\n          // Sort grouped columns to the start of the column list\n          // before the headers are built\n          let orderedColumns: Column<TGenerics>[] = []\n\n          // If there is no order, return the normal columns\n          if (!columnOrder?.length) {\n            orderedColumns = columns\n          } else {\n            const columnOrderCopy = [...columnOrder]\n\n            // If there is an order, make a copy of the columns\n            const columnsCopy = [...columns]\n\n            // And make a new ordered array of the columns\n\n            // Loop over the columns and place them in order into the new array\n            while (columnsCopy.length && columnOrderCopy.length) {\n              const targetColumnId = columnOrderCopy.shift()\n              const foundIndex = columnsCopy.findIndex(\n                d => d.id === targetColumnId\n              )\n              if (foundIndex > -1) {\n                orderedColumns.push(columnsCopy.splice(foundIndex, 1)[0]!)\n              }\n            }\n\n            // If there are any columns left, add them to the end\n            orderedColumns = [...orderedColumns, ...columnsCopy]\n          }\n\n          return orderColumns(orderedColumns, grouping, groupedColumnMode)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getOrderColumnsFn',\n          // debug: () => instance.options.debugAll ?? instance.options.debugTable,\n        }\n      ),\n    }\n  },\n}\n","import {\n  OnChangeFn,\n  TableGenerics,\n  TableInstance,\n  RowModel,\n  Updater,\n  TableFeature,\n} from '../types'\nimport { functionalUpdate, makeStateUpdater, memo } from '../utils'\n\nexport type PaginationState = {\n  pageIndex: number\n  pageSize: number\n  pageCount?: number\n}\n\nexport type PaginationTableState = {\n  pagination: PaginationState\n}\n\nexport type PaginationInitialTableState = {\n  pagination?: Partial<PaginationState>\n}\n\nexport type PaginationOptions<TGenerics extends TableGenerics> = {\n  manualPagination?: boolean\n  onPaginationChange?: OnChangeFn<PaginationState>\n  autoResetPageIndex?: boolean\n  getPaginationRowModel?: (\n    instance: TableInstance<TGenerics>\n  ) => () => RowModel<TGenerics>\n}\n\nexport type PaginationDefaultOptions = {\n  onPaginationChange: OnChangeFn<PaginationState>\n}\n\nexport type PaginationInstance<TGenerics extends TableGenerics> = {\n  _autoResetPageIndex: () => void\n  setPagination: (updater: Updater<PaginationState>) => void\n  resetPagination: (defaultState?: boolean) => void\n  setPageIndex: (updater: Updater<number>) => void\n  resetPageIndex: (defaultState?: boolean) => void\n  setPageSize: (updater: Updater<number>) => void\n  resetPageSize: (defaultState?: boolean) => void\n  setPageCount: (updater: Updater<number>) => void\n  getPageOptions: () => number[]\n  getCanPreviousPage: () => boolean\n  getCanNextPage: () => boolean\n  previousPage: () => void\n  nextPage: () => void\n  getPrePaginationRowModel: () => RowModel<TGenerics>\n  getPaginationRowModel: () => RowModel<TGenerics>\n  _getPaginationRowModel?: () => RowModel<TGenerics>\n  getPageCount: () => number\n}\n\n//\n\nconst defaultPageIndex = 0\nconst defaultPageSize = 10\n\nconst getDefaultPaginationState = (): PaginationState => ({\n  pageIndex: defaultPageIndex,\n  pageSize: defaultPageSize,\n})\n\nexport const Pagination: TableFeature = {\n  getInitialState: (state): PaginationTableState => {\n    return {\n      ...state,\n      pagination: {\n        ...getDefaultPaginationState(),\n        ...state?.pagination,\n      },\n    }\n  },\n\n  getDefaultOptions: <TGenerics extends TableGenerics>(\n    instance: TableInstance<TGenerics>\n  ): PaginationDefaultOptions => {\n    return {\n      onPaginationChange: makeStateUpdater('pagination', instance),\n    }\n  },\n\n  createInstance: <TGenerics extends TableGenerics>(\n    instance: TableInstance<TGenerics>\n  ): PaginationInstance<TGenerics> => {\n    let registered = false\n    let queued = false\n\n    return {\n      _autoResetPageIndex: () => {\n        if (!registered) {\n          instance._queue(() => {\n            registered = true\n          })\n          return\n        }\n\n        if (\n          instance.options.autoResetAll ??\n          instance.options.autoResetPageIndex ??\n          !instance.options.manualPagination\n        ) {\n          if (queued) return\n          queued = true\n          instance._queue(() => {\n            instance.resetPageIndex()\n            queued = false\n          })\n        }\n      },\n      setPagination: updater => {\n        const safeUpdater: Updater<PaginationState> = old => {\n          let newState = functionalUpdate(updater, old)\n\n          return newState\n        }\n\n        return instance.options.onPaginationChange?.(safeUpdater)\n      },\n      resetPagination: defaultState => {\n        instance.setPagination(\n          defaultState\n            ? getDefaultPaginationState()\n            : instance.initialState.pagination ?? getDefaultPaginationState()\n        )\n      },\n      setPageIndex: updater => {\n        instance.setPagination(old => {\n          let pageIndex = functionalUpdate(updater, old.pageIndex)\n\n          const maxPageIndex =\n            typeof old.pageCount !== 'undefined'\n              ? old.pageCount - 1\n              : Number.MAX_SAFE_INTEGER\n\n          pageIndex = Math.min(Math.max(0, pageIndex), maxPageIndex)\n\n          return {\n            ...old,\n            pageIndex,\n          }\n        })\n      },\n      resetPageIndex: defaultState => {\n        instance.setPageIndex(\n          defaultState\n            ? defaultPageIndex\n            : instance.initialState?.pagination?.pageIndex ?? defaultPageIndex\n        )\n      },\n      resetPageSize: defaultState => {\n        instance.setPageSize(\n          defaultState\n            ? defaultPageSize\n            : instance.initialState?.pagination?.pageSize ?? defaultPageSize\n        )\n      },\n      setPageSize: updater => {\n        instance.setPagination(old => {\n          const pageSize = Math.max(1, functionalUpdate(updater, old.pageSize))\n          const topRowIndex = old.pageSize * old.pageIndex!\n          const pageIndex = Math.floor(topRowIndex / pageSize)\n\n          return {\n            ...old,\n            pageIndex,\n            pageSize,\n          }\n        })\n      },\n      setPageCount: updater =>\n        instance.setPagination(old => {\n          let newPageCount = functionalUpdate(updater, old.pageCount ?? -1)\n\n          if (typeof newPageCount === 'number') {\n            newPageCount = Math.max(-1, newPageCount)\n          }\n\n          return {\n            ...old,\n            pageCount: newPageCount,\n          }\n        }),\n\n      getPageOptions: memo(\n        () => [\n          instance.getState().pagination.pageSize,\n          instance.getState().pagination.pageCount,\n        ],\n        (pageSize, pageCount) => {\n          let pageOptions: number[] = []\n          if (pageCount && pageCount > 0) {\n            pageOptions = [...new Array(pageCount)].fill(null).map((_, i) => i)\n          }\n          return pageOptions\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getPageOptions',\n          debug: () => instance.options.debugAll ?? instance.options.debugTable,\n        }\n      ),\n\n      getCanPreviousPage: () => instance.getState().pagination.pageIndex > 0,\n\n      getCanNextPage: () => {\n        const { pageIndex } = instance.getState().pagination\n\n        const pageCount = instance.getPageCount()\n\n        if (pageCount === -1) {\n          return true\n        }\n\n        if (pageCount === 0) {\n          return false\n        }\n\n        return pageIndex < pageCount - 1\n      },\n\n      previousPage: () => {\n        return instance.setPageIndex(old => old - 1)\n      },\n\n      nextPage: () => {\n        return instance.setPageIndex(old => {\n          return old + 1\n        })\n      },\n\n      getPrePaginationRowModel: () => instance.getExpandedRowModel(),\n      getPaginationRowModel: () => {\n        if (\n          !instance._getPaginationRowModel &&\n          instance.options.getPaginationRowModel\n        ) {\n          instance._getPaginationRowModel =\n            instance.options.getPaginationRowModel(instance)\n        }\n\n        if (\n          instance.options.manualPagination ||\n          !instance._getPaginationRowModel\n        ) {\n          return instance.getPrePaginationRowModel()\n        }\n\n        return instance._getPaginationRowModel()\n      },\n\n      getPageCount: () => {\n        const { pageCount } = instance.getState().pagination\n\n        if (typeof pageCount !== 'undefined') {\n          return pageCount\n        }\n\n        return Math.ceil(\n          instance.getPrePaginationRowModel().rows.length /\n            instance.getState().pagination.pageSize\n        )\n      },\n    }\n  },\n}\n","import {\n  OnChangeFn,\n  Updater,\n  TableInstance,\n  Column,\n  TableGenerics,\n  Row,\n  Cell,\n  TableFeature,\n} from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type ColumnPinningPosition = false | 'left' | 'right'\n\nexport type ColumnPinningState = {\n  left?: string[]\n  right?: string[]\n}\n\nexport type ColumnPinningTableState = {\n  columnPinning: ColumnPinningState\n}\n\nexport type ColumnPinningOptions = {\n  onColumnPinningChange?: OnChangeFn<ColumnPinningState>\n  enablePinning?: boolean\n}\n\nexport type ColumnPinningDefaultOptions = {\n  onColumnPinningChange: OnChangeFn<ColumnPinningState>\n}\n\nexport type ColumnPinningColumnDef = {\n  enablePinning?: boolean\n}\n\nexport type ColumnPinningColumn = {\n  getCanPin: () => boolean\n  getPinnedIndex: () => number\n  getIsPinned: () => ColumnPinningPosition\n  pin: (position: ColumnPinningPosition) => void\n}\n\nexport type ColumnPinningRow<TGenerics extends TableGenerics> = {\n  getLeftVisibleCells: () => Cell<TGenerics>[]\n  getCenterVisibleCells: () => Cell<TGenerics>[]\n  getRightVisibleCells: () => Cell<TGenerics>[]\n}\n\nexport type ColumnPinningInstance<TGenerics extends TableGenerics> = {\n  setColumnPinning: (updater: Updater<ColumnPinningState>) => void\n  resetColumnPinning: (defaultState?: boolean) => void\n  getIsSomeColumnsPinned: () => boolean\n  getLeftLeafColumns: () => Column<TGenerics>[]\n  getRightLeafColumns: () => Column<TGenerics>[]\n  getCenterLeafColumns: () => Column<TGenerics>[]\n}\n\n//\n\nconst getDefaultPinningState = (): ColumnPinningState => ({\n  left: [],\n  right: [],\n})\n\nexport const Pinning: TableFeature = {\n  getInitialState: (state): ColumnPinningTableState => {\n    return {\n      columnPinning: getDefaultPinningState(),\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TGenerics extends TableGenerics>(\n    instance: TableInstance<TGenerics>\n  ): ColumnPinningDefaultOptions => {\n    return {\n      onColumnPinningChange: makeStateUpdater('columnPinning', instance),\n    }\n  },\n\n  createColumn: <TGenerics extends TableGenerics>(\n    column: Column<TGenerics>,\n    instance: TableInstance<TGenerics>\n  ): ColumnPinningColumn => {\n    return {\n      pin: position => {\n        const columnIds = column\n          .getLeafColumns()\n          .map(d => d.id)\n          .filter(Boolean) as string[]\n\n        instance.setColumnPinning(old => {\n          if (position === 'right') {\n            return {\n              left: (old?.left ?? []).filter(d => !columnIds?.includes(d)),\n              right: [\n                ...(old?.right ?? []).filter(d => !columnIds?.includes(d)),\n                ...columnIds,\n              ],\n            }\n          }\n\n          if (position === 'left') {\n            return {\n              left: [\n                ...(old?.left ?? []).filter(d => !columnIds?.includes(d)),\n                ...columnIds,\n              ],\n              right: (old?.right ?? []).filter(d => !columnIds?.includes(d)),\n            }\n          }\n\n          return {\n            left: (old?.left ?? []).filter(d => !columnIds?.includes(d)),\n            right: (old?.right ?? []).filter(d => !columnIds?.includes(d)),\n          }\n        })\n      },\n\n      getCanPin: () => {\n        const leafColumns = column.getLeafColumns()\n\n        return leafColumns.some(\n          d =>\n            (d.enablePinning ?? true) &&\n            (instance.options.enablePinning ?? true)\n        )\n      },\n\n      getIsPinned: () => {\n        const leafColumnIds = column.getLeafColumns().map(d => d.id)\n\n        const { left, right } = instance.getState().columnPinning\n\n        const isLeft = leafColumnIds.some(d => left?.includes(d))\n        const isRight = leafColumnIds.some(d => right?.includes(d))\n\n        return isLeft ? 'left' : isRight ? 'right' : false\n      },\n\n      getPinnedIndex: () => {\n        const position = column.getIsPinned()\n\n        return position\n          ? instance.getState().columnPinning?.[position]?.indexOf(column.id) ??\n              -1\n          : 0\n      },\n    }\n  },\n\n  createRow: <TGenerics extends TableGenerics>(\n    row: Row<TGenerics>,\n    instance: TableInstance<TGenerics>\n  ): ColumnPinningRow<TGenerics> => {\n    return {\n      getCenterVisibleCells: memo(\n        () => [\n          row._getAllVisibleCells(),\n          instance.getState().columnPinning.left,\n          instance.getState().columnPinning.right,\n        ],\n        (allCells, left, right) => {\n          const leftAndRight: string[] = [...(left ?? []), ...(right ?? [])]\n\n          return allCells.filter(d => !leftAndRight.includes(d.columnId))\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' &&\n            'row.getCenterVisibleCells',\n          debug: () => instance.options.debugAll ?? instance.options.debugRows,\n        }\n      ),\n      getLeftVisibleCells: memo(\n        () => [\n          row._getAllVisibleCells(),\n          instance.getState().columnPinning.left,\n          ,\n        ],\n        (allCells, left) => {\n          const cells = (left ?? [])\n            .map(columnId => allCells.find(cell => cell.columnId === columnId)!)\n            .filter(Boolean)\n            .map(d => ({ ...d, position: 'left' } as Cell<TGenerics>))\n\n          return cells\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' && 'row.getLeftVisibleCells',\n          debug: () => instance.options.debugAll ?? instance.options.debugRows,\n        }\n      ),\n      getRightVisibleCells: memo(\n        () => [\n          row._getAllVisibleCells(),\n          instance.getState().columnPinning.right,\n        ],\n        (allCells, right) => {\n          const cells = (right ?? [])\n            .map(columnId => allCells.find(cell => cell.columnId === columnId)!)\n            .filter(Boolean)\n            .map(d => ({ ...d, position: 'left' } as Cell<TGenerics>))\n\n          return cells\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' && 'row.getRightVisibleCells',\n          debug: () => instance.options.debugAll ?? instance.options.debugRows,\n        }\n      ),\n    }\n  },\n\n  createInstance: <TGenerics extends TableGenerics>(\n    instance: TableInstance<TGenerics>\n  ): ColumnPinningInstance<TGenerics> => {\n    return {\n      setColumnPinning: updater =>\n        instance.options.onColumnPinningChange?.(updater),\n\n      resetColumnPinning: defaultState =>\n        instance.setColumnPinning(\n          defaultState\n            ? getDefaultPinningState()\n            : instance.initialState?.columnPinning ?? getDefaultPinningState()\n        ),\n\n      getIsSomeColumnsPinned: () => {\n        const { left, right } = instance.getState().columnPinning\n\n        return Boolean(left?.length || right?.length)\n      },\n\n      getLeftLeafColumns: memo(\n        () => [\n          instance.getAllLeafColumns(),\n          instance.getState().columnPinning.left,\n        ],\n        (allColumns, left) => {\n          return (left ?? [])\n            .map(columnId => allColumns.find(column => column.id === columnId)!)\n            .filter(Boolean)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftLeafColumns',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugColumns,\n        }\n      ),\n\n      getRightLeafColumns: memo(\n        () => [\n          instance.getAllLeafColumns(),\n          instance.getState().columnPinning.right,\n        ],\n        (allColumns, right) => {\n          return (right ?? [])\n            .map(columnId => allColumns.find(column => column.id === columnId)!)\n            .filter(Boolean)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightLeafColumns',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugColumns,\n        }\n      ),\n\n      getCenterLeafColumns: memo(\n        () => [\n          instance.getAllLeafColumns(),\n          instance.getState().columnPinning.left,\n          instance.getState().columnPinning.right,\n        ],\n        (allColumns, left, right) => {\n          const leftAndRight: string[] = [...(left ?? []), ...(right ?? [])]\n\n          return allColumns.filter(d => !leftAndRight.includes(d.id))\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterLeafColumns',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugColumns,\n        }\n      ),\n    }\n  },\n}\n","import {\n  OnChangeFn,\n  TableGenerics,\n  TableInstance,\n  Row,\n  RowModel,\n  Updater,\n  TableFeature,\n} from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type RowSelectionState = Record<string, boolean>\n\nexport type RowSelectionTableState = {\n  rowSelection: RowSelectionState\n}\n\nexport type RowSelectionOptions<TGenerics extends TableGenerics> = {\n  enableRowSelection?: boolean | ((row: Row<TGenerics>) => boolean)\n  enableMultiRowSelection?: boolean | ((row: Row<TGenerics>) => boolean)\n  enableSubRowSelection?: boolean | ((row: Row<TGenerics>) => boolean)\n  onRowSelectionChange?: OnChangeFn<RowSelectionState>\n  // enableGroupingRowSelection?:\n  //   | boolean\n  //   | ((\n  //       row: Row<TGenerics>\n  //     ) => boolean)\n  // isAdditiveSelectEvent?: (e: unknown) => boolean\n  // isInclusiveSelectEvent?: (e: unknown) => boolean\n  // selectRowsFn?: (\n  //   instance: TableInstance<\n  //     TData,\n  //     TValue,\n  //     TFilterFns,\n  //     TSortingFns,\n  //     TAggregationFns\n  //   >,\n  //   rowModel: RowModel<TGenerics>\n  // ) => RowModel<TGenerics>\n}\n\nexport type RowSelectionRow = {\n  getIsSelected: () => boolean\n  getIsSomeSelected: () => boolean\n  getCanSelect: () => boolean\n  getCanMultiSelect: () => boolean\n  getCanSelectSubRows: () => boolean\n  toggleSelected: (value?: boolean) => void\n  getToggleSelectedHandler: () => (event: unknown) => void\n}\n\nexport type RowSelectionInstance<TGenerics extends TableGenerics> = {\n  getToggleAllRowsSelectedHandler: () => (event: unknown) => void\n  getToggleAllPageRowsSelectedHandler: () => (event: unknown) => void\n  setRowSelection: (updater: Updater<RowSelectionState>) => void\n  resetRowSelection: (defaultState?: boolean) => void\n  getIsAllRowsSelected: () => boolean\n  getIsAllPageRowsSelected: () => boolean\n  getIsSomeRowsSelected: () => boolean\n  getIsSomePageRowsSelected: () => boolean\n  toggleAllRowsSelected: (value: boolean) => void\n  toggleAllPageRowsSelected: (value: boolean) => void\n  getPreSelectedRowModel: () => RowModel<TGenerics>\n  getSelectedRowModel: () => RowModel<TGenerics>\n  getFilteredSelectedRowModel: () => RowModel<TGenerics>\n  getGroupedSelectedRowModel: () => RowModel<TGenerics>\n}\n\n//\n\nexport const RowSelection: TableFeature = {\n  getInitialState: (state): RowSelectionTableState => {\n    return {\n      rowSelection: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TGenerics extends TableGenerics>(\n    instance: TableInstance<TGenerics>\n  ): RowSelectionOptions<TGenerics> => {\n    return {\n      onRowSelectionChange: makeStateUpdater('rowSelection', instance),\n      enableRowSelection: true,\n      enableMultiRowSelection: true,\n      enableSubRowSelection: true,\n      // enableGroupingRowSelection: false,\n      // isAdditiveSelectEvent: (e: unknown) => !!e.metaKey,\n      // isInclusiveSelectEvent: (e: unknown) => !!e.shiftKey,\n    }\n  },\n\n  createInstance: <TGenerics extends TableGenerics>(\n    instance: TableInstance<TGenerics>\n  ): RowSelectionInstance<TGenerics> => {\n    return {\n      setRowSelection: updater =>\n        instance.options.onRowSelectionChange?.(updater),\n      resetRowSelection: defaultState =>\n        instance.setRowSelection(\n          defaultState ? {} : instance.initialState.rowSelection ?? {}\n        ),\n      toggleAllRowsSelected: value => {\n        instance.setRowSelection(old => {\n          value =\n            typeof value !== 'undefined'\n              ? value\n              : !instance.getIsAllRowsSelected()\n\n          const rowSelection = { ...old }\n\n          const preGroupedFlatRows = instance.getPreGroupedRowModel().flatRows\n\n          // We don't use `mutateRowIsSelected` here for performance reasons.\n          // All of the rows are flat already, so it wouldn't be worth it\n          if (value) {\n            preGroupedFlatRows.forEach(row => {\n              rowSelection[row.id] = true\n            })\n          } else {\n            preGroupedFlatRows.forEach(row => {\n              delete rowSelection[row.id]\n            })\n          }\n\n          return rowSelection\n        })\n      },\n      toggleAllPageRowsSelected: value =>\n        instance.setRowSelection(old => {\n          const selectAll =\n            typeof value !== 'undefined'\n              ? value\n              : !instance.getIsAllPageRowsSelected()\n\n          const rowSelection: RowSelectionState = { ...old }\n\n          instance.getRowModel().rows.forEach(row => {\n            mutateRowIsSelected(rowSelection, row.id, value, instance)\n          })\n\n          return rowSelection\n        }),\n\n      // addRowSelectionRange: rowId => {\n      //   const {\n      //     rows,\n      //     rowsById,\n      //     options: { selectGroupingRows, selectSubRows },\n      //   } = instance\n\n      //   const findSelectedRow = (rows: Row[]) => {\n      //     let found\n      //     rows.find(d => {\n      //       if (d.getIsSelected()) {\n      //         found = d\n      //         return true\n      //       }\n      //       const subFound = findSelectedRow(d.subRows || [])\n      //       if (subFound) {\n      //         found = subFound\n      //         return true\n      //       }\n      //       return false\n      //     })\n      //     return found\n      //   }\n\n      //   const firstRow = findSelectedRow(rows) || rows[0]\n      //   const lastRow = rowsById[rowId]\n\n      //   let include = false\n      //   const selectedRowIds = {}\n\n      //   const addRow = (row: Row) => {\n      //     mutateRowIsSelected(selectedRowIds, row.id, true, {\n      //       rowsById,\n      //       selectGroupingRows: selectGroupingRows!,\n      //       selectSubRows: selectSubRows!,\n      //     })\n      //   }\n\n      //   instance.rows.forEach(row => {\n      //     const isFirstRow = row.id === firstRow.id\n      //     const isLastRow = row.id === lastRow.id\n\n      //     if (isFirstRow || isLastRow) {\n      //       if (!include) {\n      //         include = true\n      //       } else if (include) {\n      //         addRow(row)\n      //         include = false\n      //       }\n      //     }\n\n      //     if (include) {\n      //       addRow(row)\n      //     }\n      //   })\n\n      //   instance.setRowSelection(selectedRowIds)\n      // },\n      getPreSelectedRowModel: () => instance.getCoreRowModel(),\n      getSelectedRowModel: memo(\n        () => [instance.getState().rowSelection, instance.getCoreRowModel()],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(instance, rowModel)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getSelectedRowModel',\n          debug: () => instance.options.debugAll ?? instance.options.debugTable,\n        }\n      ),\n\n      getFilteredSelectedRowModel: memo(\n        () => [\n          instance.getState().rowSelection,\n          instance.getFilteredRowModel(),\n        ],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(instance, rowModel)\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' &&\n            'getFilteredSelectedRowModel',\n          debug: () => instance.options.debugAll ?? instance.options.debugTable,\n        }\n      ),\n\n      getGroupedSelectedRowModel: memo(\n        () => [instance.getState().rowSelection, instance.getGroupedRowModel()],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(instance, rowModel)\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' &&\n            'getGroupedSelectedRowModel',\n          debug: () => instance.options.debugAll ?? instance.options.debugTable,\n        }\n      ),\n\n      ///\n\n      // getGroupingRowCanSelect: rowId => {\n      //   const row = instance.getRow(rowId)\n\n      //   if (!row) {\n      //     throw new Error()\n      //   }\n\n      //   if (typeof instance.options.enableGroupingRowSelection === 'function') {\n      //     return instance.options.enableGroupingRowSelection(row)\n      //   }\n\n      //   return instance.options.enableGroupingRowSelection ?? false\n      // },\n\n      getIsAllRowsSelected: () => {\n        const preFilteredFlatRows = instance.getPreFilteredRowModel().flatRows\n        const { rowSelection } = instance.getState()\n\n        let isAllRowsSelected = Boolean(\n          preFilteredFlatRows.length && Object.keys(rowSelection).length\n        )\n\n        if (isAllRowsSelected) {\n          if (preFilteredFlatRows.some(row => !rowSelection[row.id])) {\n            isAllRowsSelected = false\n          }\n        }\n\n        return isAllRowsSelected\n      },\n\n      getIsAllPageRowsSelected: () => {\n        const paginationFlatRows = instance.getPaginationRowModel().flatRows\n        const { rowSelection } = instance.getState()\n\n        let isAllPageRowsSelected = !!paginationFlatRows.length\n\n        if (\n          isAllPageRowsSelected &&\n          paginationFlatRows.some(row => !rowSelection[row.id])\n        ) {\n          isAllPageRowsSelected = false\n        }\n\n        return isAllPageRowsSelected\n      },\n\n      getIsSomeRowsSelected: () => {\n        return (\n          !instance.getIsAllRowsSelected() &&\n          !!Object.keys(instance.getState().rowSelection ?? {}).length\n        )\n      },\n\n      getIsSomePageRowsSelected: () => {\n        const paginationFlatRows = instance.getPaginationRowModel().flatRows\n        return instance.getIsAllPageRowsSelected()\n          ? false\n          : !!paginationFlatRows?.length\n      },\n\n      getToggleAllRowsSelectedHandler: () => {\n        return (e: unknown) => {\n          instance.toggleAllRowsSelected(\n            ((e as MouseEvent).target as HTMLInputElement).checked\n          )\n        }\n      },\n\n      getToggleAllPageRowsSelectedHandler: () => {\n        return (e: unknown) => {\n          instance.toggleAllPageRowsSelected(\n            ((e as MouseEvent).target as HTMLInputElement).checked\n          )\n        }\n      },\n    }\n  },\n\n  createRow: <TGenerics extends TableGenerics>(\n    row: Row<TGenerics>,\n    instance: TableInstance<TGenerics>\n  ): RowSelectionRow => {\n    return {\n      toggleSelected: value => {\n        const isSelected = row.getIsSelected()\n\n        instance.setRowSelection(old => {\n          value = typeof value !== 'undefined' ? value : !isSelected\n\n          if (isSelected === value) {\n            return old\n          }\n\n          const selectedRowIds = { ...old }\n\n          mutateRowIsSelected(selectedRowIds, row.id, value, instance)\n\n          return selectedRowIds\n        })\n      },\n      getIsSelected: () => {\n        const { rowSelection } = instance.getState()\n        return isRowSelected(row, rowSelection, instance) === true\n      },\n\n      getIsSomeSelected: () => {\n        const { rowSelection } = instance.getState()\n        return isRowSelected(row, rowSelection, instance) === 'some'\n      },\n\n      getCanSelect: () => {\n        if (typeof instance.options.enableRowSelection === 'function') {\n          return instance.options.enableRowSelection(row)\n        }\n\n        return instance.options.enableRowSelection ?? true\n      },\n\n      getCanSelectSubRows: () => {\n        if (typeof instance.options.enableSubRowSelection === 'function') {\n          return instance.options.enableSubRowSelection(row)\n        }\n\n        return instance.options.enableSubRowSelection ?? true\n      },\n\n      getCanMultiSelect: () => {\n        if (typeof instance.options.enableMultiRowSelection === 'function') {\n          return instance.options.enableMultiRowSelection(row)\n        }\n\n        return instance.options.enableMultiRowSelection ?? true\n      },\n      getToggleSelectedHandler: () => {\n        const canSelect = row.getCanSelect()\n\n        return (e: unknown) => {\n          if (!canSelect) return\n          row.toggleSelected(\n            ((e as MouseEvent).target as HTMLInputElement)?.checked\n          )\n        }\n      },\n    }\n  },\n}\n\nconst mutateRowIsSelected = <TGenerics extends TableGenerics>(\n  selectedRowIds: Record<string, boolean>,\n  id: string,\n  value: boolean,\n  instance: TableInstance<TGenerics>\n) => {\n  const row = instance.getRow(id)\n\n  const isGrouped = row.getIsGrouped()\n\n  // if ( // TODO: enforce grouping row selection rules\n  //   !isGrouped ||\n  //   (isGrouped && instance.options.enableGroupingRowSelection)\n  // ) {\n  if (value) {\n    selectedRowIds[id] = true\n  } else {\n    delete selectedRowIds[id]\n  }\n  // }\n\n  if (row.subRows?.length && row.getCanSelectSubRows()) {\n    row.subRows.forEach(row =>\n      mutateRowIsSelected(selectedRowIds, row.id, value, instance)\n    )\n  }\n}\n\nexport function selectRowsFn<TGenerics extends TableGenerics>(\n  instance: TableInstance<TGenerics>,\n  rowModel: RowModel<TGenerics>\n): RowModel<TGenerics> {\n  const rowSelection = instance.getState().rowSelection\n\n  const newSelectedFlatRows: Row<TGenerics>[] = []\n  const newSelectedRowsById: Record<string, Row<TGenerics>> = {}\n\n  // Filters top level and nested rows\n  const recurseRows = (rows: Row<TGenerics>[], depth = 0): Row<TGenerics>[] => {\n    return rows\n      .map(row => {\n        const isSelected = isRowSelected(row, rowSelection, instance) === true\n\n        if (isSelected) {\n          newSelectedFlatRows.push(row)\n          newSelectedRowsById[row.id] = row\n        }\n\n        if (row.subRows?.length) {\n          row = {\n            ...row,\n            subRows: recurseRows(row.subRows, depth + 1),\n          }\n        }\n\n        if (isSelected) {\n          return row\n        }\n      })\n      .filter(Boolean) as Row<TGenerics>[]\n  }\n\n  return {\n    rows: recurseRows(rowModel.rows),\n    flatRows: newSelectedFlatRows,\n    rowsById: newSelectedRowsById,\n  }\n}\n\nexport function isRowSelected<TGenerics extends TableGenerics>(\n  row: Row<TGenerics>,\n  selection: Record<string, boolean>,\n  instance: TableInstance<TGenerics>\n): boolean | 'some' {\n  if (selection[row.id]) {\n    return true\n  }\n\n  if (row.subRows && row.subRows.length) {\n    let allChildrenSelected = true\n    let someSelected = false\n\n    row.subRows.forEach(subRow => {\n      // Bail out early if we know both of these\n      if (someSelected && !allChildrenSelected) {\n        return\n      }\n\n      if (isRowSelected(subRow, selection, instance)) {\n        someSelected = true\n      } else {\n        allChildrenSelected = false\n      }\n    })\n\n    return allChildrenSelected ? true : someSelected ? 'some' : false\n  }\n\n  return false\n}\n","import { TableGenerics, Row } from './types'\n\nexport const reSplitAlphaNumeric = /([0-9]+)/gm\n\nexport const sortingFns = {\n  alphanumeric,\n  alphanumericCaseSensitive,\n  text,\n  textCaseSensitive,\n  datetime,\n  basic,\n}\n\nexport type BuiltInSortingFn = keyof typeof sortingFns\n\nfunction alphanumeric<TGenerics extends TableGenerics>(\n  rowA: Row<TGenerics>,\n  rowB: Row<TGenerics>,\n  columnId: string\n) {\n  return compareAlphanumeric(\n    toString(rowA.getValue(columnId)).toLowerCase(),\n    toString(rowB.getValue(columnId)).toLowerCase()\n  )\n}\n\nfunction alphanumericCaseSensitive<TGenerics extends TableGenerics>(\n  rowA: Row<TGenerics>,\n  rowB: Row<TGenerics>,\n  columnId: string\n) {\n  return compareAlphanumeric(\n    toString(rowA.getValue(columnId)),\n    toString(rowB.getValue(columnId))\n  )\n}\n\n// Mixed sorting is slow, but very inclusive of many edge cases.\n// It handles numbers, mixed alphanumeric combinations, and even\n// null, undefined, and Infinity\nfunction compareAlphanumeric(aStr: string, bStr: string) {\n  // Split on number groups, but keep the delimiter\n  // Then remove falsey split values\n  const a = aStr.split(reSplitAlphaNumeric).filter(Boolean)\n  const b = bStr.split(reSplitAlphaNumeric).filter(Boolean)\n\n  // While\n  while (a.length && b.length) {\n    const aa = a.shift()!\n    const bb = b.shift()!\n\n    const an = parseInt(aa, 10)\n    const bn = parseInt(bb, 10)\n\n    const combo = [an, bn].sort()\n\n    // Both are string\n    if (isNaN(combo[0]!)) {\n      if (aa > bb) {\n        return 1\n      }\n      if (bb > aa) {\n        return -1\n      }\n      continue\n    }\n\n    // One is a string, one is a number\n    if (isNaN(combo[1]!)) {\n      return isNaN(an) ? -1 : 1\n    }\n\n    // Both are numbers\n    if (an > bn) {\n      return 1\n    }\n    if (bn > an) {\n      return -1\n    }\n  }\n\n  return a.length - b.length\n}\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nfunction text<TGenerics extends TableGenerics>(\n  rowA: Row<TGenerics>,\n  rowB: Row<TGenerics>,\n  columnId: string\n) {\n  return compareBasic(\n    toString(rowA.getValue(columnId)).toLowerCase(),\n    toString(rowB.getValue(columnId)).toLowerCase()\n  )\n}\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nfunction textCaseSensitive<TGenerics extends TableGenerics>(\n  rowA: Row<TGenerics>,\n  rowB: Row<TGenerics>,\n  columnId: string\n) {\n  return compareBasic(\n    toString(rowA.getValue(columnId)),\n    toString(rowB.getValue(columnId))\n  )\n}\n\nfunction datetime<TGenerics extends TableGenerics>(\n  rowA: Row<TGenerics>,\n  rowB: Row<TGenerics>,\n  columnId: string\n) {\n  return compareBasic(\n    (rowA.getValue(columnId) as Date).getTime(),\n    (rowB.getValue(columnId) as Date).getTime()\n  )\n}\n\nfunction basic<TGenerics extends TableGenerics>(\n  rowA: Row<TGenerics>,\n  rowB: Row<TGenerics>,\n  columnId: string\n) {\n  return compareBasic(rowA.getValue(columnId), rowB.getValue(columnId))\n}\n\n// Utils\n\nfunction compareBasic(a: any, b: any) {\n  return a === b ? 0 : a > b ? 1 : -1\n}\n\nfunction toString(a: any) {\n  if (typeof a === 'number') {\n    if (isNaN(a) || a === Infinity || a === -Infinity) {\n      return ''\n    }\n    return String(a)\n  }\n  if (typeof a === 'string') {\n    return a\n  }\n  return ''\n}\n","import { RowModel } from '..'\nimport {\n  BuiltInSortingFn,\n  reSplitAlphaNumeric,\n  sortingFns,\n} from '../sortingFns'\n\nimport {\n  Column,\n  OnChangeFn,\n  TableGenerics,\n  TableInstance,\n  Row,\n  Updater,\n  TableFeature,\n} from '../types'\n\nimport { isFunction, makeStateUpdater, Overwrite } from '../utils'\n\nexport type SortDirection = 'asc' | 'desc'\n\nexport type ColumnSort = {\n  id: string\n  desc: boolean\n}\n\nexport type SortingState = ColumnSort[]\n\nexport type SortingFn<TGenerics extends TableGenerics> = {\n  (rowA: Row<TGenerics>, rowB: Row<TGenerics>, columnId: string): number\n}\n\nexport type CustomSortingFns<TGenerics extends TableGenerics> = Record<\n  string,\n  SortingFn<TGenerics>\n>\n\nexport type SortingTableState = {\n  sorting: SortingState\n}\n\nexport type SortingFnOption<TGenerics extends TableGenerics> =\n  | 'auto'\n  | BuiltInSortingFn\n  | keyof TGenerics['SortingFns']\n  | SortingFn<TGenerics>\n\nexport type SortingColumnDef<TGenerics extends TableGenerics> = {\n  sortingFn?: SortingFnOption<Overwrite<TGenerics, { Value: any }>>\n  sortDescFirst?: boolean\n  enableSorting?: boolean\n  enableMultiSort?: boolean\n  invertSorting?: boolean\n  sortUndefined?: false | -1 | 1\n}\n\nexport type SortingColumn<TGenerics extends TableGenerics> = {\n  getAutoSortingFn: () => SortingFn<TGenerics>\n  getAutoSortDir: () => SortDirection\n  getSortingFn: () => SortingFn<TGenerics>\n  getCanSort: () => boolean\n  getCanMultiSort: () => boolean\n  getSortIndex: () => number\n  getIsSorted: () => false | SortDirection\n  clearSorting: () => void\n  toggleSorting: (desc?: boolean, isMulti?: boolean) => void\n  getToggleSortingHandler: () => undefined | ((event: unknown) => void)\n}\n\nexport type SortingOptions<TGenerics extends TableGenerics> = {\n  manualSorting?: boolean\n  sortingFns?: TGenerics['SortingFns']\n  onSortingChange?: OnChangeFn<SortingState>\n  enableSorting?: boolean\n  enableSortingRemoval?: boolean\n  enableMultiRemove?: boolean\n  enableMultiSort?: boolean\n  sortDescFirst?: boolean\n  getSortedRowModel?: (\n    instance: TableInstance<TGenerics>\n  ) => () => RowModel<TGenerics>\n  maxMultiSortColCount?: number\n  isMultiSortEvent?: (e: unknown) => boolean\n}\n\nexport type SortingInstance<TGenerics extends TableGenerics> = {\n  setSorting: (updater: Updater<SortingState>) => void\n  resetSorting: (defaultState?: boolean) => void\n  getPreSortedRowModel: () => RowModel<TGenerics>\n  getSortedRowModel: () => RowModel<TGenerics>\n  _getSortedRowModel?: () => RowModel<TGenerics>\n}\n\n//\n\nexport const Sorting: TableFeature = {\n  getInitialState: (state): SortingTableState => {\n    return {\n      sorting: [],\n      ...state,\n    }\n  },\n\n  getDefaultColumn: <\n    TGenerics extends TableGenerics\n  >(): SortingColumnDef<TGenerics> => {\n    return {\n      sortingFn: 'auto',\n    }\n  },\n\n  getDefaultOptions: <TGenerics extends TableGenerics>(\n    instance: TableInstance<TGenerics>\n  ): SortingOptions<TGenerics> => {\n    return {\n      onSortingChange: makeStateUpdater('sorting', instance),\n      isMultiSortEvent: (e: unknown) => {\n        return (e as MouseEvent).shiftKey\n      },\n    }\n  },\n\n  createColumn: <TGenerics extends TableGenerics>(\n    column: Column<TGenerics>,\n    instance: TableInstance<TGenerics>\n  ): SortingColumn<TGenerics> => {\n    return {\n      getAutoSortingFn: () => {\n        const firstRows = instance.getFilteredRowModel().flatRows.slice(10)\n\n        let isString = false\n\n        for (const row of firstRows) {\n          const value = row?.getValue(column.id)\n\n          if (Object.prototype.toString.call(value) === '[object Date]') {\n            return sortingFns.datetime\n          }\n\n          if (typeof value === 'string') {\n            isString = true\n\n            if (value.split(reSplitAlphaNumeric).length > 1) {\n              return sortingFns.alphanumeric\n            }\n          }\n        }\n\n        if (isString) {\n          return sortingFns.text\n        }\n\n        return sortingFns.basic\n      },\n      getAutoSortDir: () => {\n        const firstRow = instance.getFilteredRowModel().flatRows[0]\n\n        const value = firstRow?.getValue(column.id)\n\n        if (typeof value === 'string') {\n          return 'asc'\n        }\n\n        return 'desc'\n      },\n      getSortingFn: () => {\n        const userSortingFn = instance.options.sortingFns\n\n        if (!column) {\n          throw new Error()\n        }\n\n        return isFunction(column.sortingFn)\n          ? column.sortingFn\n          : column.sortingFn === 'auto'\n          ? column.getAutoSortingFn()\n          : (userSortingFn as Record<string, any>)?.[\n              column.sortingFn as string\n            ] ??\n            (sortingFns[\n              column.sortingFn as BuiltInSortingFn\n            ] as SortingFn<TGenerics>)\n      },\n      toggleSorting: (desc, multi) => {\n        // if (column.columns.length) {\n        //   column.columns.forEach((c, i) => {\n        //     if (c.id) {\n        //       instance.toggleColumnSorting(c.id, undefined, multi || !!i)\n        //     }\n        //   })\n        //   return\n        // }\n\n        instance.setSorting(old => {\n          // Find any existing sorting for this column\n          const existingSorting = old?.find(d => d.id === column.id)\n          const existingIndex = old?.findIndex(d => d.id === column.id)\n          const hasDescDefined = typeof desc !== 'undefined' && desc !== null\n\n          let newSorting: SortingState = []\n\n          // What should we do with this sort action?\n          let sortAction\n\n          if (column.getCanMultiSort() && multi) {\n            if (existingSorting) {\n              sortAction = 'toggle'\n            } else {\n              sortAction = 'add'\n            }\n          } else {\n            // Normal mode\n            if (old?.length && existingIndex !== old.length - 1) {\n              sortAction = 'replace'\n            } else if (existingSorting) {\n              sortAction = 'toggle'\n            } else {\n              sortAction = 'replace'\n            }\n          }\n\n          const sortDescFirst =\n            column.sortDescFirst ??\n            instance.options.sortDescFirst ??\n            column.getAutoSortDir() === 'desc'\n\n          // Handle toggle states that will remove the sorting\n          if (\n            sortAction === 'toggle' && // Must be toggling\n            (instance.options.enableSortingRemoval ?? true) && // If enableSortRemove, enable in general\n            !hasDescDefined && // Must not be setting desc\n            (multi ? instance.options.enableMultiRemove ?? true : true) && // If multi, don't allow if enableMultiRemove\n            (existingSorting?.desc // Finally, detect if it should indeed be removed\n              ? !sortDescFirst\n              : sortDescFirst)\n          ) {\n            sortAction = 'remove'\n          }\n\n          if (sortAction === 'replace') {\n            newSorting = [\n              {\n                id: column.id,\n                desc: hasDescDefined ? desc! : !!sortDescFirst,\n              },\n            ]\n          } else if (sortAction === 'add' && old?.length) {\n            newSorting = [\n              ...old,\n              {\n                id: column.id,\n                desc: hasDescDefined ? desc! : !!sortDescFirst,\n              },\n            ]\n            // Take latest n columns\n            newSorting.splice(\n              0,\n              newSorting.length -\n                (instance.options.maxMultiSortColCount ??\n                  Number.MAX_SAFE_INTEGER)\n            )\n          } else if (sortAction === 'toggle' && old?.length) {\n            // This flips (or sets) the\n            newSorting = old.map(d => {\n              if (d.id === column.id) {\n                return {\n                  ...d,\n                  desc: hasDescDefined ? desc! : !existingSorting?.desc,\n                }\n              }\n              return d\n            })\n          } else if (sortAction === 'remove' && old?.length) {\n            newSorting = old.filter(d => d.id !== column.id)\n          }\n\n          return newSorting\n        })\n      },\n\n      getCanSort: () => {\n        return (\n          (column.enableSorting ?? true) &&\n          (instance.options.enableSorting ?? true) &&\n          !!column.accessorFn\n        )\n      },\n\n      getCanMultiSort: () => {\n        return (\n          column.enableMultiSort ??\n          instance.options.enableMultiSort ??\n          !!column.accessorFn\n        )\n      },\n\n      getIsSorted: () => {\n        const columnSort = instance\n          .getState()\n          .sorting?.find(d => d.id === column.id)\n\n        return !columnSort ? false : columnSort.desc ? 'desc' : 'asc'\n      },\n\n      getSortIndex: () =>\n        instance.getState().sorting?.findIndex(d => d.id === column.id) ?? -1,\n\n      clearSorting: () => {\n        //clear sorting for just 1 column\n        instance.setSorting(old =>\n          old?.length ? old.filter(d => d.id !== column.id) : []\n        )\n      },\n\n      getToggleSortingHandler: () => {\n        const canSort = column.getCanSort()\n\n        return (e: unknown) => {\n          if (!canSort) return\n          ;(e as any).persist?.()\n          column.toggleSorting?.(\n            undefined,\n            column.getCanMultiSort()\n              ? instance.options.isMultiSortEvent?.(e)\n              : false\n          )\n        }\n      },\n    }\n  },\n\n  createInstance: <TGenerics extends TableGenerics>(\n    instance: TableInstance<TGenerics>\n  ): SortingInstance<TGenerics> => {\n    let registered = false\n\n    return {\n      setSorting: updater => instance.options.onSortingChange?.(updater),\n      resetSorting: defaultState => {\n        instance.setSorting(\n          defaultState ? [] : instance.initialState?.sorting ?? []\n        )\n      },\n      getPreSortedRowModel: () => instance.getFilteredRowModel(),\n      getSortedRowModel: () => {\n        if (\n          !instance._getSortedRowModel &&\n          instance.options.getSortedRowModel\n        ) {\n          instance._getSortedRowModel =\n            instance.options.getSortedRowModel(instance)\n        }\n\n        if (instance.options.manualSorting || !instance._getSortedRowModel) {\n          return instance.getPreSortedRowModel()\n        }\n\n        return instance._getSortedRowModel()\n      },\n    }\n  },\n}\n","import {\n  Cell,\n  Column,\n  OnChangeFn,\n  TableGenerics,\n  TableInstance,\n  Updater,\n  Row,\n  TableFeature,\n} from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type VisibilityOptions = {\n  onColumnVisibilityChange?: OnChangeFn<VisibilityState>\n  enableHiding?: boolean\n}\n\nexport type VisibilityDefaultOptions = {\n  onColumnVisibilityChange: OnChangeFn<VisibilityState>\n}\n\nexport type VisibilityState = Record<string, boolean>\n\nexport type VisibilityTableState = {\n  columnVisibility: VisibilityState\n}\n\nexport type VisibilityInstance<TGenerics extends TableGenerics> = {\n  getVisibleFlatColumns: () => Column<TGenerics>[]\n  getVisibleLeafColumns: () => Column<TGenerics>[]\n  getLeftVisibleLeafColumns: () => Column<TGenerics>[]\n  getRightVisibleLeafColumns: () => Column<TGenerics>[]\n  getCenterVisibleLeafColumns: () => Column<TGenerics>[]\n  setColumnVisibility: (updater: Updater<VisibilityState>) => void\n  resetColumnVisibility: (defaultState?: boolean) => void\n  toggleAllColumnsVisible: (value?: boolean) => void\n  getIsAllColumnsVisible: () => boolean\n  getIsSomeColumnsVisible: () => boolean\n  getToggleAllColumnsVisibilityHandler: () =>\n    | undefined\n    | ((event: unknown) => void)\n}\n\nexport type VisibilityColumnDef = {\n  enableHiding?: boolean\n  defaultIsVisible?: boolean\n}\n\nexport type VisibilityRow<TGenerics extends TableGenerics> = {\n  _getAllVisibleCells: () => Cell<TGenerics>[]\n  getVisibleCells: () => Cell<TGenerics>[]\n}\n\nexport type VisibilityColumn = {\n  getCanHide: () => boolean\n  getIsVisible: () => boolean\n  toggleVisibility: (value?: boolean) => void\n  getToggleVisibilityHandler: () => (event: unknown) => void\n}\n\n//\n\nexport const Visibility: TableFeature = {\n  getInitialState: (state): VisibilityTableState => {\n    return {\n      columnVisibility: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TGenerics extends TableGenerics>(\n    instance: TableInstance<TGenerics>\n  ): VisibilityDefaultOptions => {\n    return {\n      onColumnVisibilityChange: makeStateUpdater('columnVisibility', instance),\n    }\n  },\n\n  getDefaultColumn: () => {\n    return {\n      defaultIsVisible: true,\n    }\n  },\n\n  createColumn: <TGenerics extends TableGenerics>(\n    column: Column<TGenerics>,\n    instance: TableInstance<TGenerics>\n  ): VisibilityColumn => {\n    return {\n      toggleVisibility: value => {\n        if (column.getCanHide()) {\n          instance.setColumnVisibility(old => ({\n            ...old,\n            [column.id]: value ?? !column.getIsVisible(),\n          }))\n        }\n      },\n      getIsVisible: () => {\n        return instance.getState().columnVisibility?.[column.id] ?? true\n      },\n\n      getCanHide: () => {\n        return (\n          (column.enableHiding ?? true) &&\n          (instance.options.enableHiding ?? true)\n        )\n      },\n      getToggleVisibilityHandler: () => {\n        return (e: unknown) => {\n          column.toggleVisibility?.(\n            ((e as MouseEvent).target as HTMLInputElement).checked\n          )\n        }\n      },\n    }\n  },\n\n  createRow: <TGenerics extends TableGenerics>(\n    row: Row<TGenerics>,\n    instance: TableInstance<TGenerics>\n  ): VisibilityRow<TGenerics> => {\n    return {\n      _getAllVisibleCells: memo(\n        () => [\n          row\n            .getAllCells()\n            .filter(cell => cell.column.getIsVisible())\n            .map(d => d.id)\n            .join('_'),\n        ],\n        _ => {\n          return row.getAllCells().filter(cell => cell.column.getIsVisible())\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' && 'row._getAllVisibleCells',\n          debug: () => instance.options.debugAll ?? instance.options.debugRows,\n        }\n      ),\n      getVisibleCells: memo(\n        () => [\n          row.getLeftVisibleCells(),\n          row.getCenterVisibleCells(),\n          row.getRightVisibleCells(),\n        ],\n        (left, center, right) => [...left, ...center, ...right],\n        {\n          key: process.env.NODE_ENV === 'development' && 'row.getVisibleCells',\n          debug: () => instance.options.debugAll ?? instance.options.debugRows,\n        }\n      ),\n    }\n  },\n\n  createInstance: <TGenerics extends TableGenerics>(\n    instance: TableInstance<TGenerics>\n  ): VisibilityInstance<TGenerics> => {\n    const makeVisibleColumnsMethod = (\n      key: string,\n      getColumns: () => Column<TGenerics>[]\n    ): (() => Column<TGenerics>[]) => {\n      return memo(\n        () => [\n          getColumns(),\n          getColumns()\n            .filter(d => d.getIsVisible())\n            .map(d => d.id)\n            .join('_'),\n        ],\n        columns => {\n          return columns.filter(d => d.getIsVisible?.())\n        },\n        {\n          key,\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugColumns,\n        }\n      )\n    }\n\n    return {\n      getVisibleFlatColumns: makeVisibleColumnsMethod(\n        'getVisibleFlatColumns',\n        () => instance.getAllFlatColumns()\n      ),\n      getVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getVisibleLeafColumns',\n        () => instance.getAllLeafColumns()\n      ),\n      getLeftVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getLeftVisibleLeafColumns',\n        () => instance.getLeftLeafColumns()\n      ),\n      getRightVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getRightVisibleLeafColumns',\n        () => instance.getRightLeafColumns()\n      ),\n      getCenterVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getCenterVisibleLeafColumns',\n        () => instance.getCenterLeafColumns()\n      ),\n\n      setColumnVisibility: updater =>\n        instance.options.onColumnVisibilityChange?.(updater),\n\n      resetColumnVisibility: defaultState => {\n        instance.setColumnVisibility(\n          defaultState ? {} : instance.initialState.columnVisibility ?? {}\n        )\n      },\n\n      toggleAllColumnsVisible: value => {\n        value = value ?? !instance.getIsAllColumnsVisible()\n\n        instance.setColumnVisibility(\n          instance.getAllLeafColumns().reduce(\n            (obj, column) => ({\n              ...obj,\n              [column.id]: !value ? !column.getCanHide?.() : value,\n            }),\n            {}\n          )\n        )\n      },\n\n      getIsAllColumnsVisible: () =>\n        !instance.getAllLeafColumns().some(column => !column.getIsVisible?.()),\n\n      getIsSomeColumnsVisible: () =>\n        instance.getAllLeafColumns().some(column => column.getIsVisible?.()),\n\n      getToggleAllColumnsVisibilityHandler: () => {\n        return (e: unknown) => {\n          instance.toggleAllColumnsVisible(\n            ((e as MouseEvent).target as HTMLInputElement)?.checked\n          )\n        }\n      },\n    }\n  },\n}\n","import {\n  Column,\n  CoreHeader,\n  Header,\n  HeaderGroup,\n  TableGenerics,\n  TableInstance,\n} from '../types'\nimport { memo } from '../utils'\n\nexport type HeadersInstance<TGenerics extends TableGenerics> = {\n  createHeader: (\n    column: Column<TGenerics>,\n    options: {\n      id?: string\n      isPlaceholder?: boolean\n      placeholderId?: string\n      index: number\n      depth: number\n    }\n  ) => Header<TGenerics>\n  getHeaderGroups: () => HeaderGroup<TGenerics>[]\n  getLeftHeaderGroups: () => HeaderGroup<TGenerics>[]\n  getCenterHeaderGroups: () => HeaderGroup<TGenerics>[]\n  getRightHeaderGroups: () => HeaderGroup<TGenerics>[]\n\n  getFooterGroups: () => HeaderGroup<TGenerics>[]\n  getLeftFooterGroups: () => HeaderGroup<TGenerics>[]\n  getCenterFooterGroups: () => HeaderGroup<TGenerics>[]\n  getRightFooterGroups: () => HeaderGroup<TGenerics>[]\n\n  getFlatHeaders: () => Header<TGenerics>[]\n  getLeftFlatHeaders: () => Header<TGenerics>[]\n  getCenterFlatHeaders: () => Header<TGenerics>[]\n  getRightFlatHeaders: () => Header<TGenerics>[]\n\n  getLeafHeaders: () => Header<TGenerics>[]\n  getLeftLeafHeaders: () => Header<TGenerics>[]\n  getCenterLeafHeaders: () => Header<TGenerics>[]\n  getRightLeafHeaders: () => Header<TGenerics>[]\n\n  getHeader: (id: string) => Header<TGenerics>\n}\n\n//\n\nexport const Headers = {\n  createInstance: <TGenerics extends TableGenerics>(\n    instance: TableInstance<TGenerics>\n  ): HeadersInstance<TGenerics> => {\n    return {\n      createHeader: (\n        column: Column<TGenerics>,\n        options: {\n          id?: string\n          isPlaceholder?: boolean\n          placeholderId?: string\n          index: number\n          depth: number\n        }\n      ) => {\n        const id = options.id ?? column.id\n\n        let header: CoreHeader<TGenerics> = {\n          id,\n          column,\n          index: options.index,\n          isPlaceholder: options.isPlaceholder,\n          placeholderId: options.placeholderId,\n          depth: options.depth,\n          subHeaders: [],\n          colSpan: 0,\n          rowSpan: 0,\n          headerGroup: null!,\n          getLeafHeaders: (): Header<TGenerics>[] => {\n            const leafHeaders: CoreHeader<TGenerics>[] = []\n\n            const recurseHeader = (h: CoreHeader<TGenerics>) => {\n              if (h.subHeaders && h.subHeaders.length) {\n                h.subHeaders.map(recurseHeader)\n              }\n              leafHeaders.push(h)\n            }\n\n            recurseHeader(header)\n\n            return leafHeaders as Header<TGenerics>[]\n          },\n          renderHeader: () =>\n            column.header\n              ? instance._render(column.header, {\n                  instance,\n                  header: header as Header<TGenerics>,\n                  column,\n                })\n              : null,\n          renderFooter: () =>\n            column.footer\n              ? instance._render(column.footer, {\n                  instance,\n                  header: header as Header<TGenerics>,\n                  column,\n                })\n              : null,\n        }\n\n        instance._features.forEach(feature => {\n          Object.assign(header, feature.createHeader?.(header, instance))\n        })\n\n        return header as Header<TGenerics>\n      },\n\n      // Header Groups\n\n      getHeaderGroups: memo(\n        () => [\n          instance.getAllColumns(),\n          instance.getVisibleLeafColumns(),\n          instance.getState().columnPinning.left,\n          instance.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, left, right) => {\n          const leftColumns =\n            left\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          const rightColumns =\n            right\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          const centerColumns = leafColumns.filter(\n            column => !left?.includes(column.id) && !right?.includes(column.id)\n          )\n\n          const headerGroups = buildHeaderGroups(\n            allColumns,\n            [...leftColumns, ...centerColumns, ...rightColumns],\n            instance\n          )\n\n          return headerGroups\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getHeaderGroups',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getCenterHeaderGroups: memo(\n        () => [\n          instance.getAllColumns(),\n          instance.getVisibleLeafColumns(),\n          instance.getState().columnPinning.left,\n          instance.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, left, right) => {\n          leafColumns = leafColumns.filter(\n            column => !left?.includes(column.id) && !right?.includes(column.id)\n          )\n          return buildHeaderGroups(allColumns, leafColumns, instance, 'center')\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'development' && 'getCenterHeaderGroups',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getLeftHeaderGroups: memo(\n        () => [\n          instance.getAllColumns(),\n          instance.getVisibleLeafColumns(),\n          instance.getState().columnPinning.left,\n        ],\n        (allColumns, leafColumns, left) => {\n          const orderedLeafColumns =\n            left\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          return buildHeaderGroups(\n            allColumns,\n            orderedLeafColumns,\n            instance,\n            'left'\n          )\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftHeaderGroups',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getRightHeaderGroups: memo(\n        () => [\n          instance.getAllColumns(),\n          instance.getVisibleLeafColumns(),\n          instance.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, right) => {\n          const orderedLeafColumns =\n            right\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          return buildHeaderGroups(\n            allColumns,\n            orderedLeafColumns,\n            instance,\n            'right'\n          )\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightHeaderGroups',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      // Footer Groups\n\n      getFooterGroups: memo(\n        () => [instance.getHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getFooterGroups',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getLeftFooterGroups: memo(\n        () => [instance.getLeftHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftFooterGroups',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getCenterFooterGroups: memo(\n        () => [instance.getCenterHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'development' && 'getCenterFooterGroups',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getRightFooterGroups: memo(\n        () => [instance.getRightHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightFooterGroups',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      // Flat Headers\n\n      getFlatHeaders: memo(\n        () => [instance.getHeaderGroups()],\n        headerGroups => {\n          return headerGroups\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getFlatHeaders',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getLeftFlatHeaders: memo(\n        () => [instance.getLeftHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftFlatHeaders',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getCenterFlatHeaders: memo(\n        () => [instance.getCenterHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterFlatHeaders',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getRightFlatHeaders: memo(\n        () => [instance.getRightHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightFlatHeaders',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      // Leaf Headers\n\n      getCenterLeafHeaders: memo(\n        () => [instance.getCenterFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterLeafHeaders',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getLeftLeafHeaders: memo(\n        () => [instance.getLeftFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftLeafHeaders',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getRightLeafHeaders: memo(\n        () => [instance.getRightFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightLeafHeaders',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getLeafHeaders: memo(\n        () => [\n          instance.getLeftHeaderGroups(),\n          instance.getCenterHeaderGroups(),\n          instance.getRightHeaderGroups(),\n        ],\n        (left, center, right) => {\n          return [\n            ...(left[0]?.headers ?? []),\n            ...(center[0]?.headers ?? []),\n            ...(right[0]?.headers ?? []),\n          ]\n            .map(header => {\n              return header.getLeafHeaders()\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeafHeaders',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getHeader: (id: string) => {\n        const header = [\n          ...instance.getFlatHeaders(),\n          ...instance.getCenterFlatHeaders(),\n          ...instance.getLeftFlatHeaders(),\n          ...instance.getRightFlatHeaders(),\n        ].find(d => d.id === id)\n\n        if (!header) {\n          if (process.env.NODE_ENV !== 'production') {\n            console.warn(`Could not find header with id: ${id}`)\n          }\n          throw new Error()\n        }\n\n        return header\n      },\n    }\n  },\n}\n\nexport function buildHeaderGroups<TGenerics extends TableGenerics>(\n  allColumns: Column<TGenerics>[],\n  columnsToGroup: Column<TGenerics>[],\n  instance: TableInstance<TGenerics>,\n  headerFamily?: 'center' | 'left' | 'right'\n) {\n  // Find the max depth of the columns:\n  // build the leaf column row\n  // build each buffer row going up\n  //    placeholder for non-existent level\n  //    real column for existing level\n\n  let maxDepth = 0\n\n  const findMaxDepth = (columns: Column<TGenerics>[], depth = 1) => {\n    maxDepth = Math.max(maxDepth, depth)\n\n    columns\n      .filter(column => column.getIsVisible())\n      .forEach(column => {\n        if (column.columns?.length) {\n          findMaxDepth(column.columns, depth + 1)\n        }\n      }, 0)\n  }\n\n  findMaxDepth(allColumns)\n\n  let headerGroups: HeaderGroup<TGenerics>[] = []\n\n  const createHeaderGroup = (\n    headersToGroup: Header<TGenerics>[],\n    depth: number\n  ) => {\n    // The header group we are creating\n    const headerGroup: HeaderGroup<TGenerics> = {\n      depth,\n      id: [headerFamily, `${depth}`].filter(Boolean).join('_'),\n      headers: [],\n    }\n\n    // The parent columns we're going to scan next\n    const pendingParentHeaders: Header<TGenerics>[] = []\n\n    // Scan each column for parents\n    headersToGroup.forEach(headerToGroup => {\n      // What is the latest (last) parent column?\n\n      const latestPendingParentHeader = [...pendingParentHeaders].reverse()[0]\n\n      const isLeafHeader = headerToGroup.column.depth === headerGroup.depth\n\n      let column: Column<TGenerics>\n      let isPlaceholder = false\n\n      if (isLeafHeader && headerToGroup.column.parent) {\n        // The parent header is new\n        column = headerToGroup.column.parent\n      } else {\n        // The parent header is repeated\n        column = headerToGroup.column\n        isPlaceholder = true\n      }\n\n      if (latestPendingParentHeader?.column === column) {\n        // This column is repeated. Add it as a sub header to the next batch\n        latestPendingParentHeader.subHeaders.push(headerToGroup)\n      } else {\n        // This is a new header. Let's create it\n        const header = instance.createHeader(column, {\n          id: [headerFamily, depth, column.id, headerToGroup?.id]\n            .filter(Boolean)\n            .join('_'),\n          isPlaceholder,\n          placeholderId: isPlaceholder\n            ? `${pendingParentHeaders.filter(d => d.column === column).length}`\n            : undefined,\n          depth,\n          index: pendingParentHeaders.length,\n        })\n\n        // Add the headerToGroup as a subHeader of the new header\n        header.subHeaders.push(headerToGroup)\n        // Add the new header to the pendingParentHeaders to get grouped\n        // in the next batch\n        pendingParentHeaders.push(header)\n      }\n\n      headerGroup.headers.push(headerToGroup)\n      headerToGroup.headerGroup = headerGroup\n    })\n\n    headerGroups.push(headerGroup)\n\n    if (depth > 0) {\n      createHeaderGroup(pendingParentHeaders, depth - 1)\n    }\n  }\n\n  const bottomHeaders = columnsToGroup.map((column, index) =>\n    instance.createHeader(column, {\n      depth: maxDepth,\n      index,\n    })\n  )\n\n  createHeaderGroup(bottomHeaders, maxDepth - 1)\n\n  headerGroups.reverse()\n\n  // headerGroups = headerGroups.filter(headerGroup => {\n  //   return !headerGroup.headers.every(header => header.isPlaceholder)\n  // })\n\n  const recurseHeadersForSpans = (headers: Header<TGenerics>[]) => {\n    const filteredHeaders = headers.filter(header =>\n      header.column.getIsVisible()\n    )\n\n    return filteredHeaders.map(header => {\n      let colSpan = 0\n      let rowSpan = 0\n      let childRowSpans = [0]\n\n      if (header.subHeaders && header.subHeaders.length) {\n        childRowSpans = []\n\n        recurseHeadersForSpans(header.subHeaders).forEach(\n          ({ colSpan: childColSpan, rowSpan: childRowSpan }) => {\n            colSpan += childColSpan\n            childRowSpans.push(childRowSpan)\n          }\n        )\n      } else {\n        colSpan = 1\n      }\n\n      const minChildRowSpan = Math.min(...childRowSpans)\n      rowSpan = rowSpan + minChildRowSpan\n\n      header.colSpan = colSpan > 0 ? colSpan : undefined\n      header.rowSpan = rowSpan > 0 ? rowSpan : undefined\n\n      return { colSpan, rowSpan }\n    })\n  }\n\n  recurseHeadersForSpans(headerGroups[0]?.headers ?? [])\n\n  return headerGroups\n}\n","import { functionalUpdate, RequiredKeys } from './utils'\n\nimport {\n  Updater,\n  TableOptions,\n  TableState,\n  TableInstance,\n  Renderable,\n  TableFeature,\n  TableGenerics,\n  InitialTableState,\n} from './types'\n\nimport { Columns } from './features/Columns'\nimport { Rows } from './features/Rows'\nimport { Cells } from './features/Cells'\nimport { ColumnSizing } from './features/ColumnSizing'\nimport { Expanding } from './features/Expanding'\nimport { Filters } from './features/Filters'\nimport { Grouping } from './features/Grouping'\nimport { Ordering } from './features/Ordering'\nimport { Pagination } from './features/Pagination'\nimport { Pinning } from './features/Pinning'\nimport { RowSelection } from './features/RowSelection'\nimport { Sorting } from './features/Sorting'\nimport { Visibility } from './features/Visibility'\nimport { Headers } from './features/Headers'\n//\n\nexport type CoreTableState = {\n  // coreProgress: number\n}\n\nexport type CoreOptions<TGenerics extends TableGenerics> = {\n  data: TGenerics['Row'][]\n  state: Partial<TableState>\n  onStateChange: (updater: Updater<TableState>) => void\n  render: TGenerics['Renderer']\n  debugAll?: boolean\n  debugTable?: boolean\n  debugHeaders?: boolean\n  debugColumns?: boolean\n  debugRows?: boolean\n  initialState?: InitialTableState\n  autoResetAll?: boolean\n  mergeOptions?: <T>(defaultOptions: T, options: Partial<T>) => T\n  meta?: TGenerics['TableMeta']\n  // keepPreviousData?: boolean\n}\n\nexport type CoreInstance<TGenerics extends TableGenerics> = {\n  // generics: TGenerics\n  initialState: TableState\n  reset: () => void\n  options: RequiredKeys<TableOptions<TGenerics>, 'state'>\n  setOptions: (newOptions: Updater<TableOptions<TGenerics>>) => void\n  getState: () => TableState\n  setState: (updater: Updater<TableState>) => void\n  _queue: (cb: () => void) => void\n  _render: <TProps>(\n    template: Renderable<TGenerics, TProps>,\n    props: TProps\n  ) => string | null | TGenerics['Rendered']\n  _features: readonly TableFeature[]\n  // getOverallProgress: () => number\n  // getProgressStage: () =>\n  //   | undefined\n  //   | 'coreRowModel'\n  //   | 'filteredRowModel'\n  //   | 'facetedRowModel'\n  // createBatch: (priority: keyof CoreBatches) => Batch\n  // init: () => void\n  // willUpdate: () => void\n  // destroy: () => void\n  // batches: CoreBatches\n}\n\n// export type Batch = {\n//   id: number\n//   priority: keyof CoreBatches\n//   tasks: (() => void)[]\n//   schedule: (cb: () => void) => void\n//   cancel: () => void\n// }\n\n// type CoreBatches = {\n//   data: Batch[]\n//   facets: Batch[]\n// }\n\nexport function createTableInstance<TGenerics extends TableGenerics>(\n  options: TableOptions<TGenerics>\n): TableInstance<TGenerics> {\n  if (options.debugAll || options.debugTable) {\n    console.info('Creating Table Instance...')\n  }\n\n  let instance = {\n    _features: [\n      Columns,\n      Rows,\n      Cells,\n      Headers,\n      Visibility,\n      Ordering,\n      Pinning,\n      Filters,\n      Sorting,\n      Grouping,\n      Expanding,\n      Pagination,\n      RowSelection,\n      ColumnSizing,\n    ] as const,\n  } as unknown as CoreInstance<TGenerics>\n\n  const defaultOptions = instance._features.reduce((obj, feature) => {\n    return Object.assign(obj, feature.getDefaultOptions?.(instance))\n  }, {}) as TableOptions<TGenerics>\n\n  const mergeOptions = (options: TableOptions<TGenerics>) => {\n    if (instance.options.mergeOptions) {\n      return instance.options.mergeOptions(defaultOptions, options)\n    }\n\n    return {\n      ...defaultOptions,\n      ...options,\n    }\n  }\n\n  const coreInitialState: CoreTableState = {\n    // coreProgress: 1,\n  }\n\n  let initialState = {\n    ...coreInitialState,\n    ...(options.initialState ?? {}),\n  } as TableState\n\n  instance._features.forEach(feature => {\n    initialState = feature.getInitialState?.(initialState) ?? initialState\n  })\n\n  const queued: (() => void)[] = []\n  let queuedTimeout = false\n\n  const midInstance: CoreInstance<TGenerics> = {\n    ...instance,\n    // init: () => {\n    //   startWork()\n    // },\n    // willUpdate: () => {\n    //   startWork()\n    // },\n    // destroy: () => {\n    //   stopWork()\n    // },\n    options: {\n      ...defaultOptions,\n      ...options,\n    },\n    initialState,\n    _queue: cb => {\n      queued.push(cb)\n\n      if (!queuedTimeout) {\n        queuedTimeout = true\n\n        // Schedule a microtask to run the queued callbacks after\n        // the current call stack (render, etc) has finished.\n        Promise.resolve()\n          .then(() => {\n            while (queued.length) {\n              queued.shift()!()\n            }\n            queuedTimeout = false\n          })\n          .catch(error =>\n            setTimeout(() => {\n              throw error\n            })\n          )\n      }\n    },\n    reset: () => {\n      instance.setState(instance.initialState)\n    },\n    setOptions: updater => {\n      const newOptions = functionalUpdate(updater, instance.options)\n      instance.options = mergeOptions(newOptions)\n    },\n    _render: (template, props) => {\n      if (typeof instance.options.render === 'function') {\n        return instance.options.render(template, props)\n      }\n\n      if (typeof template === 'function') {\n        return (template as Function)(props)\n      }\n\n      return template\n    },\n\n    getState: () => {\n      return instance.options.state as TableState\n    },\n\n    setState: (updater: Updater<TableState>) => {\n      instance.options.onStateChange?.(updater)\n    },\n\n    // getOverallProgress: () => {\n    //   const { coreProgress, filtersProgress, facetProgress } =\n    //     instance.getState()\n\n    //   return mean(() =>\n    //     [coreProgress, filtersProgress].filter(d => d < 1)\n    //   ) as number\n    // },\n    // getProgressStage: () => {\n    //   const { coreProgress, filtersProgress, facetProgress } =\n    //     instance.getState()\n\n    //   if (coreProgress < 1) {\n    //     return 'coreRowModel'\n    //   }\n\n    //   if (filtersProgress < 1) {\n    //     return 'filteredRowModel'\n    //   }\n\n    //   if (Object.values(facetProgress).some(d => d < 1)) {\n    //     return 'facetedRowModel'\n    //   }\n    // },\n  }\n\n  instance = Object.assign(instance, midInstance)\n\n  instance._features.forEach(feature => {\n    return Object.assign(instance, feature.createInstance?.(instance))\n  })\n\n  return instance as TableInstance<TGenerics>\n}\n","import { CustomFilterFns, FilterFn } from './features/Filters'\nimport { AggregationFn, CustomAggregationFns } from './features/Grouping'\nimport { CustomSortingFns, SortingFn } from './features/Sorting'\nimport {\n  ColumnDef,\n  AccessorFn,\n  AnyRender,\n  TableGenerics,\n  TableOptions,\n} from './types'\nimport { IfDefined, Overwrite } from './utils'\n\nexport type TableFactory<TGenerics extends TableGenerics> =\n  () => Table<TGenerics>\n\nexport type CreateTableOptions<\n  TRender extends AnyRender,\n  TFilterFns extends CustomFilterFns<any>,\n  TSortingFns extends CustomSortingFns<any>,\n  TAggregationFns extends CustomAggregationFns<any>,\n  TGenerics extends TableGenerics\n> = Partial<\n  {\n    render?: TRender\n    filterFns?: TFilterFns\n    sortingFns?: TSortingFns\n    aggregationFns?: TAggregationFns\n  } & Omit<\n    TableOptions<TGenerics>,\n    'filterFns' | 'sortingFns' | 'aggregationFns'\n  >\n>\n\nexport type Table<TGenerics extends TableGenerics> = {\n  generics: TGenerics\n  options: Partial<TableOptions<TGenerics>>\n  setGenerics: <T extends TableGenerics>() => Table<T>\n  setRowType: <TRow>() => Table<Overwrite<TGenerics, { Row: TRow }>>\n  setTableMetaType: <TTableMeta>() => Table<\n    Overwrite<TGenerics, { TableMeta: TTableMeta }>\n  >\n  setColumnMetaType: <TColumnMeta>() => Table<\n    Overwrite<TGenerics, { ColumnMeta: TColumnMeta }>\n  >\n  setFilterMetaType: <TFilterMeta>() => Table<\n    Overwrite<TGenerics, { FilterMeta: TFilterMeta }>\n  >\n  setOptions: <\n    TFilterFns extends Record<string, FilterFn<TGenerics>>,\n    TSortingFns extends Record<string, SortingFn<TGenerics>>,\n    TAggregationFns extends Record<string, AggregationFn<TGenerics>>\n  >(\n    options: CreateTableOptions<\n      any,\n      TFilterFns,\n      TSortingFns,\n      TAggregationFns,\n      TGenerics\n    >\n  ) => Table<\n    Overwrite<\n      TGenerics,\n      {\n        FilterFns: IfDefined<TFilterFns, TGenerics['FilterFns']>\n        SortingFns: IfDefined<TSortingFns, TGenerics['SortingFns']>\n        AggregationFns: IfDefined<TAggregationFns, TGenerics['AggregationFns']>\n      }\n    >\n  >\n  createGroup: (\n    column: Overwrite<\n      | Overwrite<\n          ColumnDef<any>,\n          {\n            header: string\n            id?: string\n          }\n        >\n      | Overwrite<\n          ColumnDef<any>,\n          {\n            id: string\n            header?: string | ((...any: any) => any)\n          }\n        >,\n      {\n        accessorFn?: never\n        accessorKey?: never\n        columns?: ColumnDef<any>[]\n      }\n    >\n  ) => ColumnDef<TGenerics>\n  createDisplayColumn: (\n    column: Omit<ColumnDef<TGenerics>, 'columns'>\n  ) => ColumnDef<TGenerics>\n  createDataColumn: <\n    TAccessor extends AccessorFn<TGenerics['Row']> | keyof TGenerics['Row']\n  >(\n    accessor: TAccessor,\n    column: Overwrite<\n      TAccessor extends (...args: any[]) => any\n        ? // Accessor Fn\n          ColumnDef<Overwrite<TGenerics, { Value: ReturnType<TAccessor> }>>\n        : TAccessor extends keyof TGenerics['Row']\n        ? // Accessor Key\n          Overwrite<\n            ColumnDef<\n              Overwrite<TGenerics, { Value: TGenerics['Row'][TAccessor] }>\n            >,\n            {\n              id?: string\n            }\n          >\n        : never,\n      {\n        accessorFn?: never\n        accessorKey?: never\n        columns?: ColumnDef<any>[]\n      }\n    >\n  ) => ColumnDef<TGenerics>\n}\n\n//\n\nexport function createTableFactory<TRenderer extends AnyRender>(opts: {\n  render: TRenderer\n}): () => Table<{ Renderer: TRenderer; Rendered: ReturnType<TRenderer> }> {\n  return () => createTable(undefined, undefined, opts)\n}\n\n// A lot of returns in here are `as any` for a reason. Unless you\n// can find a better way to do this, then don't worry about them\nfunction createTable<TGenerics extends TableGenerics>(\n  _?: undefined,\n  __?: undefined,\n  options?: CreateTableOptions<any, any, any, any, TGenerics>\n): Table<TGenerics> {\n  const table: Table<TGenerics> = {\n    generics: undefined!,\n    options: options ?? {\n      render: (() => {\n        throw new Error('')\n      })(),\n    },\n    setGenerics: () => table as any,\n    setRowType: () => table as any,\n    setTableMetaType: () => table as any,\n    setColumnMetaType: () => table as any,\n    setFilterMetaType: () => table as any,\n    setOptions: newOptions =>\n      createTable(_, __, {\n        ...options,\n        ...newOptions,\n      } as any),\n    createDisplayColumn: column => ({ ...column, columnDefType: 'display' }),\n    createGroup: column => ({ ...column, columnDefType: 'group' } as any),\n    createDataColumn: (accessor, column): any => {\n      column = {\n        ...column,\n        columnDefType: 'data',\n        id: column.id,\n      }\n\n      if (typeof accessor === 'string') {\n        return {\n          ...column,\n          id: column.id ?? accessor,\n          accessorKey: accessor,\n        }\n      }\n\n      if (typeof accessor === 'function') {\n        return {\n          ...column,\n          accessorFn: accessor,\n        }\n      }\n\n      throw new Error('Invalid accessor')\n    },\n  }\n\n  return table\n}\n","import { TableInstance, Row, RowModel, TableGenerics } from '../types'\nimport { memo } from '../utils'\n\nexport function getCoreRowModel<TGenerics extends TableGenerics>(): (\n  instance: TableInstance<TGenerics>\n) => () => RowModel<TGenerics> {\n  return instance =>\n    memo(\n      () => [instance.options.data],\n      (\n        data\n      ): {\n        rows: Row<TGenerics>[]\n        flatRows: Row<TGenerics>[]\n        rowsById: Record<string, Row<TGenerics>>\n      } => {\n        const rowModel: RowModel<TGenerics> = {\n          rows: [],\n          flatRows: [],\n          rowsById: {},\n        }\n\n        let rows\n        let row\n        let originalRow\n\n        const accessRows = (\n          originalRows: TGenerics['Row'][],\n          depth = 0,\n          parent?: Row<TGenerics>\n        ): Row<TGenerics>[] => {\n          rows = []\n\n          for (let i = 0; i < originalRows.length; i++) {\n            originalRow = originalRows[i]\n\n            // This could be an expensive check at scale, so we should move it somewhere else, but where?\n            // if (!id) {\n            //   if (process.env.NODE_ENV !== 'production') {\n            //     throw new Error(`getRowId expected an ID, but got ${id}`)\n            //   }\n            // }\n\n            // Make the row\n            row = instance.createRow(\n              instance.getRowId(originalRow, i, parent),\n              originalRow,\n              i,\n              depth\n            )\n\n            // Keep track of every row in a flat array\n            rowModel.flatRows.push(row)\n            // Also keep track of every row by its ID\n            rowModel.rowsById[row.id] = row\n            // Push instance row into parent\n            rows.push(row)\n\n            // Get the original subrows\n            if (instance.options.getSubRows) {\n              row.originalSubRows = instance.options.getSubRows(originalRow, i)\n\n              // Then recursively access them\n              if (row.originalSubRows?.length) {\n                row.subRows = accessRows(row.originalSubRows, depth + 1, row)\n              }\n            }\n          }\n\n          return rows\n        }\n\n        rowModel.rows = accessRows(data)\n\n        return rowModel\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getRowModel',\n        debug: () => instance.options.debugAll ?? instance.options.debugTable,\n        onChange: () => {\n          instance._autoResetPageIndex()\n        },\n      }\n    )\n}\n","import { TableGenerics, Row, RowModel, TableInstance } from '../types'\n\nexport function filterRows<TGenerics extends TableGenerics>(\n  rows: Row<TGenerics>[],\n  filterRowImpl: (row: Row<TGenerics>) => any,\n  instance: TableInstance<TGenerics>\n) {\n  if (instance.options.filterFromLeafRows) {\n    return filterRowModelFromLeafs(rows, filterRowImpl, instance)\n  }\n\n  return filterRowModelFromRoot(rows, filterRowImpl, instance)\n}\n\nexport function filterRowModelFromLeafs<TGenerics extends TableGenerics>(\n  rowsToFilter: Row<TGenerics>[],\n  filterRow: (row: Row<TGenerics>) => Row<TGenerics>[],\n  instance: TableInstance<TGenerics>\n): RowModel<TGenerics> {\n  const newFilteredFlatRows: Row<TGenerics>[] = []\n  const newFilteredRowsById: Record<string, Row<TGenerics>> = {}\n\n  let row\n  let newRow\n\n  const recurseFilterRows = (rowsToFilter: Row<TGenerics>[], depth = 0) => {\n    const rows: Row<TGenerics>[] = []\n\n    // Filter from children up first\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      row = rowsToFilter[i]!\n\n      if (row.subRows?.length) {\n        newRow = instance.createRow(row.id, row.original, row.index, row.depth)\n        newRow.columnFilters = row.columnFilters\n        newRow.subRows = recurseFilterRows(row.subRows, depth + 1)\n        if (!newRow.subRows.length) {\n          continue\n        }\n        row = newRow\n      }\n\n      if (filterRow(row)) {\n        rows.push(row)\n        newFilteredRowsById[row.id] = row\n        newFilteredRowsById[i] = row\n      }\n    }\n\n    return rows\n  }\n\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById,\n  }\n}\n\nexport function filterRowModelFromRoot<TGenerics extends TableGenerics>(\n  rowsToFilter: Row<TGenerics>[],\n  filterRow: (row: Row<TGenerics>) => any,\n  instance: TableInstance<TGenerics>\n): RowModel<TGenerics> {\n  const newFilteredFlatRows: Row<TGenerics>[] = []\n  const newFilteredRowsById: Record<string, Row<TGenerics>> = {}\n\n  let rows\n  let row\n  let newRow\n\n  // Filters top level and nested rows\n  const recurseFilterRows = (rowsToFilter: Row<TGenerics>[], depth = 0) => {\n    // Filter from parents downward first\n\n    rows = []\n\n    // Apply the filter to any subRows\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      row = rowsToFilter[i]!\n\n      const pass = filterRow(row)\n\n      if (pass) {\n        if (row.subRows?.length) {\n          newRow = instance.createRow(\n            row.id,\n            row.original,\n            row.index,\n            row.depth\n          )\n          newRow.subRows = recurseFilterRows(row.subRows, depth + 1)\n          row = newRow\n        }\n\n        rows.push(row)\n        newFilteredFlatRows.push(row)\n        newFilteredRowsById[row.id] = row\n      }\n    }\n\n    return rows\n  }\n\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById,\n  }\n}\n","import { ResolvedColumnFilter } from '../features/Filters'\nimport { TableInstance, RowModel, TableGenerics, Row } from '../types'\nimport { memo } from '../utils'\nimport { filterRows } from './filterRowsUtils'\n\nexport function getFilteredRowModel<TGenerics extends TableGenerics>(): (\n  instance: TableInstance<TGenerics>\n) => () => RowModel<TGenerics> {\n  return instance =>\n    memo(\n      () => [\n        instance.getPreFilteredRowModel(),\n        instance.getState().columnFilters,\n        instance.getState().globalFilter,\n      ],\n      (rowModel, columnFilters, globalFilter) => {\n        if (\n          !rowModel.rows.length ||\n          (!columnFilters?.length && !globalFilter)\n        ) {\n          for (let i = 0; i < rowModel.flatRows.length; i++) {\n            rowModel.flatRows[i]!.columnFilters = {}\n            rowModel.flatRows[i]!.columnFiltersMeta = {}\n          }\n          return rowModel\n        }\n\n        const resolvedColumnFilters: ResolvedColumnFilter<TGenerics>[] = []\n        const resolvedGlobalFilters: ResolvedColumnFilter<TGenerics>[] = []\n\n        ;(columnFilters ?? []).forEach(d => {\n          const column = instance.getColumn(d.id)\n\n          if (!column) {\n            if (process.env.NODE_ENV !== 'production') {\n              console.warn(\n                `Table: Could not find a column to filter with columnId: ${d.id}`\n              )\n            }\n          }\n\n          const filterFn = column.getFilterFn()\n\n          if (!filterFn) {\n            if (process.env.NODE_ENV !== 'production') {\n              console.warn(\n                `Could not find a valid 'column.filterFn' for column with the ID: ${column.id}.`\n              )\n            }\n            return\n          }\n\n          resolvedColumnFilters.push({\n            id: d.id,\n            filterFn,\n            resolvedValue: filterFn.resolveFilterValue?.(d.value) ?? d.value,\n          })\n        })\n\n        const filterableIds = columnFilters.map(d => d.id)\n\n        const globalFilterFn = instance.getGlobalFilterFn()\n\n        const globallyFilterableColumns = instance\n          .getAllLeafColumns()\n          .filter(column => column.getCanGlobalFilter())\n\n        if (\n          globalFilter &&\n          globalFilterFn &&\n          globallyFilterableColumns.length\n        ) {\n          filterableIds.push('__global__')\n\n          globallyFilterableColumns.forEach(column => {\n            resolvedGlobalFilters.push({\n              id: column.id,\n              filterFn: globalFilterFn,\n              resolvedValue:\n                globalFilterFn.resolveFilterValue?.(globalFilter) ??\n                globalFilter,\n            })\n          })\n        }\n\n        let currentColumnFilter\n        let currentGlobalFilter\n\n        // Flag the prefiltered row model with each filter state\n        for (let j = 0; j < rowModel.flatRows.length; j++) {\n          const row = rowModel.flatRows[j]!\n\n          row.columnFilters = {}\n\n          if (resolvedColumnFilters.length) {\n            for (let i = 0; i < resolvedColumnFilters.length; i++) {\n              currentColumnFilter = resolvedColumnFilters[i]!\n              const id = currentColumnFilter.id\n\n              // Tag the row with the column filter state\n              row.columnFilters[id] = currentColumnFilter.filterFn(\n                row,\n                id,\n                currentColumnFilter.resolvedValue,\n                filterMeta => {\n                  row.columnFiltersMeta[id] = filterMeta\n                }\n              )\n            }\n          }\n\n          if (resolvedGlobalFilters.length) {\n            for (let i = 0; i < resolvedGlobalFilters.length; i++) {\n              currentGlobalFilter = resolvedGlobalFilters[i]!\n              const id = currentGlobalFilter.id\n              // Tag the row with the first truthy global filter state\n              if (\n                currentGlobalFilter.filterFn(\n                  row,\n                  id,\n                  currentGlobalFilter.resolvedValue,\n                  filterMeta => {\n                    row.columnFiltersMeta[id] = filterMeta\n                  }\n                )\n              ) {\n                row.columnFilters.__global__ = true\n                break\n              }\n            }\n\n            if (row.columnFilters.__global__ !== true) {\n              row.columnFilters.__global__ = false\n            }\n          }\n        }\n\n        const filterRowsImpl = (row: Row<TGenerics>) => {\n          // Horizontally filter rows through each column\n          for (let i = 0; i < filterableIds.length; i++) {\n            if (row.columnFilters[filterableIds[i]!] === false) {\n              return false\n            }\n          }\n          return true\n        }\n\n        // Filter final rows using all of the active filters\n        return filterRows(rowModel.rows, filterRowsImpl, instance)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getFilteredRowModel',\n        debug: () => instance.options.debugAll ?? instance.options.debugTable,\n        onChange: () => {\n          instance._autoResetPageIndex()\n        },\n      }\n    )\n}\n","import { TableInstance, RowModel, TableGenerics, Row } from '../types'\nimport { memo } from '../utils'\nimport { filterRows } from './filterRowsUtils'\n\nexport function getFacetedRowModel<TGenerics extends TableGenerics>(): (\n  instance: TableInstance<TGenerics>,\n  columnId: string\n) => () => RowModel<TGenerics> {\n  return (instance, columnId) =>\n    memo(\n      () => [\n        instance.getPreFilteredRowModel(),\n        instance.getState().columnFilters,\n        instance.getState().globalFilter,\n        instance.getFilteredRowModel(),\n      ],\n      (preRowModel, columnFilters, globalFilter) => {\n        if (\n          !preRowModel.rows.length ||\n          (!columnFilters?.length && !globalFilter)\n        ) {\n          return preRowModel\n        }\n\n        const filterableIds = [\n          ...columnFilters.map(d => d.id).filter(d => d !== columnId),\n          globalFilter ? '__global__' : undefined,\n        ].filter(Boolean) as string[]\n\n        const filterRowsImpl = (row: Row<TGenerics>) => {\n          // Horizontally filter rows through each column\n          for (let i = 0; i < filterableIds.length; i++) {\n            if (row.columnFilters[filterableIds[i]!] === false) {\n              return false\n            }\n          }\n          return true\n        }\n\n        return filterRows(preRowModel.rows, filterRowsImpl, instance)\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedRowModel_' + columnId,\n        debug: () => instance.options.debugAll ?? instance.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n","import { TableInstance, TableGenerics } from '../types'\nimport { memo } from '../utils'\n\nexport function getFacetedUniqueValues<TGenerics extends TableGenerics>(): (\n  instance: TableInstance<TGenerics>,\n  columnId: string\n) => () => Map<any, number> {\n  return (instance, columnId) =>\n    memo(\n      () => [instance.getColumn(columnId).getFacetedRowModel()],\n      facetedRowModel => {\n        let facetedUniqueValues = new Map<any, number>()\n\n        for (let i = 0; i < facetedRowModel.flatRows.length; i++) {\n          const value = facetedRowModel.flatRows[i]?.getValue(columnId)\n\n          if (facetedUniqueValues.has(value)) {\n            facetedUniqueValues.set(\n              value,\n              (facetedUniqueValues.get(value) ?? 0) + 1\n            )\n          } else {\n            facetedUniqueValues.set(value, 1)\n          }\n        }\n\n        return facetedUniqueValues\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedUniqueValues_' + columnId,\n        debug: () => instance.options.debugAll ?? instance.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n","import { TableInstance, TableGenerics } from '../types'\nimport { memo } from '../utils'\n\nexport function getFacetedMinMaxValues<TGenerics extends TableGenerics>(): (\n  instance: TableInstance<TGenerics>,\n  columnId: string\n) => () => undefined | [number, number] {\n  return (instance, columnId) =>\n    memo(\n      () => [instance.getColumn(columnId).getFacetedRowModel()],\n      facetedRowModel => {\n        const firstValue = facetedRowModel.flatRows[0]?.getValue(columnId)\n\n        if (typeof firstValue === 'undefined') {\n          return undefined\n        }\n\n        let facetedMinMaxValues: [any, any] = [firstValue, firstValue]\n\n        for (let i = 0; i < facetedRowModel.flatRows.length; i++) {\n          const value = facetedRowModel.flatRows[i]?.getValue(columnId)\n\n          if (value < facetedMinMaxValues[0]) {\n            facetedMinMaxValues[0] = value\n          } else if (value > facetedMinMaxValues[1]) {\n            facetedMinMaxValues[1] = value\n          }\n        }\n\n        return facetedMinMaxValues\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedMinMaxValues_' + columnId,\n        debug: () => instance.options.debugAll ?? instance.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n","import { TableInstance, Row, RowModel, TableGenerics } from '../types'\nimport { SortingFn } from '../features/Sorting'\nimport { memo } from '../utils'\n\nexport function getSortedRowModel<TGenerics extends TableGenerics>(): (\n  instance: TableInstance<TGenerics>\n) => () => RowModel<TGenerics> {\n  return instance =>\n    memo(\n      () => [instance.getState().sorting, instance.getPreSortedRowModel()],\n      (sorting, rowModel) => {\n        if (!rowModel.rows.length || !sorting?.length) {\n          return rowModel\n        }\n\n        const sortingState = instance.getState().sorting\n\n        const sortedFlatRows: Row<TGenerics>[] = []\n\n        // Filter out sortings that correspond to non existing columns\n        const availableSorting = sortingState.filter(sort =>\n          instance.getColumn(sort.id).getCanSort()\n        )\n\n        const columnInfoById: Record<\n          string,\n          {\n            sortUndefined?: false | -1 | 1\n            invertSorting?: boolean\n            sortingFn: SortingFn<TGenerics>\n          }\n        > = {}\n\n        availableSorting.forEach(sortEntry => {\n          const column = instance.getColumn(sortEntry.id)\n\n          columnInfoById[sortEntry.id] = {\n            sortUndefined: column.sortUndefined,\n            invertSorting: column.invertSorting,\n            sortingFn: column.getSortingFn(),\n          }\n        })\n\n        const sortData = (rows: Row<TGenerics>[]) => {\n          // This will also perform a stable sorting using the row index\n          // if needed.\n          const sortedData = rows.slice()\n\n          sortedData.sort((rowA, rowB) => {\n            for (let i = 0; i < availableSorting.length; i += 1) {\n              const sortEntry = availableSorting[i]!\n              const columnInfo = columnInfoById[sortEntry.id]!\n              const isDesc = sortEntry?.desc ?? false\n\n              if (columnInfo.sortUndefined) {\n                const aValue = rowA.getValue(sortEntry.id)\n                const bValue = rowB.getValue(sortEntry.id)\n\n                const aUndefined = typeof aValue === 'undefined'\n                const bUndefined = typeof bValue === 'undefined'\n\n                if (aUndefined || bUndefined) {\n                  return aUndefined && bUndefined\n                    ? 0\n                    : aUndefined\n                    ? columnInfo.sortUndefined\n                    : -columnInfo.sortUndefined\n                }\n              }\n\n              // This function should always return in ascending order\n              let sortInt = columnInfo.sortingFn(rowA, rowB, sortEntry.id)\n\n              if (sortInt !== 0) {\n                if (isDesc) {\n                  sortInt *= -1\n                }\n\n                if (columnInfo.invertSorting) {\n                  sortInt *= -1\n                }\n\n                return sortInt\n              }\n            }\n\n            return rowA.index - rowB.index\n          })\n\n          // If there are sub-rows, sort them\n          sortedData.forEach(row => {\n            sortedFlatRows.push(row)\n            if (!row.subRows || row.subRows.length <= 1) {\n              return\n            }\n            row.subRows = sortData(row.subRows)\n          })\n\n          return sortedData\n        }\n\n        return {\n          rows: sortData(rowModel.rows),\n          flatRows: sortedFlatRows,\n          rowsById: rowModel.rowsById,\n        }\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getSortedRowModel',\n        debug: () => instance.options.debugAll ?? instance.options.debugTable,\n        onChange: () => {\n          instance._autoResetPageIndex()\n        },\n      }\n    )\n}\n","import { CoreRow } from '../features/Rows'\nimport { TableInstance, Row, RowModel, TableGenerics } from '../types'\nimport { flattenBy, memo } from '../utils'\n\nexport function getGroupedRowModel<TGenerics extends TableGenerics>(): (\n  instance: TableInstance<TGenerics>\n) => () => RowModel<TGenerics> {\n  return instance =>\n    memo(\n      () => [instance.getState().grouping, instance.getPreGroupedRowModel()],\n      (grouping, rowModel) => {\n        if (!rowModel.rows.length || !grouping.length) {\n          return rowModel\n        }\n\n        // Filter the grouping list down to columns that exist\n        const existingGrouping = grouping.filter(columnId =>\n          instance.getColumn(columnId)\n        )\n\n        const groupedFlatRows: Row<TGenerics>[] = []\n        const groupedRowsById: Record<string, Row<TGenerics>> = {}\n        // const onlyGroupedFlatRows: Row[] = [];\n        // const onlyGroupedRowsById: Record<RowId, Row> = {};\n        // const nonGroupedFlatRows: Row[] = [];\n        // const nonGroupedRowsById: Record<RowId, Row> = {};\n\n        // Recursively group the data\n        const groupUpRecursively = (\n          rows: Row<TGenerics>[],\n          depth = 0,\n          parentId: string\n        ) => {\n          // This is the last level, just return the rows\n          if (depth === existingGrouping.length) {\n            return rows\n          }\n\n          const columnId = existingGrouping[depth]!\n\n          // Group the rows together for this level\n          const rowGroupsMap = groupBy(rows, columnId)\n\n          // Peform aggregations for each group\n          const aggregatedGroupedRows = Array.from(rowGroupsMap.entries()).map(\n            ([groupingValue, groupedRows], index) => {\n              let id = `${columnId}:${groupingValue}`\n              id = parentId ? `${parentId}>${id}` : id\n\n              // First, Recurse to group sub rows before aggregation\n              const subRows = groupUpRecursively(groupedRows, depth + 1, id)\n\n              // Flatten the leaf rows of the rows in this group\n              const leafRows = depth\n                ? flattenBy(groupedRows, row => row.subRows)\n                : groupedRows\n\n              const row = instance.createRow(id, undefined, index, depth)\n\n              Object.assign(row, {\n                groupingColumnId: columnId,\n                groupingValue,\n                subRows,\n                leafRows,\n                getValue: (columnId: string) => {\n                  // Don't aggregate columns that are in the grouping\n                  if (existingGrouping.includes(columnId)) {\n                    if (row.valuesCache.hasOwnProperty(columnId)) {\n                      return row.valuesCache[columnId]\n                    }\n\n                    if (groupedRows[0]) {\n                      row.valuesCache[columnId] =\n                        groupedRows[0].getValue(columnId) ?? undefined\n                    }\n\n                    return row.valuesCache[columnId]\n                  }\n\n                  if (row.groupingValuesCache.hasOwnProperty(columnId)) {\n                    return row.groupingValuesCache[columnId]\n                  }\n\n                  // Aggregate the values\n                  const column = instance.getColumn(columnId)\n                  const aggregateFn = column.getColumnAggregationFn()\n\n                  if (aggregateFn) {\n                    row.groupingValuesCache[columnId] = aggregateFn(\n                      () =>\n                        leafRows.map(row => {\n                          let columnValue = row.getValue(columnId)\n\n                          if (!depth && column.aggregateValue) {\n                            columnValue = column.aggregateValue(columnValue)\n                          }\n\n                          return columnValue\n                        }),\n                      () => groupedRows.map(row => row.getValue(columnId))\n                    )\n\n                    return row.groupingValuesCache[columnId]\n                  } else if (column.aggregationFn) {\n                    console.info({ column })\n                    throw new Error(\n                      process.env.NODE_ENV !== 'production'\n                        ? `Table: Invalid column.aggregateType option for column listed above`\n                        : ''\n                    )\n                  }\n                },\n              })\n\n              subRows.forEach(subRow => {\n                groupedFlatRows.push(subRow)\n                groupedRowsById[subRow.id] = subRow\n                // if (subRow.getIsGrouped?.()) {\n                //   onlyGroupedFlatRows.push(subRow);\n                //   onlyGroupedRowsById[subRow.id] = subRow;\n                // } else {\n                //   nonGroupedFlatRows.push(subRow);\n                //   nonGroupedRowsById[subRow.id] = subRow;\n                // }\n              })\n\n              return row\n            }\n          )\n\n          return aggregatedGroupedRows\n        }\n\n        const groupedRows = groupUpRecursively(rowModel.rows, 0, '')\n\n        groupedRows.forEach(subRow => {\n          groupedFlatRows.push(subRow)\n          groupedRowsById[subRow.id] = subRow\n          // if (subRow.getIsGrouped?.()) {\n          //   onlyGroupedFlatRows.push(subRow);\n          //   onlyGroupedRowsById[subRow.id] = subRow;\n          // } else {\n          //   nonGroupedFlatRows.push(subRow);\n          //   nonGroupedRowsById[subRow.id] = subRow;\n          // }\n        })\n\n        return {\n          rows: groupedRows,\n          flatRows: groupedFlatRows,\n          rowsById: groupedRowsById,\n        }\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getGroupedRowModel',\n        debug: () => instance.options.debugAll ?? instance.options.debugTable,\n        onChange: () => {\n          instance._queue(() => {\n            instance._autoResetExpanded()\n            instance._autoResetPageIndex()\n          })\n        },\n      }\n    )\n}\n\nfunction groupBy<TGenerics extends TableGenerics>(\n  rows: Row<TGenerics>[],\n  columnId: string\n) {\n  const groupMap = new Map<any, Row<TGenerics>[]>()\n\n  return rows.reduce((map, row) => {\n    const resKey = `${row.getValue(columnId)}`\n    const previous = map.get(resKey)\n    if (!previous) {\n      map.set(resKey, [row])\n    } else {\n      map.set(resKey, [...previous, row])\n    }\n    return map\n  }, groupMap)\n}\n","import { TableInstance, Row, RowModel, TableGenerics } from '../types'\nimport { memo } from '../utils'\n\nexport function getExpandedRowModel<TGenerics extends TableGenerics>(): (\n  instance: TableInstance<TGenerics>\n) => () => RowModel<TGenerics> {\n  return instance =>\n    memo(\n      () => [\n        instance.getState().expanded,\n        instance.getPreExpandedRowModel(),\n        instance.options.paginateExpandedRows,\n      ],\n      (expanded, rowModel, paginateExpandedRows) => {\n        if (\n          !rowModel.rows.length ||\n          // Do not expand if rows are not included in pagination\n          !paginateExpandedRows ||\n          (expanded !== true && !Object.keys(expanded ?? {}).length)\n        ) {\n          return rowModel\n        }\n\n        return expandRows(rowModel, instance)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getExpandedRowModel',\n        debug: () => instance.options.debugAll ?? instance.options.debugTable,\n      }\n    )\n}\n\nexport function expandRows<TGenerics extends TableGenerics>(\n  rowModel: RowModel<TGenerics>,\n  instance: TableInstance<TGenerics>\n) {\n  const expandedRows: Row<TGenerics>[] = []\n\n  const handleRow = (row: Row<TGenerics>) => {\n    expandedRows.push(row)\n\n    if (\n      instance.options.expandSubRows &&\n      row.subRows?.length &&\n      row.getIsExpanded()\n    ) {\n      row.subRows.forEach(handleRow)\n    }\n  }\n\n  rowModel.rows.forEach(handleRow)\n\n  return {\n    rows: expandedRows,\n    flatRows: rowModel.flatRows,\n    rowsById: rowModel.rowsById,\n  }\n}\n","import { TableInstance, RowModel, TableGenerics } from '../types'\nimport { memo } from '../utils'\nimport { expandRows } from './getExpandedRowModel'\n\nexport function getPaginationRowModel<TGenerics extends TableGenerics>(opts?: {\n  initialSync: boolean\n}): (instance: TableInstance<TGenerics>) => () => RowModel<TGenerics> {\n  return instance =>\n    memo(\n      () => [\n        instance.getState().pagination,\n        instance.getPrePaginationRowModel(),\n      ],\n      (pagination, rowModel) => {\n        if (!rowModel.rows.length) {\n          return rowModel\n        }\n\n        const { pageSize, pageIndex } = pagination\n        let { rows, flatRows, rowsById } = rowModel\n        const pageStart = pageSize * pageIndex\n        const pageEnd = pageStart + pageSize\n\n        rows = rows.slice(pageStart, pageEnd)\n\n        if (!instance.options.paginateExpandedRows) {\n          return expandRows(\n            {\n              rows,\n              flatRows,\n              rowsById,\n            },\n            instance\n          )\n        }\n\n        return {\n          rows,\n          flatRows,\n          rowsById,\n        }\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getPaginationRowModel',\n        debug: () => instance.options.debugAll ?? instance.options.debugTable,\n      }\n    )\n}\n"],"names":["functionalUpdate","updater","input","noop","makeStateUpdater","key","instance","setState","old","isFunction","d","Function","flattenBy","arr","getChildren","flat","recurse","subArr","forEach","item","push","children","length","memo","getDeps","fn","opts","deps","result","depTime","debug","Date","now","newDeps","depsChanged","some","dep","index","resultTime","onChange","depEndTime","Math","round","resultEndTime","resultFpsPercentage","pad","str","num","String","console","info","max","min","Columns","createInstance","getDefaultColumn","options","defaultColumn","header","props","column","id","footer","cell","getValue","toString","_features","reduce","obj","feature","Object","assign","debugAll","debugColumns","process","env","NODE_ENV","getColumnDefs","columns","createColumn","columnDef","depth","parent","accessorKey","undefined","accessorFn","originalRow","Error","columnDefType","getFlatColumns","flatMap","getLeafColumns","_getOrderColumnsFn","orderColumns","leafColumns","getAllColumns","columnDefs","recurseColumns","map","getAllFlatColumns","allColumns","getAllFlatColumnsById","flatColumns","acc","getAllLeafColumns","getColumn","columnId","warn","Rows","getRowId","row","join","createRow","original","rowIndex","subRows","valuesCache","hasOwnProperty","getLeafRows","i","getCoreRowModel","_getCoreRowModel","getRowModel","getPaginationRowModel","getRow","rowsById","Cells","getAllCells","createCell","debugRows","getAllCellsByColumnId","allCells","rowId","renderCell","_render","getCell","defaultColumnSizing","size","minSize","maxSize","Number","MAX_SAFE_INTEGER","getDefaultColumnSizingInfoState","startOffset","startSize","deltaOffset","deltaPercentage","isResizingColumn","columnSizingStart","ColumnSizing","getInitialState","state","columnSizing","columnSizingInfo","getDefaultOptions","columnResizeMode","onColumnSizingChange","onColumnSizingInfoChange","getSize","columnSize","getState","getStart","position","getVisibleLeafColumns","getLeftVisibleLeafColumns","getRightVisibleLeafColumns","findIndex","prevSiblingColumn","resetSize","setColumnSizing","_","rest","getCanResize","enableResizing","enableColumnResizing","getIsResizing","createHeader","sum","subHeaders","prevSiblingHeader","headerGroup","headers","getResizeHandler","canResize","e","persist","isTouchStartEvent","touches","getLeafHeaders","clientX","updateOffset","eventType","clientXPos","newColumnSizing","setColumnSizingInfo","headerSize","onMove","onEnd","mouseEvents","moveHandler","upHandler","document","removeEventListener","passiveIfSupported","passiveEventSupported","passive","addEventListener","resetColumnSizing","defaultState","initialState","resetHeaderSizeInfo","getTotalSize","getHeaderGroups","getLeftTotalSize","getLeftHeaderGroups","getCenterTotalSize","getCenterHeaderGroups","getRightTotalSize","getRightHeaderGroups","passiveSupported","supported","window","err","type","Expanding","expanded","onExpandedChange","autoResetExpanded","expandSubRows","paginateExpandedRows","registered","queued","_autoResetExpanded","_queue","autoResetAll","resetExpanded","setExpanded","toggleAllRowsExpanded","getIsAllRowsExpanded","getCanSomeRowsExpand","flatRows","getCanExpand","getToggleAllRowsExpandedHandler","getIsSomeRowsExpanded","values","Boolean","getIsExpanded","getExpandedDepth","maxDepth","rowIds","keys","splitId","split","getPreExpandedRowModel","getGroupedRowModel","getExpandedRowModel","_getExpandedRowModel","manualExpanding","toggleExpanded","exists","oldExpanded","getIsRowExpanded","getRowCanExpand","enableExpanding","getToggleExpandedHandler","canExpand","includesString","filterValue","search","toLowerCase","includes","autoRemove","val","testFalsey","includesStringSensitive","equalsString","arrIncludes","arrIncludesAll","arrIncludesSome","equals","weakEquals","inNumberRange","rowValue","resolveFilterValue","unsafeMin","unsafeMax","parsedMin","parseFloat","parsedMax","isNaN","Infinity","temp","filterFns","Filters","filterFn","columnFilters","globalFilter","onColumnFiltersChange","onGlobalFilterChange","filterFromLeafRows","globalFilterFn","getColumnCanGlobalFilter","value","getAutoFilterFn","firstRow","Array","isArray","getFilterFn","userFilterFns","getCanFilter","enableColumnFilter","enableColumnFilters","enableFilters","getCanGlobalFilter","enableGlobalFilter","getIsFiltered","getFilterIndex","getFilterValue","find","setFilterValue","setColumnFilters","previousfilter","newFilter","shouldAutoRemoveFilter","filter","newFilterObj","_getFacetedRowModel","getFacetedRowModel","getPreFilteredRowModel","_getFacetedUniqueValues","getFacetedUniqueValues","Map","_getFacetedMinMaxValues","getFacetedMinMaxValues","columnFiltersMeta","subRowsByFacetId","getGlobalAutoFilterFn","getGlobalFilterFn","updateFn","setGlobalFilter","resetGlobalFilter","resetColumnFilters","_getFilteredRowModel","getFilteredRowModel","manualFiltering","_getGlobalFacetedRowModel","getGlobalFacetedRowModel","_getGlobalFacetedUniqueValues","getGlobalFacetedUniqueValues","_getGlobalFacetedMinMaxValues","getGlobalFacetedMinMaxValues","aggregationFns","extent","mean","median","unique","uniqueCount","count","_getLeafValues","getChildValues","next","getLeafValues","leafValues","from","Set","Grouping","aggregationFn","grouping","onGroupingChange","groupedColumnMode","toggleGrouping","setGrouping","getCanGroup","enableGrouping","getIsGrouped","getGroupedIndex","indexOf","getToggleGroupingHandler","canGroup","getColumnAutoAggregationFn","prototype","call","getColumnAggregationFn","userAggregationFns","resetGrouping","getPreGroupedRowModel","getSortedRowModel","_getGroupedRowModel","manualGrouping","groupingColumnId","groupingValuesCache","getIsPlaceholder","getIsAggregated","renderAggregatedCell","template","aggregatedCell","nonGroupingColumns","col","groupingColumns","g","Ordering","columnOrder","onColumnOrderChange","setColumnOrder","resetColumnOrder","orderedColumns","columnOrderCopy","columnsCopy","targetColumnId","shift","foundIndex","splice","defaultPageIndex","defaultPageSize","getDefaultPaginationState","pageIndex","pageSize","Pagination","pagination","onPaginationChange","_autoResetPageIndex","autoResetPageIndex","manualPagination","resetPageIndex","setPagination","safeUpdater","newState","resetPagination","setPageIndex","maxPageIndex","pageCount","resetPageSize","setPageSize","topRowIndex","floor","setPageCount","newPageCount","getPageOptions","pageOptions","fill","debugTable","getCanPreviousPage","getCanNextPage","getPageCount","previousPage","nextPage","getPrePaginationRowModel","_getPaginationRowModel","ceil","rows","getDefaultPinningState","left","right","Pinning","columnPinning","onColumnPinningChange","pin","columnIds","setColumnPinning","getCanPin","enablePinning","getIsPinned","leafColumnIds","isLeft","isRight","getPinnedIndex","getCenterVisibleCells","_getAllVisibleCells","leftAndRight","getLeftVisibleCells","cells","getRightVisibleCells","resetColumnPinning","getIsSomeColumnsPinned","getLeftLeafColumns","getRightLeafColumns","getCenterLeafColumns","RowSelection","rowSelection","onRowSelectionChange","enableRowSelection","enableMultiRowSelection","enableSubRowSelection","setRowSelection","resetRowSelection","toggleAllRowsSelected","getIsAllRowsSelected","preGroupedFlatRows","toggleAllPageRowsSelected","getIsAllPageRowsSelected","mutateRowIsSelected","getPreSelectedRowModel","getSelectedRowModel","rowModel","selectRowsFn","getFilteredSelectedRowModel","getGroupedSelectedRowModel","preFilteredFlatRows","isAllRowsSelected","paginationFlatRows","isAllPageRowsSelected","getIsSomeRowsSelected","getIsSomePageRowsSelected","getToggleAllRowsSelectedHandler","target","checked","getToggleAllPageRowsSelectedHandler","toggleSelected","isSelected","getIsSelected","selectedRowIds","isRowSelected","getIsSomeSelected","getCanSelect","getCanSelectSubRows","getCanMultiSelect","getToggleSelectedHandler","canSelect","newSelectedFlatRows","newSelectedRowsById","recurseRows","selection","allChildrenSelected","someSelected","subRow","reSplitAlphaNumeric","sortingFns","alphanumeric","alphanumericCaseSensitive","text","textCaseSensitive","datetime","basic","rowA","rowB","compareAlphanumeric","aStr","bStr","a","b","aa","bb","an","parseInt","bn","combo","sort","compareBasic","getTime","Sorting","sorting","sortingFn","onSortingChange","isMultiSortEvent","shiftKey","getAutoSortingFn","firstRows","slice","isString","getAutoSortDir","getSortingFn","userSortingFn","toggleSorting","desc","multi","setSorting","existingSorting","existingIndex","hasDescDefined","newSorting","sortAction","getCanMultiSort","sortDescFirst","enableSortingRemoval","enableMultiRemove","maxMultiSortColCount","getCanSort","enableSorting","enableMultiSort","getIsSorted","columnSort","getSortIndex","clearSorting","getToggleSortingHandler","canSort","resetSorting","getPreSortedRowModel","_getSortedRowModel","manualSorting","Visibility","columnVisibility","onColumnVisibilityChange","defaultIsVisible","toggleVisibility","getCanHide","setColumnVisibility","getIsVisible","enableHiding","getToggleVisibilityHandler","getVisibleCells","center","makeVisibleColumnsMethod","getColumns","getVisibleFlatColumns","getCenterVisibleLeafColumns","resetColumnVisibility","toggleAllColumnsVisible","getIsAllColumnsVisible","getIsSomeColumnsVisible","getToggleAllColumnsVisibilityHandler","Headers","isPlaceholder","placeholderId","colSpan","rowSpan","leafHeaders","recurseHeader","h","renderHeader","renderFooter","leftColumns","rightColumns","centerColumns","headerGroups","buildHeaderGroups","debugHeaders","orderedLeafColumns","getFooterGroups","reverse","getLeftFooterGroups","getCenterFooterGroups","getRightFooterGroups","getFlatHeaders","getLeftFlatHeaders","getCenterFlatHeaders","getRightFlatHeaders","getCenterLeafHeaders","flatHeaders","getLeftLeafHeaders","getRightLeafHeaders","getHeader","columnsToGroup","headerFamily","findMaxDepth","createHeaderGroup","headersToGroup","pendingParentHeaders","headerToGroup","latestPendingParentHeader","isLeafHeader","bottomHeaders","recurseHeadersForSpans","filteredHeaders","childRowSpans","childColSpan","childRowSpan","minChildRowSpan","createTableInstance","defaultOptions","mergeOptions","coreInitialState","queuedTimeout","midInstance","cb","Promise","resolve","then","catch","error","setTimeout","reset","setOptions","newOptions","render","onStateChange","createTableFactory","createTable","__","table","generics","setGenerics","setRowType","setTableMetaType","setColumnMetaType","setFilterMetaType","createDisplayColumn","createGroup","createDataColumn","accessor","data","accessRows","originalRows","getSubRows","originalSubRows","filterRows","filterRowImpl","filterRowModelFromLeafs","filterRowModelFromRoot","rowsToFilter","filterRow","newFilteredFlatRows","newFilteredRowsById","newRow","recurseFilterRows","pass","resolvedColumnFilters","resolvedGlobalFilters","resolvedValue","filterableIds","globallyFilterableColumns","currentColumnFilter","currentGlobalFilter","j","filterMeta","__global__","filterRowsImpl","preRowModel","facetedRowModel","facetedUniqueValues","has","set","get","firstValue","facetedMinMaxValues","sortingState","sortedFlatRows","availableSorting","columnInfoById","sortEntry","sortUndefined","invertSorting","sortData","sortedData","columnInfo","isDesc","aValue","bValue","aUndefined","bUndefined","sortInt","existingGrouping","groupedFlatRows","groupedRowsById","groupUpRecursively","parentId","rowGroupsMap","groupBy","aggregatedGroupedRows","entries","groupingValue","groupedRows","leafRows","aggregateFn","columnValue","aggregateValue","groupMap","resKey","previous","expandRows","expandedRows","handleRow","pageStart","pageEnd"],"mappings":"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"}