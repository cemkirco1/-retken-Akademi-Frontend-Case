{"version":3,"file":"aggregationFns.js","sources":["../../src/aggregationFns.ts"],"sourcesContent":["export const aggregationFns = {\n  sum,\n  min,\n  max,\n  extent,\n  mean,\n  median,\n  unique,\n  uniqueCount,\n  count,\n}\n\nexport type BuiltInAggregationFn = keyof typeof aggregationFns\n\nfunction sum(_getLeafValues: () => unknown[], getChildValues: () => unknown[]) {\n  // It's faster to just add the aggregations together instead of\n  // process leaf nodes individually\n  return getChildValues().reduce(\n    (sum: number, next: unknown) => sum + (typeof next === 'number' ? next : 0),\n    0\n  )\n}\n\nfunction min(_getLeafValues: () => unknown[], getChildValues: () => unknown[]) {\n  let min: number | undefined\n\n  for (const value of getChildValues() as number[]) {\n    if (\n      value != null &&\n      (min! > value || (min === undefined && value >= value))\n    ) {\n      min = value\n    }\n  }\n\n  return min\n}\n\nfunction max(_getLeafValues: () => unknown[], getChildValues: () => unknown[]) {\n  let max: number | undefined\n\n  for (const value of getChildValues() as number[]) {\n    if (\n      value != null &&\n      (max! < value || (max === undefined && value >= value))\n    ) {\n      max = value\n    }\n  }\n\n  return max\n}\n\nfunction extent(\n  _getLeafValues: () => unknown[],\n  getChildValues: () => unknown[]\n) {\n  let min: number | undefined\n  let max: number | undefined\n\n  for (const value of getChildValues() as number[]) {\n    if (value != null) {\n      if (min === undefined) {\n        if (value >= value) min = max = value\n      } else {\n        if (min > value) min = value\n        if (max! < value) max = value\n      }\n    }\n  }\n\n  return [min, max]\n}\n\nexport function mean(getLeafValues: () => unknown[]) {\n  let count = 0\n  let sum = 0\n\n  for (let value of getLeafValues() as number[]) {\n    if (value != null && (value = +value) >= value) {\n      ++count, (sum += value)\n    }\n  }\n\n  if (count) return sum / count\n\n  return\n}\n\nfunction median(getLeafValues: () => unknown[]) {\n  const leafValues = getLeafValues()\n  if (!leafValues.length) {\n    return\n  }\n\n  let min = 0\n  let max = 0\n\n  leafValues.forEach(value => {\n    if (typeof value === 'number') {\n      min = Math.min(min, value)\n      max = Math.max(max, value)\n    }\n  })\n\n  return (min + max) / 2\n}\n\nfunction unique<T>(getLeafValues: () => T[]) {\n  return Array.from(new Set(getLeafValues()).values())\n}\n\nfunction uniqueCount(getLeafValues: () => unknown[]) {\n  return new Set(getLeafValues()).size\n}\n\nfunction count(getLeafValues: () => unknown[]) {\n  return getLeafValues().length\n}\n"],"names":["aggregationFns","sum","min","max","extent","mean","median","unique","uniqueCount","count","_getLeafValues","getChildValues","reduce","next","value","undefined","getLeafValues","leafValues","length","forEach","Math","Array","from","Set","values","size"],"mappings":"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"}