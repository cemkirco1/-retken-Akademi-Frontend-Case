/**
 * table-core
 *
 * Copyright (c) TanStack
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const aggregationFns = {
  sum,
  min,
  max,
  extent,
  mean,
  median,
  unique,
  uniqueCount,
  count
};

function sum(_getLeafValues, getChildValues) {
  // It's faster to just add the aggregations together instead of
  // process leaf nodes individually
  return getChildValues().reduce((sum, next) => sum + (typeof next === 'number' ? next : 0), 0);
}

function min(_getLeafValues, getChildValues) {
  let min;

  for (const value of getChildValues()) {
    if (value != null && (min > value || min === undefined && value >= value)) {
      min = value;
    }
  }

  return min;
}

function max(_getLeafValues, getChildValues) {
  let max;

  for (const value of getChildValues()) {
    if (value != null && (max < value || max === undefined && value >= value)) {
      max = value;
    }
  }

  return max;
}

function extent(_getLeafValues, getChildValues) {
  let min;
  let max;

  for (const value of getChildValues()) {
    if (value != null) {
      if (min === undefined) {
        if (value >= value) min = max = value;
      } else {
        if (min > value) min = value;
        if (max < value) max = value;
      }
    }
  }

  return [min, max];
}

function mean(getLeafValues) {
  let count = 0;
  let sum = 0;

  for (let value of getLeafValues()) {
    if (value != null && (value = +value) >= value) {
      ++count, sum += value;
    }
  }

  if (count) return sum / count;
  return;
}

function median(getLeafValues) {
  const leafValues = getLeafValues();

  if (!leafValues.length) {
    return;
  }

  let min = 0;
  let max = 0;
  leafValues.forEach(value => {
    if (typeof value === 'number') {
      min = Math.min(min, value);
      max = Math.max(max, value);
    }
  });
  return (min + max) / 2;
}

function unique(getLeafValues) {
  return Array.from(new Set(getLeafValues()).values());
}

function uniqueCount(getLeafValues) {
  return new Set(getLeafValues()).size;
}

function count(getLeafValues) {
  return getLeafValues().length;
}

exports.aggregationFns = aggregationFns;
exports.mean = mean;
//# sourceMappingURL=aggregationFns.js.map
