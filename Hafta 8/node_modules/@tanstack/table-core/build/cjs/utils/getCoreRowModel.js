/**
 * table-core
 *
 * Copyright (c) TanStack
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var utils = require('../utils.js');

function getCoreRowModel() {
  return instance => utils.memo(() => [instance.options.data], data => {
    const rowModel = {
      rows: [],
      flatRows: [],
      rowsById: {}
    };
    let rows;
    let row;
    let originalRow;

    const accessRows = function (originalRows, depth, parent) {
      if (depth === void 0) {
        depth = 0;
      }

      rows = [];

      for (let i = 0; i < originalRows.length; i++) {
        originalRow = originalRows[i]; // This could be an expensive check at scale, so we should move it somewhere else, but where?
        // if (!id) {
        //   if (process.env.NODE_ENV !== 'production') {
        //     throw new Error(`getRowId expected an ID, but got ${id}`)
        //   }
        // }
        // Make the row

        row = instance.createRow(instance.getRowId(originalRow, i, parent), originalRow, i, depth); // Keep track of every row in a flat array

        rowModel.flatRows.push(row); // Also keep track of every row by its ID

        rowModel.rowsById[row.id] = row; // Push instance row into parent

        rows.push(row); // Get the original subrows

        if (instance.options.getSubRows) {
          var _row$originalSubRows;

          row.originalSubRows = instance.options.getSubRows(originalRow, i); // Then recursively access them

          if ((_row$originalSubRows = row.originalSubRows) != null && _row$originalSubRows.length) {
            row.subRows = accessRows(row.originalSubRows, depth + 1, row);
          }
        }
      }

      return rows;
    };

    rowModel.rows = accessRows(data);
    return rowModel;
  }, {
    key: process.env.NODE_ENV === 'development' && 'getRowModel',
    debug: () => {
      var _instance$options$deb;

      return (_instance$options$deb = instance.options.debugAll) != null ? _instance$options$deb : instance.options.debugTable;
    },
    onChange: () => {
      instance._autoResetPageIndex();
    }
  });
}

exports.getCoreRowModel = getCoreRowModel;
//# sourceMappingURL=getCoreRowModel.js.map
