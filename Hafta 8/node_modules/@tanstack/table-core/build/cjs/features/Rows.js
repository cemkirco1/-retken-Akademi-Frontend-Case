/**
 * table-core
 *
 * Copyright (c) TanStack
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var utils = require('../utils.js');

//
const Rows = {
  // createRow: <TGenerics extends TableGenerics>(
  //   row: Row<TGenerics>,
  //   instance: TableInstance<TGenerics>
  // ): CellsRow<TGenerics> => {
  //   return {}
  // },
  createInstance: instance => {
    return {
      getRowId: (row, index, parent) => {
        var _instance$options$get;

        return (_instance$options$get = instance.options.getRowId == null ? void 0 : instance.options.getRowId(row, index, parent)) != null ? _instance$options$get : "" + (parent ? [parent.id, index].join('.') : index);
      },
      createRow: (id, original, rowIndex, depth, subRows) => {
        let row = {
          id,
          index: rowIndex,
          original,
          depth,
          valuesCache: {},
          getValue: columnId => {
            if (row.valuesCache.hasOwnProperty(columnId)) {
              return row.valuesCache[columnId];
            }

            const column = instance.getColumn(columnId);

            if (!column.accessorFn) {
              return undefined;
            }

            row.valuesCache[columnId] = column.accessorFn(row.original, rowIndex);
            return row.valuesCache[columnId];
          },
          subRows: subRows != null ? subRows : [],
          getLeafRows: () => utils.flattenBy(row.subRows, d => d.subRows)
        };

        for (let i = 0; i < instance._features.length; i++) {
          const feature = instance._features[i];
          Object.assign(row, feature == null ? void 0 : feature.createRow == null ? void 0 : feature.createRow(row, instance));
        }

        return row;
      },
      getCoreRowModel: () => {
        if (!instance._getCoreRowModel) {
          instance._getCoreRowModel = instance.options.getCoreRowModel(instance);
        }

        return instance._getCoreRowModel();
      },
      // The final calls start at the bottom of the model,
      // expanded rows, which then work their way up
      getRowModel: () => {
        return instance.getPaginationRowModel();
      },
      getRow: id => {
        const row = instance.getRowModel().rowsById[id];

        if (!row) {
          if (process.env.NODE_ENV !== 'production') {
            throw new Error("getRow expected an ID, but got " + id);
          }

          throw new Error();
        }

        return row;
      }
    };
  }
};

exports.Rows = Rows;
//# sourceMappingURL=Rows.js.map
