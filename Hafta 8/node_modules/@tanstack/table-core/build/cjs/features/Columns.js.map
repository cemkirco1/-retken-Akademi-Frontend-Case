{"version":3,"file":"Columns.js","sources":["../../../src/features/Columns.ts"],"sourcesContent":["import {\n  Cell,\n  Column,\n  Header,\n  TableGenerics,\n  TableInstance,\n  Row,\n  AccessorFn,\n  ColumnDef,\n  Renderable,\n} from '../types'\nimport { memo } from '../utils'\n\nexport type CoreColumnDefType = 'data' | 'display' | 'group'\n\nexport type CoreColumnDef<TGenerics extends TableGenerics> = {\n  id: string\n  accessorKey?: string & keyof TGenerics['Row']\n  accessorFn?: AccessorFn<TGenerics['Row']>\n  columns?: ColumnDef<TGenerics>[]\n  header?: Renderable<\n    TGenerics,\n    {\n      instance: TableInstance<TGenerics>\n      header: Header<TGenerics>\n      column: Column<TGenerics>\n    }\n  >\n  footer?: Renderable<\n    TGenerics,\n    {\n      instance: TableInstance<TGenerics>\n      header: Header<TGenerics>\n      column: Column<TGenerics>\n    }\n  >\n  cell?: Renderable<\n    TGenerics,\n    {\n      instance: TableInstance<TGenerics>\n      row: Row<TGenerics>\n      column: Column<TGenerics>\n      cell: Cell<TGenerics>\n      getValue: () => TGenerics['Value']\n    }\n  >\n  meta?: TGenerics['ColumnMeta']\n}\n\nexport type CoreColumn<TGenerics extends TableGenerics> = {\n  id: string\n  depth: number\n  accessorFn?: AccessorFn<TGenerics['Row']>\n  columnDef: ColumnDef<TGenerics>\n  columnDefType: CoreColumnDefType\n  columns: Column<TGenerics>[]\n  parent?: Column<TGenerics>\n  getFlatColumns: () => Column<TGenerics>[]\n  getLeafColumns: () => Column<TGenerics>[]\n}\n\nexport type ColumnsOptions<TGenerics extends TableGenerics> = {\n  columns: ColumnDef<TGenerics>[]\n  defaultColumn?: Partial<ColumnDef<TGenerics>>\n}\n\nexport type ColumnsInstance<TGenerics extends TableGenerics> = {\n  getDefaultColumn: () => Partial<ColumnDef<TGenerics>>\n  getColumnDefs: () => ColumnDef<TGenerics>[]\n  createColumn: (\n    columnDef: ColumnDef<TGenerics>,\n    depth: number,\n    parent?: Column<TGenerics>\n  ) => Column<TGenerics>\n  getAllColumns: () => Column<TGenerics>[]\n  getAllFlatColumns: () => Column<TGenerics>[]\n  getAllFlatColumnsById: () => Record<string, Column<TGenerics>>\n  getAllLeafColumns: () => Column<TGenerics>[]\n  getColumn: (columnId: string) => Column<TGenerics>\n}\n\n//\n\nexport const Columns = {\n  createInstance: <TGenerics extends TableGenerics>(\n    instance: TableInstance<TGenerics>\n  ): ColumnsInstance<TGenerics> => {\n    return {\n      getDefaultColumn: memo(\n        () => [instance.options.defaultColumn],\n        defaultColumn => {\n          defaultColumn = (defaultColumn ?? {}) as Partial<ColumnDef<TGenerics>>\n\n          return {\n            header: props => props.header.column.id,\n            footer: props => props.header.column.id,\n            cell: props => props.getValue().toString?.() ?? null,\n            ...instance._features.reduce((obj, feature) => {\n              return Object.assign(obj, feature.getDefaultColumn?.())\n            }, {}),\n            ...defaultColumn,\n          } as Partial<ColumnDef<TGenerics>>\n        },\n        {\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugColumns,\n          key: process.env.NODE_ENV === 'development' && 'getDefaultColumn',\n        }\n      ),\n\n      getColumnDefs: () => instance.options.columns,\n\n      createColumn: (\n        columnDef: ColumnDef<TGenerics> & { columnDefType?: CoreColumnDefType },\n        depth: number,\n        parent\n      ) => {\n        const defaultColumn = instance.getDefaultColumn()\n\n        let id =\n          columnDef.id ??\n          columnDef.accessorKey ??\n          (typeof columnDef.header === 'string' ? columnDef.header : undefined)\n\n        let accessorFn: AccessorFn<TGenerics['Row']> | undefined\n\n        if (columnDef.accessorFn) {\n          accessorFn = columnDef.accessorFn\n        } else if (columnDef.accessorKey) {\n          accessorFn = (originalRow?: TGenerics['Row']) =>\n            (originalRow as any)[columnDef.accessorKey]\n        }\n\n        if (!id) {\n          if (process.env.NODE_ENV !== 'production') {\n            throw new Error(\n              columnDef.accessorFn\n                ? `Columns require an id when using an accessorFn`\n                : `Columns require an id when using a non-string header`\n            )\n          }\n          throw new Error()\n        }\n\n        let column: CoreColumn<TGenerics> = {\n          ...defaultColumn,\n          ...columnDef,\n          id: `${id}`,\n          accessorFn,\n          parent: parent as any,\n          depth,\n          columnDef,\n          columnDefType: columnDef.columnDefType as CoreColumnDefType,\n          columns: [],\n          getFlatColumns: memo(\n            () => [true],\n            () => {\n              return [\n                column as Column<TGenerics>,\n                ...column.columns?.flatMap(d => d.getFlatColumns()),\n              ]\n            },\n            {\n              key:\n                process.env.NODE_ENV === 'production' &&\n                'column.getFlatColumns',\n              debug: () =>\n                instance.options.debugAll ?? instance.options.debugColumns,\n            }\n          ),\n          getLeafColumns: memo(\n            () => [instance._getOrderColumnsFn()],\n            orderColumns => {\n              if (column.columns?.length) {\n                let leafColumns = column.columns.flatMap(column =>\n                  column.getLeafColumns()\n                )\n\n                return orderColumns(leafColumns)\n              }\n\n              return [column as Column<TGenerics>]\n            },\n            {\n              key:\n                process.env.NODE_ENV === 'production' &&\n                'column.getLeafColumns',\n              debug: () =>\n                instance.options.debugAll ?? instance.options.debugColumns,\n            }\n          ),\n        }\n\n        column = instance._features.reduce((obj, feature) => {\n          return Object.assign(obj, feature.createColumn?.(column, instance))\n        }, column)\n\n        // Yes, we have to convert instance to uknown, because we know more than the compiler here.\n        return column as Column<TGenerics>\n      },\n\n      getAllColumns: memo(\n        () => [instance.getColumnDefs()],\n        columnDefs => {\n          const recurseColumns = (\n            columnDefs: ColumnDef<TGenerics>[],\n            parent?: Column<TGenerics>,\n            depth = 0\n          ): Column<TGenerics>[] => {\n            return columnDefs.map(columnDef => {\n              const column = instance.createColumn(columnDef, depth, parent)\n\n              column.columns = columnDef.columns\n                ? recurseColumns(columnDef.columns, column, depth + 1)\n                : []\n\n              return column\n            })\n          }\n\n          return recurseColumns(columnDefs)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getAllColumns',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugColumns,\n        }\n      ),\n\n      getAllFlatColumns: memo(\n        () => [instance.getAllColumns()],\n        allColumns => {\n          return allColumns.flatMap(column => {\n            return column.getFlatColumns()\n          })\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getAllFlatColumns',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugColumns,\n        }\n      ),\n\n      getAllFlatColumnsById: memo(\n        () => [instance.getAllFlatColumns()],\n        flatColumns => {\n          return flatColumns.reduce((acc, column) => {\n            acc[column.id] = column\n            return acc\n          }, {} as Record<string, Column<TGenerics>>)\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'development' && 'getAllFlatColumnsById',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugColumns,\n        }\n      ),\n\n      getAllLeafColumns: memo(\n        () => [instance.getAllColumns(), instance._getOrderColumnsFn()],\n        (allColumns, orderColumns) => {\n          let leafColumns = allColumns.flatMap(column =>\n            column.getLeafColumns()\n          )\n          return orderColumns(leafColumns)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getAllLeafColumns',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugColumns,\n        }\n      ),\n\n      getColumn: columnId => {\n        const column = instance.getAllFlatColumnsById()[columnId]\n\n        if (!column) {\n          if (process.env.NODE_ENV !== 'production') {\n            console.warn(`[Table] Column with id ${columnId} does not exist.`)\n          }\n          throw new Error()\n        }\n\n        return column\n      },\n    }\n  },\n}\n"],"names":["Columns","createInstance","instance","getDefaultColumn","memo","options","defaultColumn","header","props","column","id","footer","cell","getValue","toString","_features","reduce","obj","feature","Object","assign","debug","debugAll","debugColumns","key","process","env","NODE_ENV","getColumnDefs","columns","createColumn","columnDef","depth","parent","accessorKey","undefined","accessorFn","originalRow","Error","columnDefType","getFlatColumns","flatMap","d","getLeafColumns","_getOrderColumnsFn","orderColumns","length","leafColumns","getAllColumns","columnDefs","recurseColumns","map","getAllFlatColumns","allColumns","getAllFlatColumnsById","flatColumns","acc","getAllLeafColumns","getColumn","columnId","console","warn"],"mappings":"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"}