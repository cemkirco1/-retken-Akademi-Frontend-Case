/**
 * table-core
 *
 * Copyright (c) TanStack
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var utils = require('../utils.js');

//
const Cells = {
  createRow: (row, instance) => {
    return {
      getAllCells: utils.memo(() => [instance.getAllLeafColumns()], leafColumns => {
        return leafColumns.map(column => {
          return instance.createCell(row, column, column.id);
        });
      }, {
        key: process.env.NODE_ENV === 'development' && 'row.getAllCells',
        debug: () => {
          var _instance$options$deb;

          return (_instance$options$deb = instance.options.debugAll) != null ? _instance$options$deb : instance.options.debugRows;
        }
      }),
      getAllCellsByColumnId: utils.memo(() => [row.getAllCells()], allCells => {
        return allCells.reduce((acc, cell) => {
          acc[cell.columnId] = cell;
          return acc;
        }, {});
      }, {
        key: process.env.NODE_ENV === 'production' && 'row.getAllCellsByColumnId',
        debug: () => {
          var _instance$options$deb2;

          return (_instance$options$deb2 = instance.options.debugAll) != null ? _instance$options$deb2 : instance.options.debugRows;
        }
      })
    };
  },
  createInstance: instance => {
    return {
      createCell: (row, column, columnId) => {
        const cell = {
          id: row.id + "_" + column.id,
          rowId: row.id,
          columnId,
          row,
          column,
          getValue: () => row.getValue(columnId),
          renderCell: () => column.cell ? instance._render(column.cell, {
            instance,
            column,
            row,
            cell: cell,
            getValue: cell.getValue
          }) : null
        };

        instance._features.forEach(feature => {
          Object.assign(cell, feature.createCell == null ? void 0 : feature.createCell(cell, column, row, instance));
        }, {});

        return cell;
      },
      getCell: (rowId, columnId) => {
        const row = instance.getRow(rowId);

        if (!row) {
          if (process.env.NODE_ENV !== 'production') {
            throw new Error("[Table] could not find row with id " + rowId);
          }

          throw new Error();
        }

        const cell = row.getAllCellsByColumnId()[columnId];

        if (!cell) {
          if (process.env.NODE_ENV !== 'production') {
            throw new Error("[Table] could not find cell " + columnId + " in row " + rowId);
          }

          throw new Error();
        }

        return cell;
      }
    };
  }
};

exports.Cells = Cells;
//# sourceMappingURL=Cells.js.map
