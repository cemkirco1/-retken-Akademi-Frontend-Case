{"version":3,"file":"Rows.js","sources":["../../../src/features/Rows.ts"],"sourcesContent":["import {\n  TableGenerics,\n  TableInstance,\n  Row,\n  RowModel,\n  RowValues,\n} from '../types'\nimport { flattenBy } from '../utils'\n\nexport type CoreRow<TGenerics extends TableGenerics> = {\n  id: string\n  index: number\n  original?: TGenerics['Row']\n  depth: number\n  valuesCache: Record<string, any>\n  getValue: (columnId: string) => any\n  subRows: Row<TGenerics>[]\n  getLeafRows: () => Row<TGenerics>[]\n  originalSubRows?: TGenerics['Row'][]\n}\n\nexport type RowsOptions<TGenerics extends TableGenerics> = {\n  getCoreRowModel: (\n    instance: TableInstance<TGenerics>\n  ) => () => RowModel<TGenerics>\n  getSubRows?: (\n    originalRow: TGenerics['Row'],\n    index: number\n  ) => undefined | TGenerics['Row'][]\n  getRowId?: (\n    originalRow: TGenerics['Row'],\n    index: number,\n    parent?: Row<TGenerics>\n  ) => string\n}\n\nexport type RowsInstance<TGenerics extends TableGenerics> = {\n  getRowId: (\n    _: TGenerics['Row'],\n    index: number,\n    parent?: Row<TGenerics>\n  ) => string\n  createRow: (\n    id: string,\n    original: TGenerics['Row'] | undefined,\n    rowIndex: number,\n    depth: number,\n    subRows?: Row<TGenerics>[]\n  ) => Row<TGenerics>\n  getCoreRowModel: () => RowModel<TGenerics>\n  _getCoreRowModel?: () => RowModel<TGenerics>\n  getRowModel: () => RowModel<TGenerics>\n  getRow: (id: string) => Row<TGenerics>\n}\n\n//\n\nexport const Rows = {\n  // createRow: <TGenerics extends TableGenerics>(\n  //   row: Row<TGenerics>,\n  //   instance: TableInstance<TGenerics>\n  // ): CellsRow<TGenerics> => {\n  //   return {}\n  // },\n\n  createInstance: <TGenerics extends TableGenerics>(\n    instance: TableInstance<TGenerics>\n  ): RowsInstance<TGenerics> => {\n    return {\n      getRowId: (\n        row: TGenerics['Row'],\n        index: number,\n        parent?: Row<TGenerics>\n      ) =>\n        instance.options.getRowId?.(row, index, parent) ??\n        `${parent ? [parent.id, index].join('.') : index}`,\n      createRow: (id, original, rowIndex, depth, subRows) => {\n        let row: CoreRow<TGenerics> = {\n          id,\n          index: rowIndex,\n          original,\n          depth,\n          valuesCache: {},\n          getValue: columnId => {\n            if (row.valuesCache.hasOwnProperty(columnId)) {\n              return row.valuesCache[columnId]\n            }\n\n            const column = instance.getColumn(columnId)\n\n            if (!column.accessorFn) {\n              return undefined\n            }\n\n            row.valuesCache[columnId] = column.accessorFn(\n              row.original,\n              rowIndex\n            )\n\n            return row.valuesCache[columnId]\n          },\n          subRows: subRows ?? [],\n          getLeafRows: () => flattenBy(row.subRows, d => d.subRows),\n        }\n\n        for (let i = 0; i < instance._features.length; i++) {\n          const feature = instance._features[i]\n          Object.assign(row, feature?.createRow?.(row, instance))\n        }\n\n        return row as Row<TGenerics>\n      },\n\n      getCoreRowModel: () => {\n        if (!instance._getCoreRowModel) {\n          instance._getCoreRowModel = instance.options.getCoreRowModel(instance)\n        }\n\n        return instance._getCoreRowModel()\n      },\n\n      // The final calls start at the bottom of the model,\n      // expanded rows, which then work their way up\n\n      getRowModel: () => {\n        return instance.getPaginationRowModel()\n      },\n      getRow: (id: string) => {\n        const row = instance.getRowModel().rowsById[id]\n\n        if (!row) {\n          if (process.env.NODE_ENV !== 'production') {\n            throw new Error(`getRow expected an ID, but got ${id}`)\n          }\n          throw new Error()\n        }\n\n        return row\n      },\n    }\n  },\n}\n"],"names":["Rows","createInstance","instance","getRowId","row","index","parent","options","id","join","createRow","original","rowIndex","depth","subRows","valuesCache","getValue","columnId","hasOwnProperty","column","getColumn","accessorFn","undefined","getLeafRows","flattenBy","d","i","_features","length","feature","Object","assign","getCoreRowModel","_getCoreRowModel","getRowModel","getPaginationRowModel","getRow","rowsById","process","env","NODE_ENV","Error"],"mappings":"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"}