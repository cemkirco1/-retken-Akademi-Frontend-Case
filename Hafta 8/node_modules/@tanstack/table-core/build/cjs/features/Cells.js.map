{"version":3,"file":"Cells.js","sources":["../../../src/features/Cells.ts"],"sourcesContent":["import {\n  Cell,\n  TableGenerics,\n  TableInstance,\n  Row,\n  Column,\n  CoreCell,\n} from '../types'\nimport { memo } from '../utils'\n\nexport type CellsRow<TGenerics extends TableGenerics> = {\n  getAllCells: () => Cell<TGenerics>[]\n  getAllCellsByColumnId: () => Record<string, Cell<TGenerics>>\n}\n\nexport type CellsInstance<TGenerics extends TableGenerics> = {\n  createCell: (\n    row: Row<TGenerics>,\n    column: Column<TGenerics>,\n    columnId: string\n  ) => Cell<TGenerics>\n  getCell: (rowId: string, columnId: string) => Cell<TGenerics>\n}\n\n//\n\nexport const Cells = {\n  createRow: <TGenerics extends TableGenerics>(\n    row: Row<TGenerics>,\n    instance: TableInstance<TGenerics>\n  ): CellsRow<TGenerics> => {\n    return {\n      getAllCells: memo(\n        () => [instance.getAllLeafColumns()],\n        leafColumns => {\n          return leafColumns.map(column => {\n            return instance.createCell(row as Row<TGenerics>, column, column.id)\n          })\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'row.getAllCells',\n          debug: () => instance.options.debugAll ?? instance.options.debugRows,\n        }\n      ),\n\n      getAllCellsByColumnId: memo(\n        () => [row.getAllCells()],\n        allCells => {\n          return allCells.reduce((acc, cell) => {\n            acc[cell.columnId] = cell\n            return acc\n          }, {} as Record<string, Cell<TGenerics>>)\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' &&\n            'row.getAllCellsByColumnId',\n          debug: () => instance.options.debugAll ?? instance.options.debugRows,\n        }\n      ),\n    }\n  },\n\n  createInstance: <TGenerics extends TableGenerics>(\n    instance: TableInstance<TGenerics>\n  ): CellsInstance<TGenerics> => {\n    return {\n      createCell: (row, column, columnId) => {\n        const cell: CoreCell<TGenerics> = {\n          id: `${row.id}_${column.id}`,\n          rowId: row.id,\n          columnId,\n          row,\n          column,\n          getValue: () => row.getValue(columnId),\n          renderCell: () =>\n            column.cell\n              ? instance._render(column.cell, {\n                  instance,\n                  column,\n                  row,\n                  cell: cell as Cell<TGenerics>,\n                  getValue: cell.getValue,\n                })\n              : null,\n        }\n\n        instance._features.forEach(feature => {\n          Object.assign(\n            cell,\n            feature.createCell?.(\n              cell as Cell<TGenerics>,\n              column,\n              row as Row<TGenerics>,\n              instance\n            )\n          )\n        }, {})\n\n        return cell as Cell<TGenerics>\n      },\n\n      getCell: (rowId: string, columnId: string) => {\n        const row = instance.getRow(rowId)\n\n        if (!row) {\n          if (process.env.NODE_ENV !== 'production') {\n            throw new Error(`[Table] could not find row with id ${rowId}`)\n          }\n          throw new Error()\n        }\n\n        const cell = row.getAllCellsByColumnId()[columnId]\n\n        if (!cell) {\n          if (process.env.NODE_ENV !== 'production') {\n            throw new Error(\n              `[Table] could not find cell ${columnId} in row ${rowId}`\n            )\n          }\n          throw new Error()\n        }\n\n        return cell\n      },\n    }\n  },\n}\n"],"names":["Cells","createRow","row","instance","getAllCells","memo","getAllLeafColumns","leafColumns","map","column","createCell","id","key","process","env","NODE_ENV","debug","options","debugAll","debugRows","getAllCellsByColumnId","allCells","reduce","acc","cell","columnId","createInstance","rowId","getValue","renderCell","_render","_features","forEach","feature","Object","assign","getCell","getRow","Error"],"mappings":"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"}