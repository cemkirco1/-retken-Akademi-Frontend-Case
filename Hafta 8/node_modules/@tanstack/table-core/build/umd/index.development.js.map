{"version":3,"file":"index.development.js","sources":["../../src/utils.ts","../../src/features/Columns.ts","../../src/features/Rows.ts","../../src/features/Cells.ts","../../src/features/ColumnSizing.ts","../../src/features/Expanding.ts","../../src/filterFns.ts","../../src/features/Filters.ts","../../src/aggregationFns.ts","../../src/features/Grouping.ts","../../src/features/Ordering.ts","../../src/features/Pagination.ts","../../src/features/Pinning.ts","../../src/features/RowSelection.ts","../../src/sortingFns.ts","../../src/features/Sorting.ts","../../src/features/Visibility.ts","../../src/features/Headers.ts","../../src/core.ts","../../src/createTable.ts","../../src/utils/getCoreRowModel.ts","../../src/utils/filterRowsUtils.ts","../../src/utils/getFilteredRowModel.ts","../../src/utils/getFacetedRowModel.ts","../../src/utils/getFacetedUniqueValues.ts","../../src/utils/getFacetedMinMaxValues.ts","../../src/utils/getSortedRowModel.ts","../../src/utils/getGroupedRowModel.ts","../../src/utils/getExpandedRowModel.ts","../../src/utils/getPaginationRowModel.ts"],"sourcesContent":["import { NoInfer, TableState, Updater } from './types'\n\nexport type PartialKeys<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>\nexport type RequiredKeys<T, K extends keyof T> = Omit<T, K> &\n  Required<Pick<T, K>>\nexport type Overwrite<T, U extends { [TKey in keyof T]?: any }> = Omit<\n  T,\n  keyof U\n> &\n  U\n\nexport type IfDefined<T, N> = 0 extends 1 & T ? N : T extends {} ? T : N\n\nexport function functionalUpdate<T>(updater: Updater<T>, input: T): T {\n  return typeof updater === 'function'\n    ? (updater as (input: T) => T)(input)\n    : updater\n}\n\nexport function noop() {\n  //\n}\n\nexport function makeStateUpdater(key: keyof TableState, instance: unknown) {\n  return (updater: Updater<any>) => {\n    ;(instance as any).setState(<TTableState>(old: TTableState) => {\n      return {\n        ...old,\n        [key]: functionalUpdate(updater, (old as any)[key]),\n      }\n    })\n  }\n}\n\ntype AnyFunction = (...args: any) => any\n\nexport function isFunction<T extends AnyFunction>(d: any): d is T {\n  return d instanceof Function\n}\n\nexport function flattenBy<TNode>(\n  arr: TNode[],\n  getChildren: (item: TNode) => TNode[]\n) {\n  const flat: TNode[] = []\n\n  const recurse = (subArr: TNode[]) => {\n    subArr.forEach(item => {\n      flat.push(item)\n      const children = getChildren(item)\n      if (children?.length) {\n        recurse(children)\n      }\n    })\n  }\n\n  recurse(arr)\n\n  return flat\n}\n\nexport function memo<TDeps extends readonly any[], TResult>(\n  getDeps: () => [...TDeps],\n  fn: (...args: NoInfer<[...TDeps]>) => TResult,\n  opts: {\n    key: any\n    debug?: () => any\n    onChange?: (result: TResult) => void\n  }\n): () => TResult {\n  let deps: any[] = []\n  let result: TResult | undefined\n\n  return () => {\n    let depTime: number\n    if (opts.key && opts.debug) depTime = Date.now()\n\n    const newDeps = getDeps()\n\n    const depsChanged =\n      newDeps.length !== deps.length ||\n      newDeps.some((dep: any, index: number) => deps[index] !== dep)\n\n    if (!depsChanged) {\n      return result!\n    }\n\n    deps = newDeps\n\n    let resultTime: number\n    if (opts.key && opts.debug) resultTime = Date.now()\n\n    result = fn(...newDeps)\n    opts?.onChange?.(result)\n\n    if (opts.key && opts.debug) {\n      if (opts?.debug()) {\n        const depEndTime = Math.round((Date.now() - depTime!) * 100) / 100\n        const resultEndTime = Math.round((Date.now() - resultTime!) * 100) / 100\n        const resultFpsPercentage = resultEndTime / 16\n\n        const pad = (str: number | string, num: number) => {\n          str = String(str)\n          while (str.length < num) {\n            str = ' ' + str\n          }\n          return str\n        }\n\n        console.info(\n          `%c⏱ ${pad(resultEndTime, 5)} /${pad(depEndTime, 5)} ms`,\n          `\n            font-size: .6rem;\n            font-weight: bold;\n            color: hsl(${Math.max(\n              0,\n              Math.min(120 - 120 * resultFpsPercentage, 120)\n            )}deg 100% 31%);`,\n          opts?.key\n        )\n      }\n    }\n\n    return result!\n  }\n}\n","import {\n  Cell,\n  Column,\n  Header,\n  TableGenerics,\n  TableInstance,\n  Row,\n  AccessorFn,\n  ColumnDef,\n  Renderable,\n} from '../types'\nimport { memo } from '../utils'\n\nexport type CoreColumnDefType = 'data' | 'display' | 'group'\n\nexport type CoreColumnDef<TGenerics extends TableGenerics> = {\n  id: string\n  accessorKey?: string & keyof TGenerics['Row']\n  accessorFn?: AccessorFn<TGenerics['Row']>\n  columns?: ColumnDef<TGenerics>[]\n  header?: Renderable<\n    TGenerics,\n    {\n      instance: TableInstance<TGenerics>\n      header: Header<TGenerics>\n      column: Column<TGenerics>\n    }\n  >\n  footer?: Renderable<\n    TGenerics,\n    {\n      instance: TableInstance<TGenerics>\n      header: Header<TGenerics>\n      column: Column<TGenerics>\n    }\n  >\n  cell?: Renderable<\n    TGenerics,\n    {\n      instance: TableInstance<TGenerics>\n      row: Row<TGenerics>\n      column: Column<TGenerics>\n      cell: Cell<TGenerics>\n      getValue: () => TGenerics['Value']\n    }\n  >\n  meta?: TGenerics['ColumnMeta']\n}\n\nexport type CoreColumn<TGenerics extends TableGenerics> = {\n  id: string\n  depth: number\n  accessorFn?: AccessorFn<TGenerics['Row']>\n  columnDef: ColumnDef<TGenerics>\n  columnDefType: CoreColumnDefType\n  columns: Column<TGenerics>[]\n  parent?: Column<TGenerics>\n  getFlatColumns: () => Column<TGenerics>[]\n  getLeafColumns: () => Column<TGenerics>[]\n}\n\nexport type ColumnsOptions<TGenerics extends TableGenerics> = {\n  columns: ColumnDef<TGenerics>[]\n  defaultColumn?: Partial<ColumnDef<TGenerics>>\n}\n\nexport type ColumnsInstance<TGenerics extends TableGenerics> = {\n  getDefaultColumn: () => Partial<ColumnDef<TGenerics>>\n  getColumnDefs: () => ColumnDef<TGenerics>[]\n  createColumn: (\n    columnDef: ColumnDef<TGenerics>,\n    depth: number,\n    parent?: Column<TGenerics>\n  ) => Column<TGenerics>\n  getAllColumns: () => Column<TGenerics>[]\n  getAllFlatColumns: () => Column<TGenerics>[]\n  getAllFlatColumnsById: () => Record<string, Column<TGenerics>>\n  getAllLeafColumns: () => Column<TGenerics>[]\n  getColumn: (columnId: string) => Column<TGenerics>\n}\n\n//\n\nexport const Columns = {\n  createInstance: <TGenerics extends TableGenerics>(\n    instance: TableInstance<TGenerics>\n  ): ColumnsInstance<TGenerics> => {\n    return {\n      getDefaultColumn: memo(\n        () => [instance.options.defaultColumn],\n        defaultColumn => {\n          defaultColumn = (defaultColumn ?? {}) as Partial<ColumnDef<TGenerics>>\n\n          return {\n            header: props => props.header.column.id,\n            footer: props => props.header.column.id,\n            cell: props => props.getValue().toString?.() ?? null,\n            ...instance._features.reduce((obj, feature) => {\n              return Object.assign(obj, feature.getDefaultColumn?.())\n            }, {}),\n            ...defaultColumn,\n          } as Partial<ColumnDef<TGenerics>>\n        },\n        {\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugColumns,\n          key: process.env.NODE_ENV === 'development' && 'getDefaultColumn',\n        }\n      ),\n\n      getColumnDefs: () => instance.options.columns,\n\n      createColumn: (\n        columnDef: ColumnDef<TGenerics> & { columnDefType?: CoreColumnDefType },\n        depth: number,\n        parent\n      ) => {\n        const defaultColumn = instance.getDefaultColumn()\n\n        let id =\n          columnDef.id ??\n          columnDef.accessorKey ??\n          (typeof columnDef.header === 'string' ? columnDef.header : undefined)\n\n        let accessorFn: AccessorFn<TGenerics['Row']> | undefined\n\n        if (columnDef.accessorFn) {\n          accessorFn = columnDef.accessorFn\n        } else if (columnDef.accessorKey) {\n          accessorFn = (originalRow?: TGenerics['Row']) =>\n            (originalRow as any)[columnDef.accessorKey]\n        }\n\n        if (!id) {\n          if (process.env.NODE_ENV !== 'production') {\n            throw new Error(\n              columnDef.accessorFn\n                ? `Columns require an id when using an accessorFn`\n                : `Columns require an id when using a non-string header`\n            )\n          }\n          throw new Error()\n        }\n\n        let column: CoreColumn<TGenerics> = {\n          ...defaultColumn,\n          ...columnDef,\n          id: `${id}`,\n          accessorFn,\n          parent: parent as any,\n          depth,\n          columnDef,\n          columnDefType: columnDef.columnDefType as CoreColumnDefType,\n          columns: [],\n          getFlatColumns: memo(\n            () => [true],\n            () => {\n              return [\n                column as Column<TGenerics>,\n                ...column.columns?.flatMap(d => d.getFlatColumns()),\n              ]\n            },\n            {\n              key:\n                process.env.NODE_ENV === 'production' &&\n                'column.getFlatColumns',\n              debug: () =>\n                instance.options.debugAll ?? instance.options.debugColumns,\n            }\n          ),\n          getLeafColumns: memo(\n            () => [instance._getOrderColumnsFn()],\n            orderColumns => {\n              if (column.columns?.length) {\n                let leafColumns = column.columns.flatMap(column =>\n                  column.getLeafColumns()\n                )\n\n                return orderColumns(leafColumns)\n              }\n\n              return [column as Column<TGenerics>]\n            },\n            {\n              key:\n                process.env.NODE_ENV === 'production' &&\n                'column.getLeafColumns',\n              debug: () =>\n                instance.options.debugAll ?? instance.options.debugColumns,\n            }\n          ),\n        }\n\n        column = instance._features.reduce((obj, feature) => {\n          return Object.assign(obj, feature.createColumn?.(column, instance))\n        }, column)\n\n        // Yes, we have to convert instance to uknown, because we know more than the compiler here.\n        return column as Column<TGenerics>\n      },\n\n      getAllColumns: memo(\n        () => [instance.getColumnDefs()],\n        columnDefs => {\n          const recurseColumns = (\n            columnDefs: ColumnDef<TGenerics>[],\n            parent?: Column<TGenerics>,\n            depth = 0\n          ): Column<TGenerics>[] => {\n            return columnDefs.map(columnDef => {\n              const column = instance.createColumn(columnDef, depth, parent)\n\n              column.columns = columnDef.columns\n                ? recurseColumns(columnDef.columns, column, depth + 1)\n                : []\n\n              return column\n            })\n          }\n\n          return recurseColumns(columnDefs)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getAllColumns',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugColumns,\n        }\n      ),\n\n      getAllFlatColumns: memo(\n        () => [instance.getAllColumns()],\n        allColumns => {\n          return allColumns.flatMap(column => {\n            return column.getFlatColumns()\n          })\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getAllFlatColumns',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugColumns,\n        }\n      ),\n\n      getAllFlatColumnsById: memo(\n        () => [instance.getAllFlatColumns()],\n        flatColumns => {\n          return flatColumns.reduce((acc, column) => {\n            acc[column.id] = column\n            return acc\n          }, {} as Record<string, Column<TGenerics>>)\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'development' && 'getAllFlatColumnsById',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugColumns,\n        }\n      ),\n\n      getAllLeafColumns: memo(\n        () => [instance.getAllColumns(), instance._getOrderColumnsFn()],\n        (allColumns, orderColumns) => {\n          let leafColumns = allColumns.flatMap(column =>\n            column.getLeafColumns()\n          )\n          return orderColumns(leafColumns)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getAllLeafColumns',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugColumns,\n        }\n      ),\n\n      getColumn: columnId => {\n        const column = instance.getAllFlatColumnsById()[columnId]\n\n        if (!column) {\n          if (process.env.NODE_ENV !== 'production') {\n            console.warn(`[Table] Column with id ${columnId} does not exist.`)\n          }\n          throw new Error()\n        }\n\n        return column\n      },\n    }\n  },\n}\n","import {\n  TableGenerics,\n  TableInstance,\n  Row,\n  RowModel,\n  RowValues,\n} from '../types'\nimport { flattenBy } from '../utils'\n\nexport type CoreRow<TGenerics extends TableGenerics> = {\n  id: string\n  index: number\n  original?: TGenerics['Row']\n  depth: number\n  valuesCache: Record<string, any>\n  getValue: (columnId: string) => any\n  subRows: Row<TGenerics>[]\n  getLeafRows: () => Row<TGenerics>[]\n  originalSubRows?: TGenerics['Row'][]\n}\n\nexport type RowsOptions<TGenerics extends TableGenerics> = {\n  getCoreRowModel: (\n    instance: TableInstance<TGenerics>\n  ) => () => RowModel<TGenerics>\n  getSubRows?: (\n    originalRow: TGenerics['Row'],\n    index: number\n  ) => undefined | TGenerics['Row'][]\n  getRowId?: (\n    originalRow: TGenerics['Row'],\n    index: number,\n    parent?: Row<TGenerics>\n  ) => string\n}\n\nexport type RowsInstance<TGenerics extends TableGenerics> = {\n  getRowId: (\n    _: TGenerics['Row'],\n    index: number,\n    parent?: Row<TGenerics>\n  ) => string\n  createRow: (\n    id: string,\n    original: TGenerics['Row'] | undefined,\n    rowIndex: number,\n    depth: number,\n    subRows?: Row<TGenerics>[]\n  ) => Row<TGenerics>\n  getCoreRowModel: () => RowModel<TGenerics>\n  _getCoreRowModel?: () => RowModel<TGenerics>\n  getRowModel: () => RowModel<TGenerics>\n  getRow: (id: string) => Row<TGenerics>\n}\n\n//\n\nexport const Rows = {\n  // createRow: <TGenerics extends TableGenerics>(\n  //   row: Row<TGenerics>,\n  //   instance: TableInstance<TGenerics>\n  // ): CellsRow<TGenerics> => {\n  //   return {}\n  // },\n\n  createInstance: <TGenerics extends TableGenerics>(\n    instance: TableInstance<TGenerics>\n  ): RowsInstance<TGenerics> => {\n    return {\n      getRowId: (\n        row: TGenerics['Row'],\n        index: number,\n        parent?: Row<TGenerics>\n      ) =>\n        instance.options.getRowId?.(row, index, parent) ??\n        `${parent ? [parent.id, index].join('.') : index}`,\n      createRow: (id, original, rowIndex, depth, subRows) => {\n        let row: CoreRow<TGenerics> = {\n          id,\n          index: rowIndex,\n          original,\n          depth,\n          valuesCache: {},\n          getValue: columnId => {\n            if (row.valuesCache.hasOwnProperty(columnId)) {\n              return row.valuesCache[columnId]\n            }\n\n            const column = instance.getColumn(columnId)\n\n            if (!column.accessorFn) {\n              return undefined\n            }\n\n            row.valuesCache[columnId] = column.accessorFn(\n              row.original,\n              rowIndex\n            )\n\n            return row.valuesCache[columnId]\n          },\n          subRows: subRows ?? [],\n          getLeafRows: () => flattenBy(row.subRows, d => d.subRows),\n        }\n\n        for (let i = 0; i < instance._features.length; i++) {\n          const feature = instance._features[i]\n          Object.assign(row, feature?.createRow?.(row, instance))\n        }\n\n        return row as Row<TGenerics>\n      },\n\n      getCoreRowModel: () => {\n        if (!instance._getCoreRowModel) {\n          instance._getCoreRowModel = instance.options.getCoreRowModel(instance)\n        }\n\n        return instance._getCoreRowModel()\n      },\n\n      // The final calls start at the bottom of the model,\n      // expanded rows, which then work their way up\n\n      getRowModel: () => {\n        return instance.getPaginationRowModel()\n      },\n      getRow: (id: string) => {\n        const row = instance.getRowModel().rowsById[id]\n\n        if (!row) {\n          if (process.env.NODE_ENV !== 'production') {\n            throw new Error(`getRow expected an ID, but got ${id}`)\n          }\n          throw new Error()\n        }\n\n        return row\n      },\n    }\n  },\n}\n","import {\n  Cell,\n  TableGenerics,\n  TableInstance,\n  Row,\n  Column,\n  CoreCell,\n} from '../types'\nimport { memo } from '../utils'\n\nexport type CellsRow<TGenerics extends TableGenerics> = {\n  getAllCells: () => Cell<TGenerics>[]\n  getAllCellsByColumnId: () => Record<string, Cell<TGenerics>>\n}\n\nexport type CellsInstance<TGenerics extends TableGenerics> = {\n  createCell: (\n    row: Row<TGenerics>,\n    column: Column<TGenerics>,\n    columnId: string\n  ) => Cell<TGenerics>\n  getCell: (rowId: string, columnId: string) => Cell<TGenerics>\n}\n\n//\n\nexport const Cells = {\n  createRow: <TGenerics extends TableGenerics>(\n    row: Row<TGenerics>,\n    instance: TableInstance<TGenerics>\n  ): CellsRow<TGenerics> => {\n    return {\n      getAllCells: memo(\n        () => [instance.getAllLeafColumns()],\n        leafColumns => {\n          return leafColumns.map(column => {\n            return instance.createCell(row as Row<TGenerics>, column, column.id)\n          })\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'row.getAllCells',\n          debug: () => instance.options.debugAll ?? instance.options.debugRows,\n        }\n      ),\n\n      getAllCellsByColumnId: memo(\n        () => [row.getAllCells()],\n        allCells => {\n          return allCells.reduce((acc, cell) => {\n            acc[cell.columnId] = cell\n            return acc\n          }, {} as Record<string, Cell<TGenerics>>)\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' &&\n            'row.getAllCellsByColumnId',\n          debug: () => instance.options.debugAll ?? instance.options.debugRows,\n        }\n      ),\n    }\n  },\n\n  createInstance: <TGenerics extends TableGenerics>(\n    instance: TableInstance<TGenerics>\n  ): CellsInstance<TGenerics> => {\n    return {\n      createCell: (row, column, columnId) => {\n        const cell: CoreCell<TGenerics> = {\n          id: `${row.id}_${column.id}`,\n          rowId: row.id,\n          columnId,\n          row,\n          column,\n          getValue: () => row.getValue(columnId),\n          renderCell: () =>\n            column.cell\n              ? instance._render(column.cell, {\n                  instance,\n                  column,\n                  row,\n                  cell: cell as Cell<TGenerics>,\n                  getValue: cell.getValue,\n                })\n              : null,\n        }\n\n        instance._features.forEach(feature => {\n          Object.assign(\n            cell,\n            feature.createCell?.(\n              cell as Cell<TGenerics>,\n              column,\n              row as Row<TGenerics>,\n              instance\n            )\n          )\n        }, {})\n\n        return cell as Cell<TGenerics>\n      },\n\n      getCell: (rowId: string, columnId: string) => {\n        const row = instance.getRow(rowId)\n\n        if (!row) {\n          if (process.env.NODE_ENV !== 'production') {\n            throw new Error(`[Table] could not find row with id ${rowId}`)\n          }\n          throw new Error()\n        }\n\n        const cell = row.getAllCellsByColumnId()[columnId]\n\n        if (!cell) {\n          if (process.env.NODE_ENV !== 'production') {\n            throw new Error(\n              `[Table] could not find cell ${columnId} in row ${rowId}`\n            )\n          }\n          throw new Error()\n        }\n\n        return cell\n      },\n    }\n  },\n}\n","import {\n  Column,\n  Header,\n  OnChangeFn,\n  TableGenerics,\n  TableInstance,\n  Updater,\n  TableFeature,\n} from '../types'\nimport { makeStateUpdater } from '../utils'\nimport { ColumnPinningPosition } from './Pinning'\n\n//\n\nexport type ColumnSizingTableState = {\n  columnSizing: ColumnSizingState\n  columnSizingInfo: ColumnSizingInfoState\n}\n\nexport type ColumnSizingState = Record<string, number>\n\nexport type ColumnSizingInfoState = {\n  startOffset: null | number\n  startSize: null | number\n  deltaOffset: null | number\n  deltaPercentage: null | number\n  isResizingColumn: false | string\n  columnSizingStart: [string, number][]\n}\n\nexport type ColumnResizeMode = 'onChange' | 'onEnd'\n\nexport type ColumnSizingOptions = {\n  enableColumnResizing?: boolean\n  columnResizeMode?: ColumnResizeMode\n  onColumnSizingChange?: OnChangeFn<ColumnSizingState>\n  onColumnSizingInfoChange?: OnChangeFn<ColumnSizingInfoState>\n}\n\nexport type ColumnSizingDefaultOptions = {\n  columnResizeMode: ColumnResizeMode\n  onColumnSizingChange: OnChangeFn<ColumnSizingState>\n  onColumnSizingInfoChange: OnChangeFn<ColumnSizingInfoState>\n}\n\nexport type ColumnSizingInstance<TGenerics extends TableGenerics> = {\n  setColumnSizing: (updater: Updater<ColumnSizingState>) => void\n  setColumnSizingInfo: (updater: Updater<ColumnSizingInfoState>) => void\n  resetColumnSizing: (defaultState?: boolean) => void\n  resetHeaderSizeInfo: (defaultState?: boolean) => void\n  getTotalSize: () => number\n  getLeftTotalSize: () => number\n  getCenterTotalSize: () => number\n  getRightTotalSize: () => number\n}\n\nexport type ColumnSizingColumnDef = {\n  enableResizing?: boolean\n  size?: number\n  minSize?: number\n  maxSize?: number\n}\n\nexport type ColumnSizingColumn<TGenerics extends TableGenerics> = {\n  getSize: () => number\n  getStart: (position?: ColumnPinningPosition) => number\n  getCanResize: () => boolean\n  getIsResizing: () => boolean\n  resetSize: () => void\n}\n\nexport type ColumnSizingHeader<TGenerics extends TableGenerics> = {\n  getSize: () => number\n  getStart: (position?: ColumnPinningPosition) => number\n  getResizeHandler: () => (event: unknown) => void\n}\n\n//\n\nexport const defaultColumnSizing = {\n  size: 150,\n  minSize: 20,\n  maxSize: Number.MAX_SAFE_INTEGER,\n}\n\nconst getDefaultColumnSizingInfoState = (): ColumnSizingInfoState => ({\n  startOffset: null,\n  startSize: null,\n  deltaOffset: null,\n  deltaPercentage: null,\n  isResizingColumn: false,\n  columnSizingStart: [],\n})\n\nexport const ColumnSizing: TableFeature = {\n  getDefaultColumn: (): ColumnSizingColumnDef => {\n    return defaultColumnSizing\n  },\n  getInitialState: (state): ColumnSizingTableState => {\n    return {\n      columnSizing: {},\n      columnSizingInfo: getDefaultColumnSizingInfoState(),\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TGenerics extends TableGenerics>(\n    instance: TableInstance<TGenerics>\n  ): ColumnSizingDefaultOptions => {\n    return {\n      columnResizeMode: 'onEnd',\n      onColumnSizingChange: makeStateUpdater('columnSizing', instance),\n      onColumnSizingInfoChange: makeStateUpdater('columnSizingInfo', instance),\n    }\n  },\n\n  createColumn: <TGenerics extends TableGenerics>(\n    column: Column<TGenerics>,\n    instance: TableInstance<TGenerics>\n  ): ColumnSizingColumn<TGenerics> => {\n    return {\n      getSize: () => {\n        const columnSize = instance.getState().columnSizing[column.id]\n\n        return Math.min(\n          Math.max(\n            column.minSize ?? defaultColumnSizing.minSize,\n            columnSize ?? column.size ?? defaultColumnSizing.size\n          ),\n          column.maxSize ?? defaultColumnSizing.maxSize\n        )\n      },\n      getStart: position => {\n        const columns = !position\n          ? instance.getVisibleLeafColumns()\n          : position === 'left'\n          ? instance.getLeftVisibleLeafColumns()\n          : instance.getRightVisibleLeafColumns()\n\n        const index = columns.findIndex(d => d.id === column.id)\n\n        if (index > 0) {\n          const prevSiblingColumn = columns[index - 1]!\n\n          return (\n            prevSiblingColumn.getStart(position) + prevSiblingColumn.getSize()\n          )\n        }\n\n        return 0\n      },\n      resetSize: () => {\n        instance.setColumnSizing(({ [column.id]: _, ...rest }) => {\n          return rest\n        })\n      },\n      getCanResize: () => {\n        return (\n          (column.enableResizing ?? true) &&\n          (instance.options.enableColumnResizing ?? true)\n        )\n      },\n      getIsResizing: () => {\n        return (\n          instance.getState().columnSizingInfo.isResizingColumn === column.id\n        )\n      },\n    }\n  },\n\n  createHeader: <TGenerics extends TableGenerics>(\n    header: Header<TGenerics>,\n    instance: TableInstance<TGenerics>\n  ): ColumnSizingHeader<TGenerics> => {\n    return {\n      getSize: () => {\n        let sum = 0\n\n        const recurse = (header: Header<TGenerics>) => {\n          if (header.subHeaders.length) {\n            header.subHeaders.forEach(recurse)\n          } else {\n            sum += header.column.getSize() ?? 0\n          }\n        }\n\n        recurse(header)\n\n        return sum\n      },\n      getStart: () => {\n        if (header.index > 0) {\n          const prevSiblingHeader =\n            header.headerGroup.headers[header.index - 1]!\n          return prevSiblingHeader.getStart() + prevSiblingHeader.getSize()\n        }\n\n        return 0\n      },\n      getResizeHandler: () => {\n        const column = instance.getColumn(header.column.id)\n        const canResize = column.getCanResize()\n\n        return (e: unknown) => {\n          if (!canResize) {\n            return\n          }\n\n          ;(e as any).persist?.()\n\n          if (isTouchStartEvent(e)) {\n            // lets not respond to multiple touches (e.g. 2 or 3 fingers)\n            if (e.touches && e.touches.length > 1) {\n              return\n            }\n          }\n\n          const startSize = header.getSize()\n\n          const columnSizingStart: [string, number][] = header\n            ? header\n                .getLeafHeaders()\n                .map(d => [d.column.id, d.column.getSize()])\n            : [[column.id, column.getSize()]]\n\n          const clientX = isTouchStartEvent(e)\n            ? Math.round(e.touches[0]!.clientX)\n            : (e as MouseEvent).clientX\n\n          const updateOffset = (\n            eventType: 'move' | 'end',\n            clientXPos?: number\n          ) => {\n            if (typeof clientXPos !== 'number') {\n              return\n            }\n\n            let newColumnSizing: ColumnSizingState = {}\n\n            instance.setColumnSizingInfo(old => {\n              const deltaOffset = clientXPos - (old?.startOffset ?? 0)\n              const deltaPercentage = Math.max(\n                deltaOffset / (old?.startSize ?? 0),\n                -0.999999\n              )\n\n              old.columnSizingStart.forEach(([columnId, headerSize]) => {\n                newColumnSizing[columnId] =\n                  Math.round(\n                    Math.max(headerSize + headerSize * deltaPercentage, 0) * 100\n                  ) / 100\n              })\n\n              return {\n                ...old,\n                deltaOffset,\n                deltaPercentage,\n              }\n            })\n\n            if (\n              instance.options.columnResizeMode === 'onChange' ||\n              eventType === 'end'\n            ) {\n              instance.setColumnSizing(old => ({\n                ...old,\n                ...newColumnSizing,\n              }))\n            }\n          }\n\n          const onMove = (clientXPos?: number) =>\n            updateOffset('move', clientXPos)\n\n          const onEnd = (clientXPos?: number) => {\n            updateOffset('end', clientXPos)\n\n            instance.setColumnSizingInfo(old => ({\n              ...old,\n              isResizingColumn: false,\n              startOffset: null,\n              startSize: null,\n              deltaOffset: null,\n              deltaPercentage: null,\n              columnSizingStart: [],\n            }))\n          }\n\n          const mouseEvents = {\n            moveHandler: (e: MouseEvent) => onMove(e.clientX),\n            upHandler: (e: MouseEvent) => {\n              document.removeEventListener('mousemove', mouseEvents.moveHandler)\n              document.removeEventListener('mouseup', mouseEvents.upHandler)\n              onEnd(e.clientX)\n            },\n          }\n\n          const touchEvents = {\n            moveHandler: (e: TouchEvent) => {\n              if (e.cancelable) {\n                e.preventDefault()\n                e.stopPropagation()\n              }\n              onMove(e.touches[0]!.clientX)\n              return false\n            },\n            upHandler: (e: TouchEvent) => {\n              document.removeEventListener('touchmove', touchEvents.moveHandler)\n              document.removeEventListener('touchend', touchEvents.upHandler)\n              if (e.cancelable) {\n                e.preventDefault()\n                e.stopPropagation()\n              }\n              onEnd(e.touches[0]!.clientX)\n            },\n          }\n\n          const passiveIfSupported = passiveEventSupported()\n            ? { passive: false }\n            : false\n\n          if (isTouchStartEvent(e)) {\n          } else {\n            document.addEventListener(\n              'mousemove',\n              mouseEvents.moveHandler,\n              passiveIfSupported\n            )\n            document.addEventListener(\n              'mouseup',\n              mouseEvents.upHandler,\n              passiveIfSupported\n            )\n          }\n\n          instance.setColumnSizingInfo(old => ({\n            ...old,\n            startOffset: clientX,\n            startSize,\n            deltaOffset: 0,\n            deltaPercentage: 0,\n            columnSizingStart,\n            isResizingColumn: column.id,\n          }))\n        }\n      },\n    }\n  },\n\n  createInstance: <TGenerics extends TableGenerics>(\n    instance: TableInstance<TGenerics>\n  ): ColumnSizingInstance<TGenerics> => {\n    return {\n      setColumnSizing: updater =>\n        instance.options.onColumnSizingChange?.(updater),\n      setColumnSizingInfo: updater =>\n        instance.options.onColumnSizingInfoChange?.(updater),\n      resetColumnSizing: defaultState => {\n        instance.setColumnSizing(\n          defaultState ? {} : instance.initialState.columnSizing ?? {}\n        )\n      },\n      resetHeaderSizeInfo: defaultState => {\n        instance.setColumnSizingInfo(\n          defaultState\n            ? getDefaultColumnSizingInfoState()\n            : instance.initialState.columnSizingInfo ??\n                getDefaultColumnSizingInfoState()\n        )\n      },\n      getTotalSize: () =>\n        instance.getHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n      getLeftTotalSize: () =>\n        instance.getLeftHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n      getCenterTotalSize: () =>\n        instance.getCenterHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n      getRightTotalSize: () =>\n        instance.getRightHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n    }\n  },\n}\n\nlet passiveSupported: boolean | null = null\nexport function passiveEventSupported() {\n  if (typeof passiveSupported === 'boolean') return passiveSupported\n\n  let supported = false\n  try {\n    const options = {\n      get passive() {\n        supported = true\n        return false\n      },\n    }\n\n    const noop = () => {}\n\n    window.addEventListener('test', noop, options)\n    window.removeEventListener('test', noop)\n  } catch (err) {\n    supported = false\n  }\n  passiveSupported = supported\n  return passiveSupported\n}\n\nfunction isTouchStartEvent(e: unknown): e is TouchEvent {\n  return (e as TouchEvent).type === 'touchstart'\n}\n","import { RowModel } from '..'\nimport {\n  OnChangeFn,\n  TableGenerics,\n  TableInstance,\n  Row,\n  Updater,\n  TableFeature,\n} from '../types'\nimport { makeStateUpdater } from '../utils'\nimport { Rows } from './Rows'\n\nexport type ExpandedStateList = Record<string, boolean>\nexport type ExpandedState = true | Record<string, boolean>\nexport type ExpandedTableState = {\n  expanded: ExpandedState\n}\n\nexport type ExpandedRow = {\n  toggleExpanded: (expanded?: boolean) => void\n  getIsExpanded: () => boolean\n  getCanExpand: () => boolean\n  getToggleExpandedHandler: () => () => void\n}\n\nexport type ExpandedOptions<TGenerics extends TableGenerics> = {\n  manualExpanding?: boolean\n  onExpandedChange?: OnChangeFn<ExpandedState>\n  autoResetExpanded?: boolean\n  enableExpanding?: boolean\n  getExpandedRowModel?: (\n    instance: TableInstance<TGenerics>\n  ) => () => RowModel<TGenerics>\n  expandSubRows?: boolean\n  getIsRowExpanded?: (row: Row<TGenerics>) => boolean\n  getRowCanExpand?: (row: Row<TGenerics>) => boolean\n  paginateExpandedRows?: boolean\n}\n\nexport type ExpandedInstance<TGenerics extends TableGenerics> = {\n  _autoResetExpanded: () => void\n  setExpanded: (updater: Updater<ExpandedState>) => void\n  toggleAllRowsExpanded: (expanded?: boolean) => void\n  resetExpanded: (defaultState?: boolean) => void\n  getCanSomeRowsExpand: () => boolean\n  getToggleAllRowsExpandedHandler: () => (event: unknown) => void\n  getIsSomeRowsExpanded: () => boolean\n  getIsAllRowsExpanded: () => boolean\n  getExpandedDepth: () => number\n  getExpandedRowModel: () => RowModel<TGenerics>\n  _getExpandedRowModel?: () => RowModel<TGenerics>\n  getPreExpandedRowModel: () => RowModel<TGenerics>\n}\n\n//\n\nexport const Expanding: TableFeature = {\n  getInitialState: (state): ExpandedTableState => {\n    return {\n      expanded: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TGenerics extends TableGenerics>(\n    instance: TableInstance<TGenerics>\n  ): ExpandedOptions<TGenerics> => {\n    return {\n      onExpandedChange: makeStateUpdater('expanded', instance),\n      autoResetExpanded: true,\n      expandSubRows: true,\n      paginateExpandedRows: true,\n    }\n  },\n\n  createInstance: <TGenerics extends TableGenerics>(\n    instance: TableInstance<TGenerics>\n  ): ExpandedInstance<TGenerics> => {\n    let registered = false\n    let queued = false\n\n    return {\n      _autoResetExpanded: () => {\n        if (!registered) {\n          instance._queue(() => {\n            registered = true\n          })\n          return\n        }\n\n        if (instance.options.autoResetAll === false) {\n          return\n        }\n\n        if (\n          instance.options.autoResetAll === true ||\n          instance.options.autoResetExpanded\n        ) {\n          if (queued) return\n          queued = true\n          instance._queue(() => {\n            instance.resetExpanded()\n            queued = false\n          })\n        }\n      },\n      setExpanded: updater => instance.options.onExpandedChange?.(updater),\n      toggleAllRowsExpanded: expanded => {\n        if (expanded ?? !instance.getIsAllRowsExpanded()) {\n          instance.setExpanded(true)\n        } else {\n          instance.setExpanded({})\n        }\n      },\n      resetExpanded: defaultState => {\n        instance.setExpanded(\n          defaultState ? {} : instance.initialState?.expanded ?? {}\n        )\n      },\n      getCanSomeRowsExpand: () => {\n        return instance.getRowModel().flatRows.some(row => row.getCanExpand())\n      },\n      getToggleAllRowsExpandedHandler: () => {\n        return (e: unknown) => {\n          ;(e as any).persist?.()\n          instance.toggleAllRowsExpanded()\n        }\n      },\n      getIsSomeRowsExpanded: () => {\n        const expanded = instance.getState().expanded\n        return expanded === true || Object.values(expanded).some(Boolean)\n      },\n      getIsAllRowsExpanded: () => {\n        const expanded = instance.getState().expanded\n\n        // If expanded is true, save some cycles and return true\n        if (expanded === true) {\n          return true\n        }\n\n        // If any row is not expanded, return false\n        if (instance.getRowModel().flatRows.some(row => row.getIsExpanded())) {\n          return false\n        }\n\n        // They must all be expanded :shrug:\n        return true\n      },\n      getExpandedDepth: () => {\n        let maxDepth = 0\n\n        const rowIds =\n          instance.getState().expanded === true\n            ? Object.keys(instance.getRowModel().rowsById)\n            : Object.keys(instance.getState().expanded)\n\n        rowIds.forEach(id => {\n          const splitId = id.split('.')\n          maxDepth = Math.max(maxDepth, splitId.length)\n        })\n\n        return maxDepth\n      },\n      getPreExpandedRowModel: () => instance.getGroupedRowModel(),\n      getExpandedRowModel: () => {\n        if (\n          !instance._getExpandedRowModel &&\n          instance.options.getExpandedRowModel\n        ) {\n          instance._getExpandedRowModel =\n            instance.options.getExpandedRowModel(instance)\n        }\n\n        if (\n          instance.options.manualExpanding ||\n          !instance._getExpandedRowModel\n        ) {\n          return instance.getPreExpandedRowModel()\n        }\n\n        return instance._getExpandedRowModel()\n      },\n    }\n  },\n\n  createRow: <TGenerics extends TableGenerics>(\n    row: Row<TGenerics>,\n    instance: TableInstance<TGenerics>\n  ): ExpandedRow => {\n    return {\n      toggleExpanded: expanded => {\n        instance.setExpanded(old => {\n          const exists = old === true ? true : !!old?.[row.id]\n\n          let oldExpanded: ExpandedStateList = {}\n\n          if (old === true) {\n            Object.keys(instance.getRowModel().rowsById).forEach(rowId => {\n              oldExpanded[rowId] = true\n            })\n          } else {\n            oldExpanded = old\n          }\n\n          expanded = expanded ?? !exists\n\n          if (!exists && expanded) {\n            return {\n              ...oldExpanded,\n              [row.id]: true,\n            }\n          }\n\n          if (exists && !expanded) {\n            const { [row.id]: _, ...rest } = oldExpanded\n            return rest\n          }\n\n          return old\n        })\n      },\n      getIsExpanded: () => {\n        const expanded = instance.getState().expanded\n\n        return !!(\n          instance.options.getIsRowExpanded?.(row) ??\n          (expanded === true || expanded?.[row.id])\n        )\n      },\n      getCanExpand: () => {\n        return (\n          (instance.options.getRowCanExpand?.(row) ?? true) &&\n          (instance.options.enableExpanding ?? true) &&\n          !!row.subRows?.length\n        )\n      },\n      getToggleExpandedHandler: () => {\n        const canExpand = row.getCanExpand()\n\n        return () => {\n          if (!canExpand) return\n          row.toggleExpanded()\n        }\n      },\n    }\n  },\n}\n","import { FilterFn } from './features/Filters'\n\nconst includesString: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  const search = filterValue.toLowerCase()\n  return row.getValue(columnId).toLowerCase().includes(search)\n}\n\nincludesString.autoRemove = (val: any) => testFalsey(val)\n\nconst includesStringSensitive: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  return row.getValue(columnId).includes(filterValue)\n}\n\nincludesStringSensitive.autoRemove = (val: any) => testFalsey(val)\n\nconst equalsString: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  return row.getValue(columnId).toLowerCase() === filterValue.toLowerCase()\n}\n\nequalsString.autoRemove = (val: any) => testFalsey(val)\n\nconst arrIncludes: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown\n) => {\n  return row.getValue(columnId).includes(filterValue)\n}\n\narrIncludes.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst arrIncludesAll: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown[]\n) => {\n  return !filterValue.some(val => !row.getValue(columnId).includes(val))\n}\n\narrIncludesAll.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst arrIncludesSome: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown[]\n) => {\n  return filterValue.some(val => row.getValue(columnId).includes(val))\n}\n\narrIncludesSome.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst equals: FilterFn<any> = (row, columnId: string, filterValue: unknown) => {\n  return row.getValue(columnId) === filterValue\n}\n\nequals.autoRemove = (val: any) => testFalsey(val)\n\nconst weakEquals: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown\n) => {\n  return row.getValue(columnId) == filterValue\n}\n\nweakEquals.autoRemove = (val: any) => testFalsey(val)\n\nconst inNumberRange: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: [number, number]\n) => {\n  let [min, max] = filterValue\n\n  const rowValue = row.getValue(columnId)\n  return rowValue >= min && rowValue <= max\n}\n\ninNumberRange.resolveFilterValue = (val: [any, any]) => {\n  let [unsafeMin, unsafeMax] = val\n\n  let parsedMin =\n    typeof unsafeMin !== 'number' ? parseFloat(unsafeMin as string) : unsafeMin\n  let parsedMax =\n    typeof unsafeMax !== 'number' ? parseFloat(unsafeMax as string) : unsafeMax\n\n  let min =\n    unsafeMin === null || Number.isNaN(parsedMin) ? -Infinity : parsedMin\n  let max = unsafeMax === null || Number.isNaN(parsedMax) ? Infinity : parsedMax\n\n  if (min > max) {\n    const temp = min\n    min = max\n    max = temp\n  }\n\n  return [min, max] as const\n}\n\ninNumberRange.autoRemove = (val: any) =>\n  testFalsey(val) || (testFalsey(val[0]) && testFalsey(val[1]))\n\n// Export\n\nexport const filterFns = {\n  includesString,\n  includesStringSensitive,\n  equalsString,\n  arrIncludes,\n  arrIncludesAll,\n  arrIncludesSome,\n  equals,\n  weakEquals,\n  inNumberRange,\n}\n\nexport type BuiltInFilterFn = keyof typeof filterFns\n\n// Utils\n\nfunction testFalsey(val: any) {\n  return val === undefined || val === null || val === ''\n}\n","import { RowModel } from '..'\nimport { BuiltInFilterFn, filterFns } from '../filterFns'\nimport {\n  Column,\n  OnChangeFn,\n  TableGenerics,\n  TableInstance,\n  Row,\n  Updater,\n  TableFeature,\n} from '../types'\nimport {\n  functionalUpdate,\n  isFunction,\n  makeStateUpdater,\n  memo,\n  Overwrite,\n} from '../utils'\n\nexport type FiltersTableState = {\n  columnFilters: ColumnFiltersState\n  globalFilter: any\n  // filtersProgress: number\n  // facetProgress: Record<string, number>\n}\n\nexport type ColumnFiltersState = ColumnFilter[]\n\nexport type ColumnFilter = {\n  id: string\n  value: unknown\n}\n\nexport type ResolvedColumnFilter<TGenerics extends TableGenerics> = {\n  id: string\n  resolvedValue: unknown\n  filterFn: FilterFn<TGenerics>\n}\n\nexport type FilterFn<TGenerics extends TableGenerics> = {\n  (\n    row: Row<TGenerics>,\n    columnId: string,\n    filterValue: any,\n    addMeta: (meta: TGenerics['FilterMeta']) => void\n  ): boolean\n\n  resolveFilterValue?: TransformFilterValueFn<TGenerics>\n  autoRemove?: ColumnFilterAutoRemoveTestFn<TGenerics>\n}\n\nexport type TransformFilterValueFn<TGenerics extends TableGenerics> = (\n  value: any,\n  column?: Column<TGenerics>\n) => unknown\n\nexport type ColumnFilterAutoRemoveTestFn<TGenerics extends TableGenerics> = (\n  value: any,\n  column?: Column<TGenerics>\n) => boolean\n\nexport type CustomFilterFns<TGenerics extends TableGenerics> = Record<\n  string,\n  FilterFn<TGenerics>\n>\n\nexport type FilterFnOption<TGenerics extends TableGenerics> =\n  | 'auto'\n  | BuiltInFilterFn\n  | keyof TGenerics['FilterFns']\n  | FilterFn<TGenerics>\n\nexport type FiltersColumnDef<TGenerics extends TableGenerics> = {\n  filterFn?: FilterFnOption<Overwrite<TGenerics, { Value: any }>>\n  enableColumnFilter?: boolean\n  enableGlobalFilter?: boolean\n  enableFaceting?: boolean\n}\n\nexport type FiltersColumn<TGenerics extends TableGenerics> = {\n  filterFn: FilterFnOption<Overwrite<TGenerics, { Value: any }>>\n  getAutoFilterFn: () => FilterFn<TGenerics> | undefined\n  getFilterFn: () => FilterFn<TGenerics> | undefined\n  setFilterValue: (updater: Updater<any>) => void\n  getCanFilter: () => boolean\n  getCanGlobalFilter: () => boolean\n  getFacetedRowModel: () => RowModel<TGenerics>\n  _getFacetedRowModel?: () => RowModel<TGenerics>\n  getIsFiltered: () => boolean\n  getFilterValue: () => unknown\n  getFilterIndex: () => number\n  getFacetedUniqueValues: () => Map<any, number>\n  _getFacetedUniqueValues?: () => Map<any, number>\n  getFacetedMinMaxValues: () => undefined | [number, number]\n  _getFacetedMinMaxValues?: () => undefined | [number, number]\n}\n\nexport type FiltersRow<TGenerics extends TableGenerics> = {\n  columnFilters: Record<string, boolean>\n  columnFiltersMeta: Record<string, TGenerics['FilterMeta']>\n  subRowsByFacetId: Record<string, Row<TGenerics>[]>\n}\n\nexport type FiltersOptions<TGenerics extends TableGenerics> = {\n  enableFilters?: boolean\n  manualFiltering?: boolean\n  filterFromLeafRows?: boolean\n  filterFns?: TGenerics['FilterFns']\n  getFilteredRowModel?: (\n    instance: TableInstance<TGenerics>\n  ) => () => RowModel<TGenerics>\n\n  // Column\n  onColumnFiltersChange?: OnChangeFn<ColumnFiltersState>\n  enableColumnFilters?: boolean\n\n  // Global\n  globalFilterFn?: FilterFnOption<TGenerics>\n  onGlobalFilterChange?: OnChangeFn<any>\n  enableGlobalFilter?: boolean\n  getColumnCanGlobalFilter?: (column: Column<TGenerics>) => boolean\n\n  // Faceting\n  getFacetedRowModel?: (\n    instance: TableInstance<TGenerics>,\n    columnId: string\n  ) => () => RowModel<TGenerics>\n  getFacetedUniqueValues?: (\n    instance: TableInstance<TGenerics>,\n    columnId: string\n  ) => () => Map<any, number>\n  getFacetedMinMaxValues?: (\n    instance: TableInstance<TGenerics>,\n    columnId: string\n  ) => () => undefined | [number, number]\n}\n\nexport type FiltersInstance<TGenerics extends TableGenerics> = {\n  setColumnFilters: (updater: Updater<ColumnFiltersState>) => void\n\n  resetColumnFilters: (defaultState?: boolean) => void\n\n  // Column Filters\n  getPreFilteredRowModel: () => RowModel<TGenerics>\n  getFilteredRowModel: () => RowModel<TGenerics>\n  _getFilteredRowModel?: () => RowModel<TGenerics>\n\n  // Global Filters\n  setGlobalFilter: (updater: Updater<any>) => void\n  resetGlobalFilter: (defaultState?: boolean) => void\n  getGlobalAutoFilterFn: () => FilterFn<TGenerics> | undefined\n  getGlobalFilterFn: () => FilterFn<TGenerics> | undefined\n  getGlobalFacetedRowModel: () => RowModel<TGenerics>\n  _getGlobalFacetedRowModel?: () => RowModel<TGenerics>\n  getGlobalFacetedUniqueValues: () => Map<any, number>\n  _getGlobalFacetedUniqueValues?: () => Map<any, number>\n  getGlobalFacetedMinMaxValues: () => undefined | [number, number]\n  _getGlobalFacetedMinMaxValues?: () => undefined | [number, number]\n}\n\n//\n\nexport const Filters: TableFeature = {\n  getDefaultColumn: <\n    TGenerics extends TableGenerics\n  >(): FiltersColumnDef<TGenerics> => {\n    return {\n      filterFn: 'auto',\n    }\n  },\n\n  getInitialState: (state): FiltersTableState => {\n    return {\n      columnFilters: [],\n      globalFilter: undefined,\n      // filtersProgress: 1,\n      // facetProgress: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TGenerics extends TableGenerics>(\n    instance: TableInstance<TGenerics>\n  ): FiltersOptions<TGenerics> => {\n    return {\n      onColumnFiltersChange: makeStateUpdater('columnFilters', instance),\n      onGlobalFilterChange: makeStateUpdater('globalFilter', instance),\n      filterFromLeafRows: false,\n      globalFilterFn: 'auto',\n      getColumnCanGlobalFilter: column => {\n        const value = instance\n          .getCoreRowModel()\n          .flatRows[0]?.getAllCellsByColumnId()\n          [column.id]?.getValue()\n\n        return typeof value === 'string'\n      },\n    }\n  },\n\n  createColumn: <TGenerics extends TableGenerics>(\n    column: Column<TGenerics>,\n    instance: TableInstance<TGenerics>\n  ): FiltersColumn<TGenerics> => {\n    return {\n      filterFn: column.filterFn,\n      getAutoFilterFn: () => {\n        const firstRow = instance.getCoreRowModel().flatRows[0]\n\n        const value = firstRow?.getValue(column.id)\n\n        if (typeof value === 'string') {\n          return filterFns.includesString\n        }\n\n        if (typeof value === 'number') {\n          return filterFns.inNumberRange\n        }\n\n        if (value !== null && typeof value === 'object') {\n          return filterFns.equals\n        }\n\n        if (Array.isArray(value)) {\n          return filterFns.arrIncludes\n        }\n\n        return filterFns.weakEquals\n      },\n      getFilterFn: () => {\n        const userFilterFns = instance.options.filterFns\n\n        return isFunction(column.filterFn)\n          ? column.filterFn\n          : column.filterFn === 'auto'\n          ? column.getAutoFilterFn()\n          : (userFilterFns as Record<string, any>)?.[\n              column.filterFn as string\n            ] ??\n            (filterFns[\n              column.filterFn as BuiltInFilterFn\n            ] as FilterFn<TGenerics>)\n      },\n      getCanFilter: () => {\n        return (\n          (column.enableColumnFilter ?? true) &&\n          (instance.options.enableColumnFilters ?? true) &&\n          (instance.options.enableFilters ?? true) &&\n          !!column.accessorFn\n        )\n      },\n\n      getCanGlobalFilter: () => {\n        return (\n          (column.enableGlobalFilter ?? true) &&\n          (instance.options.enableGlobalFilter ?? true) &&\n          (instance.options.enableFilters ?? true) &&\n          (instance.options.getColumnCanGlobalFilter?.(column) ?? true) &&\n          !!column.accessorFn\n        )\n      },\n\n      getIsFiltered: () => column.getFilterIndex() > -1,\n\n      getFilterValue: () =>\n        instance.getState().columnFilters?.find(d => d.id === column.id)?.value,\n\n      getFilterIndex: () =>\n        instance.getState().columnFilters?.findIndex(d => d.id === column.id) ??\n        -1,\n\n      setFilterValue: value => {\n        instance.setColumnFilters(old => {\n          const filterFn = column.getFilterFn()\n          const previousfilter = old?.find(d => d.id === column.id)\n\n          const newFilter = functionalUpdate(\n            value,\n            previousfilter ? previousfilter.value : undefined\n          )\n\n          //\n          if (\n            shouldAutoRemoveFilter(\n              filterFn as FilterFn<TGenerics>,\n              newFilter,\n              column\n            )\n          ) {\n            return old?.filter(d => d.id !== column.id) ?? []\n          }\n\n          const newFilterObj = { id: column.id, value: newFilter }\n\n          if (previousfilter) {\n            return (\n              old?.map(d => {\n                if (d.id === column.id) {\n                  return newFilterObj\n                }\n                return d\n              }) ?? []\n            )\n          }\n\n          if (old?.length) {\n            return [...old, newFilterObj]\n          }\n\n          return [newFilterObj]\n        })\n      },\n      _getFacetedRowModel:\n        instance.options.getFacetedRowModel &&\n        instance.options.getFacetedRowModel(instance, column.id),\n      getFacetedRowModel: () => {\n        if (!column._getFacetedRowModel) {\n          return instance.getPreFilteredRowModel()\n        }\n\n        return column._getFacetedRowModel()\n      },\n      _getFacetedUniqueValues:\n        instance.options.getFacetedUniqueValues &&\n        instance.options.getFacetedUniqueValues(instance, column.id),\n      getFacetedUniqueValues: () => {\n        if (!column._getFacetedUniqueValues) {\n          return new Map()\n        }\n\n        return column._getFacetedUniqueValues()\n      },\n      _getFacetedMinMaxValues:\n        instance.options.getFacetedMinMaxValues &&\n        instance.options.getFacetedMinMaxValues(instance, column.id),\n      getFacetedMinMaxValues: () => {\n        if (!column._getFacetedMinMaxValues) {\n          return undefined\n        }\n\n        return column._getFacetedMinMaxValues()\n      },\n      // () => [column.getFacetedRowModel()],\n      // facetedRowModel => getRowModelMinMaxValues(facetedRowModel, column.id),\n    }\n  },\n\n  createRow: <TGenerics extends TableGenerics>(\n    row: Row<TGenerics>,\n    instance: TableInstance<TGenerics>\n  ): FiltersRow<TGenerics> => {\n    return {\n      columnFilters: {},\n      columnFiltersMeta: {},\n      subRowsByFacetId: {},\n    }\n  },\n\n  createInstance: <TGenerics extends TableGenerics>(\n    instance: TableInstance<TGenerics>\n  ): FiltersInstance<TGenerics> => {\n    return {\n      getGlobalAutoFilterFn: () => {\n        return filterFns.includesString\n      },\n\n      getGlobalFilterFn: () => {\n        const { filterFns: userFilterFns, globalFilterFn: globalFilterFn } =\n          instance.options\n\n        return isFunction(globalFilterFn)\n          ? globalFilterFn\n          : globalFilterFn === 'auto'\n          ? instance.getGlobalAutoFilterFn()\n          : (userFilterFns as Record<string, any>)?.[\n              globalFilterFn as string\n            ] ??\n            (filterFns[\n              globalFilterFn as BuiltInFilterFn\n            ] as FilterFn<TGenerics>)\n      },\n\n      setColumnFilters: (updater: Updater<ColumnFiltersState>) => {\n        const leafColumns = instance.getAllLeafColumns()\n\n        const updateFn = (old: ColumnFiltersState) => {\n          return functionalUpdate(updater, old)?.filter(filter => {\n            const column = leafColumns.find(d => d.id === filter.id)\n\n            if (column) {\n              const filterFn = column.getFilterFn()\n\n              if (shouldAutoRemoveFilter(filterFn, filter.value, column)) {\n                return false\n              }\n            }\n\n            return true\n          })\n        }\n\n        instance.options.onColumnFiltersChange?.(updateFn)\n      },\n\n      setGlobalFilter: updater => {\n        instance.options.onGlobalFilterChange?.(updater)\n      },\n\n      resetGlobalFilter: defaultState => {\n        instance.setGlobalFilter(\n          defaultState ? undefined : instance.initialState.globalFilter\n        )\n      },\n\n      resetColumnFilters: defaultState => {\n        instance.setColumnFilters(\n          defaultState ? [] : instance.initialState?.columnFilters ?? []\n        )\n      },\n\n      getPreFilteredRowModel: () => instance.getCoreRowModel(),\n      _getFilteredRowModel:\n        instance.options.getFilteredRowModel &&\n        instance.options.getFilteredRowModel(instance),\n      getFilteredRowModel: () => {\n        if (\n          instance.options.manualFiltering ||\n          !instance._getFilteredRowModel\n        ) {\n          return instance.getPreFilteredRowModel()\n        }\n\n        return instance._getFilteredRowModel()\n      },\n\n      _getGlobalFacetedRowModel:\n        instance.options.getFacetedRowModel &&\n        instance.options.getFacetedRowModel(instance, '__global__'),\n\n      getGlobalFacetedRowModel: () => {\n        if (\n          instance.options.manualFiltering ||\n          !instance._getGlobalFacetedRowModel\n        ) {\n          return instance.getPreFilteredRowModel()\n        }\n\n        return instance._getGlobalFacetedRowModel()\n      },\n\n      _getGlobalFacetedUniqueValues:\n        instance.options.getFacetedUniqueValues &&\n        instance.options.getFacetedUniqueValues(instance, '__global__'),\n      getGlobalFacetedUniqueValues: () => {\n        if (!instance._getGlobalFacetedUniqueValues) {\n          return new Map()\n        }\n\n        return instance._getGlobalFacetedUniqueValues()\n      },\n\n      _getGlobalFacetedMinMaxValues:\n        instance.options.getFacetedMinMaxValues &&\n        instance.options.getFacetedMinMaxValues(instance, '__global__'),\n      getGlobalFacetedMinMaxValues: () => {\n        if (!instance._getGlobalFacetedMinMaxValues) {\n          return\n        }\n\n        return instance._getGlobalFacetedMinMaxValues()\n      },\n    }\n  },\n}\n\nexport function shouldAutoRemoveFilter<TGenerics extends TableGenerics>(\n  filterFn?: FilterFn<TGenerics>,\n  value?: any,\n  column?: Column<TGenerics>\n) {\n  return (\n    (filterFn && filterFn.autoRemove\n      ? filterFn.autoRemove(value, column)\n      : false) ||\n    typeof value === 'undefined' ||\n    (typeof value === 'string' && !value)\n  )\n}\n","export const aggregationFns = {\n  sum,\n  min,\n  max,\n  extent,\n  mean,\n  median,\n  unique,\n  uniqueCount,\n  count,\n}\n\nexport type BuiltInAggregationFn = keyof typeof aggregationFns\n\nfunction sum(_getLeafValues: () => unknown[], getChildValues: () => unknown[]) {\n  // It's faster to just add the aggregations together instead of\n  // process leaf nodes individually\n  return getChildValues().reduce(\n    (sum: number, next: unknown) => sum + (typeof next === 'number' ? next : 0),\n    0\n  )\n}\n\nfunction min(_getLeafValues: () => unknown[], getChildValues: () => unknown[]) {\n  let min: number | undefined\n\n  for (const value of getChildValues() as number[]) {\n    if (\n      value != null &&\n      (min! > value || (min === undefined && value >= value))\n    ) {\n      min = value\n    }\n  }\n\n  return min\n}\n\nfunction max(_getLeafValues: () => unknown[], getChildValues: () => unknown[]) {\n  let max: number | undefined\n\n  for (const value of getChildValues() as number[]) {\n    if (\n      value != null &&\n      (max! < value || (max === undefined && value >= value))\n    ) {\n      max = value\n    }\n  }\n\n  return max\n}\n\nfunction extent(\n  _getLeafValues: () => unknown[],\n  getChildValues: () => unknown[]\n) {\n  let min: number | undefined\n  let max: number | undefined\n\n  for (const value of getChildValues() as number[]) {\n    if (value != null) {\n      if (min === undefined) {\n        if (value >= value) min = max = value\n      } else {\n        if (min > value) min = value\n        if (max! < value) max = value\n      }\n    }\n  }\n\n  return [min, max]\n}\n\nexport function mean(getLeafValues: () => unknown[]) {\n  let count = 0\n  let sum = 0\n\n  for (let value of getLeafValues() as number[]) {\n    if (value != null && (value = +value) >= value) {\n      ++count, (sum += value)\n    }\n  }\n\n  if (count) return sum / count\n\n  return\n}\n\nfunction median(getLeafValues: () => unknown[]) {\n  const leafValues = getLeafValues()\n  if (!leafValues.length) {\n    return\n  }\n\n  let min = 0\n  let max = 0\n\n  leafValues.forEach(value => {\n    if (typeof value === 'number') {\n      min = Math.min(min, value)\n      max = Math.max(max, value)\n    }\n  })\n\n  return (min + max) / 2\n}\n\nfunction unique<T>(getLeafValues: () => T[]) {\n  return Array.from(new Set(getLeafValues()).values())\n}\n\nfunction uniqueCount(getLeafValues: () => unknown[]) {\n  return new Set(getLeafValues()).size\n}\n\nfunction count(getLeafValues: () => unknown[]) {\n  return getLeafValues().length\n}\n","import { RowModel } from '..'\nimport { BuiltInAggregationFn, aggregationFns } from '../aggregationFns'\nimport {\n  Cell,\n  Column,\n  OnChangeFn,\n  TableInstance,\n  Row,\n  Updater,\n  Renderable,\n  TableGenerics,\n  TableFeature,\n} from '../types'\nimport { isFunction, makeStateUpdater, Overwrite } from '../utils'\n\nexport type GroupingState = string[]\n\nexport type AggregationFn<TGenerics extends TableGenerics> = (\n  getLeafValues: () => TGenerics['Value'][],\n  getChildValues: () => TGenerics['Value'][]\n) => any\n\nexport type CustomAggregationFns<TGenerics extends TableGenerics> = Record<\n  string,\n  AggregationFn<TGenerics>\n>\n\nexport type AggregationFnOption<TGenerics extends TableGenerics> =\n  | 'auto'\n  | BuiltInAggregationFn\n  | keyof TGenerics['AggregationFns']\n  | AggregationFn<TGenerics>\n\nexport type GroupingTableState = {\n  grouping: GroupingState\n}\n\nexport type GroupingColumnDef<TGenerics extends TableGenerics> = {\n  aggregationFn?: AggregationFnOption<Overwrite<TGenerics, { Value: any }>>\n  aggregateValue?: (columnValue: unknown) => any\n  aggregatedCell?: Renderable<\n    TGenerics,\n    {\n      instance: TableInstance<TGenerics>\n      row: Row<TGenerics>\n      column: Column<TGenerics>\n      cell: Cell<TGenerics>\n      getValue: () => TGenerics['Value']\n    }\n  >\n  enableGrouping?: boolean\n}\n\nexport type GroupingColumn<TGenerics extends TableGenerics> = {\n  aggregationFn?: AggregationFnOption<Overwrite<TGenerics, { Value: any }>>\n  getCanGroup: () => boolean\n  getIsGrouped: () => boolean\n  getGroupedIndex: () => number\n  toggleGrouping: () => void\n  getToggleGroupingHandler: () => () => void\n  getColumnAutoAggregationFn: () => AggregationFn<TGenerics> | undefined\n  getColumnAggregationFn: () => AggregationFn<TGenerics> | undefined\n}\n\nexport type GroupingRow = {\n  groupingColumnId?: string\n  groupingValue?: any\n  getIsGrouped: () => boolean\n  groupingValuesCache: Record<string, any>\n}\n\nexport type GroupingCell<TGenerics extends TableGenerics> = {\n  getIsGrouped: () => boolean\n  getIsPlaceholder: () => boolean\n  getIsAggregated: () => boolean\n  renderAggregatedCell: () => string | null | TGenerics['Rendered']\n}\n\nexport type ColumnDefaultOptions = {\n  // Column\n  onGroupingChange: OnChangeFn<GroupingState>\n  enableGrouping: boolean\n}\n\nexport type GroupingOptions<TGenerics extends TableGenerics> = {\n  manualGrouping?: boolean\n  aggregationFns?: TGenerics['AggregationFns']\n  onGroupingChange?: OnChangeFn<GroupingState>\n  enableGrouping?: boolean\n  enableGroupingRemoval?: boolean\n  getGroupedRowModel?: (\n    instance: TableInstance<TGenerics>\n  ) => () => RowModel<TGenerics>\n\n  groupedColumnMode?: false | 'reorder' | 'remove'\n}\n\nexport type GroupingColumnMode = false | 'reorder' | 'remove'\n\nexport type GroupingInstance<TGenerics extends TableGenerics> = {\n  setGrouping: (updater: Updater<GroupingState>) => void\n  resetGrouping: (defaultState?: boolean) => void\n  getPreGroupedRowModel: () => RowModel<TGenerics>\n  getGroupedRowModel: () => RowModel<TGenerics>\n  _getGroupedRowModel?: () => RowModel<TGenerics>\n}\n\n//\n\nexport const Grouping: TableFeature = {\n  getDefaultColumn: <\n    TGenerics extends TableGenerics\n  >(): GroupingColumnDef<TGenerics> => {\n    return {\n      aggregationFn: 'auto',\n    }\n  },\n\n  getInitialState: (state): GroupingTableState => {\n    return {\n      grouping: [],\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TGenerics extends TableGenerics>(\n    instance: TableInstance<TGenerics>\n  ): GroupingOptions<TGenerics> => {\n    return {\n      onGroupingChange: makeStateUpdater('grouping', instance),\n      groupedColumnMode: 'reorder',\n    }\n  },\n\n  createColumn: <TGenerics extends TableGenerics>(\n    column: Column<TGenerics>,\n    instance: TableInstance<TGenerics>\n  ): GroupingColumn<TGenerics> => {\n    return {\n      toggleGrouping: () => {\n        instance.setGrouping(old => {\n          // Find any existing grouping for this column\n          if (old?.includes(column.id)) {\n            return old.filter(d => d !== column.id)\n          }\n\n          return [...(old ?? []), column.id]\n        })\n      },\n\n      getCanGroup: () => {\n        return (\n          column.enableGrouping ??\n          true ??\n          instance.options.enableGrouping ??\n          true ??\n          !!column.accessorFn\n        )\n      },\n\n      getIsGrouped: () => {\n        return instance.getState().grouping?.includes(column.id)\n      },\n\n      getGroupedIndex: () => instance.getState().grouping?.indexOf(column.id),\n\n      getToggleGroupingHandler: () => {\n        const canGroup = column.getCanGroup()\n\n        return () => {\n          if (!canGroup) return\n          column.toggleGrouping()\n        }\n      },\n      getColumnAutoAggregationFn: () => {\n        const firstRow = instance.getCoreRowModel().flatRows[0]\n\n        const value = firstRow?.getValue(column.id)\n\n        if (typeof value === 'number') {\n          return aggregationFns.sum\n        }\n\n        if (Object.prototype.toString.call(value) === '[object Date]') {\n          return aggregationFns.extent\n        }\n\n        return aggregationFns.count\n      },\n      getColumnAggregationFn: () => {\n        const userAggregationFns = instance.options.aggregationFns\n\n        if (!column) {\n          throw new Error()\n        }\n\n        return isFunction(column.aggregationFn)\n          ? column.aggregationFn\n          : column.aggregationFn === 'auto'\n          ? column.getColumnAutoAggregationFn()\n          : (userAggregationFns as Record<string, any>)?.[\n              column.aggregationFn as string\n            ] ??\n            (aggregationFns[\n              column.aggregationFn as BuiltInAggregationFn\n            ] as AggregationFn<TGenerics>)\n      },\n    }\n  },\n\n  createInstance: <TGenerics extends TableGenerics>(\n    instance: TableInstance<TGenerics>\n  ): GroupingInstance<TGenerics> => {\n    return {\n      setGrouping: updater => instance.options.onGroupingChange?.(updater),\n\n      resetGrouping: defaultState => {\n        instance.setGrouping(\n          defaultState ? [] : instance.initialState?.grouping ?? []\n        )\n      },\n\n      getPreGroupedRowModel: () => instance.getSortedRowModel(),\n      getGroupedRowModel: () => {\n        if (\n          !instance._getGroupedRowModel &&\n          instance.options.getGroupedRowModel\n        ) {\n          instance._getGroupedRowModel =\n            instance.options.getGroupedRowModel(instance)\n        }\n\n        if (instance.options.manualGrouping || !instance._getGroupedRowModel) {\n          return instance.getPreGroupedRowModel()\n        }\n\n        return instance._getGroupedRowModel()\n      },\n    }\n  },\n\n  createRow: <TGenerics extends TableGenerics>(\n    row: Row<TGenerics>,\n    instance: TableInstance<TGenerics>\n  ): GroupingRow => {\n    return {\n      getIsGrouped: () => !!row.groupingColumnId,\n      groupingValuesCache: {},\n    }\n  },\n\n  createCell: <TGenerics extends TableGenerics>(\n    cell: Cell<TGenerics>,\n    column: Column<TGenerics>,\n    row: Row<TGenerics>,\n    instance: TableInstance<TGenerics>\n  ): GroupingCell<TGenerics> => {\n    return {\n      getIsGrouped: () =>\n        column.getIsGrouped() && column.id === row.groupingColumnId,\n      getIsPlaceholder: () => !cell.getIsGrouped() && column.getIsGrouped(),\n      getIsAggregated: () =>\n        !cell.getIsGrouped() &&\n        !cell.getIsPlaceholder() &&\n        row.subRows?.length > 1,\n      renderAggregatedCell: () => {\n        const template = column.aggregatedCell ?? column.cell\n\n        return template\n          ? instance._render(template, {\n              instance,\n              column,\n              row,\n              cell,\n              getValue: cell.getValue,\n            })\n          : null\n      },\n    }\n  },\n}\n\nexport function orderColumns<TGenerics extends TableGenerics>(\n  leafColumns: Column<TGenerics>[],\n  grouping: string[],\n  groupedColumnMode?: GroupingColumnMode\n) {\n  if (!grouping?.length || !groupedColumnMode) {\n    return leafColumns\n  }\n\n  const nonGroupingColumns = leafColumns.filter(\n    col => !grouping.includes(col.id)\n  )\n\n  if (groupedColumnMode === 'remove') {\n    return nonGroupingColumns\n  }\n\n  const groupingColumns = grouping\n    .map(g => leafColumns.find(col => col.id === g)!)\n    .filter(Boolean)\n\n  return [...groupingColumns, ...nonGroupingColumns]\n}\n","import { makeStateUpdater, memo } from '../utils'\n\nimport {\n  TableInstance,\n  OnChangeFn,\n  Updater,\n  Column,\n  TableGenerics,\n  TableFeature,\n} from '../types'\n\nimport { Grouping, orderColumns } from './Grouping'\n\nexport type ColumnOrderTableState = {\n  columnOrder: ColumnOrderState\n}\n\nexport type ColumnOrderState = string[]\n\nexport type ColumnOrderOptions = {\n  onColumnOrderChange?: OnChangeFn<ColumnOrderState>\n}\n\nexport type ColumnOrderDefaultOptions = {\n  onColumnOrderChange: OnChangeFn<ColumnOrderState>\n}\n\nexport type ColumnOrderInstance<TGenerics extends TableGenerics> = {\n  setColumnOrder: (updater: Updater<ColumnOrderState>) => void\n  resetColumnOrder: (defaultState?: boolean) => void\n  _getOrderColumnsFn: () => (\n    columns: Column<TGenerics>[]\n  ) => Column<TGenerics>[]\n}\n\n//\n\nexport const Ordering: TableFeature = {\n  getInitialState: (state): ColumnOrderTableState => {\n    return {\n      columnOrder: [],\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TGenerics extends TableGenerics>(\n    instance: TableInstance<TGenerics>\n  ): ColumnOrderDefaultOptions => {\n    return {\n      onColumnOrderChange: makeStateUpdater('columnOrder', instance),\n    }\n  },\n\n  createInstance: <TGenerics extends TableGenerics>(\n    instance: TableInstance<TGenerics>\n  ): ColumnOrderInstance<TGenerics> => {\n    return {\n      setColumnOrder: updater =>\n        instance.options.onColumnOrderChange?.(updater),\n      resetColumnOrder: defaultState => {\n        instance.setColumnOrder(\n          defaultState ? [] : instance.initialState.columnOrder ?? []\n        )\n      },\n      _getOrderColumnsFn: memo(\n        () => [\n          instance.getState().columnOrder,\n          instance.getState().grouping,\n          instance.options.groupedColumnMode,\n        ],\n        (columnOrder, grouping, groupedColumnMode) => columns => {\n          // Sort grouped columns to the start of the column list\n          // before the headers are built\n          let orderedColumns: Column<TGenerics>[] = []\n\n          // If there is no order, return the normal columns\n          if (!columnOrder?.length) {\n            orderedColumns = columns\n          } else {\n            const columnOrderCopy = [...columnOrder]\n\n            // If there is an order, make a copy of the columns\n            const columnsCopy = [...columns]\n\n            // And make a new ordered array of the columns\n\n            // Loop over the columns and place them in order into the new array\n            while (columnsCopy.length && columnOrderCopy.length) {\n              const targetColumnId = columnOrderCopy.shift()\n              const foundIndex = columnsCopy.findIndex(\n                d => d.id === targetColumnId\n              )\n              if (foundIndex > -1) {\n                orderedColumns.push(columnsCopy.splice(foundIndex, 1)[0]!)\n              }\n            }\n\n            // If there are any columns left, add them to the end\n            orderedColumns = [...orderedColumns, ...columnsCopy]\n          }\n\n          return orderColumns(orderedColumns, grouping, groupedColumnMode)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getOrderColumnsFn',\n          // debug: () => instance.options.debugAll ?? instance.options.debugTable,\n        }\n      ),\n    }\n  },\n}\n","import {\n  OnChangeFn,\n  TableGenerics,\n  TableInstance,\n  RowModel,\n  Updater,\n  TableFeature,\n} from '../types'\nimport { functionalUpdate, makeStateUpdater, memo } from '../utils'\n\nexport type PaginationState = {\n  pageIndex: number\n  pageSize: number\n  pageCount?: number\n}\n\nexport type PaginationTableState = {\n  pagination: PaginationState\n}\n\nexport type PaginationInitialTableState = {\n  pagination?: Partial<PaginationState>\n}\n\nexport type PaginationOptions<TGenerics extends TableGenerics> = {\n  manualPagination?: boolean\n  onPaginationChange?: OnChangeFn<PaginationState>\n  autoResetPageIndex?: boolean\n  getPaginationRowModel?: (\n    instance: TableInstance<TGenerics>\n  ) => () => RowModel<TGenerics>\n}\n\nexport type PaginationDefaultOptions = {\n  onPaginationChange: OnChangeFn<PaginationState>\n}\n\nexport type PaginationInstance<TGenerics extends TableGenerics> = {\n  _autoResetPageIndex: () => void\n  setPagination: (updater: Updater<PaginationState>) => void\n  resetPagination: (defaultState?: boolean) => void\n  setPageIndex: (updater: Updater<number>) => void\n  resetPageIndex: (defaultState?: boolean) => void\n  setPageSize: (updater: Updater<number>) => void\n  resetPageSize: (defaultState?: boolean) => void\n  setPageCount: (updater: Updater<number>) => void\n  getPageOptions: () => number[]\n  getCanPreviousPage: () => boolean\n  getCanNextPage: () => boolean\n  previousPage: () => void\n  nextPage: () => void\n  getPrePaginationRowModel: () => RowModel<TGenerics>\n  getPaginationRowModel: () => RowModel<TGenerics>\n  _getPaginationRowModel?: () => RowModel<TGenerics>\n  getPageCount: () => number\n}\n\n//\n\nconst defaultPageIndex = 0\nconst defaultPageSize = 10\n\nconst getDefaultPaginationState = (): PaginationState => ({\n  pageIndex: defaultPageIndex,\n  pageSize: defaultPageSize,\n})\n\nexport const Pagination: TableFeature = {\n  getInitialState: (state): PaginationTableState => {\n    return {\n      ...state,\n      pagination: {\n        ...getDefaultPaginationState(),\n        ...state?.pagination,\n      },\n    }\n  },\n\n  getDefaultOptions: <TGenerics extends TableGenerics>(\n    instance: TableInstance<TGenerics>\n  ): PaginationDefaultOptions => {\n    return {\n      onPaginationChange: makeStateUpdater('pagination', instance),\n    }\n  },\n\n  createInstance: <TGenerics extends TableGenerics>(\n    instance: TableInstance<TGenerics>\n  ): PaginationInstance<TGenerics> => {\n    let registered = false\n    let queued = false\n\n    return {\n      _autoResetPageIndex: () => {\n        if (!registered) {\n          instance._queue(() => {\n            registered = true\n          })\n          return\n        }\n\n        if (\n          instance.options.autoResetAll ??\n          instance.options.autoResetPageIndex ??\n          !instance.options.manualPagination\n        ) {\n          if (queued) return\n          queued = true\n          instance._queue(() => {\n            instance.resetPageIndex()\n            queued = false\n          })\n        }\n      },\n      setPagination: updater => {\n        const safeUpdater: Updater<PaginationState> = old => {\n          let newState = functionalUpdate(updater, old)\n\n          return newState\n        }\n\n        return instance.options.onPaginationChange?.(safeUpdater)\n      },\n      resetPagination: defaultState => {\n        instance.setPagination(\n          defaultState\n            ? getDefaultPaginationState()\n            : instance.initialState.pagination ?? getDefaultPaginationState()\n        )\n      },\n      setPageIndex: updater => {\n        instance.setPagination(old => {\n          let pageIndex = functionalUpdate(updater, old.pageIndex)\n\n          const maxPageIndex =\n            typeof old.pageCount !== 'undefined'\n              ? old.pageCount - 1\n              : Number.MAX_SAFE_INTEGER\n\n          pageIndex = Math.min(Math.max(0, pageIndex), maxPageIndex)\n\n          return {\n            ...old,\n            pageIndex,\n          }\n        })\n      },\n      resetPageIndex: defaultState => {\n        instance.setPageIndex(\n          defaultState\n            ? defaultPageIndex\n            : instance.initialState?.pagination?.pageIndex ?? defaultPageIndex\n        )\n      },\n      resetPageSize: defaultState => {\n        instance.setPageSize(\n          defaultState\n            ? defaultPageSize\n            : instance.initialState?.pagination?.pageSize ?? defaultPageSize\n        )\n      },\n      setPageSize: updater => {\n        instance.setPagination(old => {\n          const pageSize = Math.max(1, functionalUpdate(updater, old.pageSize))\n          const topRowIndex = old.pageSize * old.pageIndex!\n          const pageIndex = Math.floor(topRowIndex / pageSize)\n\n          return {\n            ...old,\n            pageIndex,\n            pageSize,\n          }\n        })\n      },\n      setPageCount: updater =>\n        instance.setPagination(old => {\n          let newPageCount = functionalUpdate(updater, old.pageCount ?? -1)\n\n          if (typeof newPageCount === 'number') {\n            newPageCount = Math.max(-1, newPageCount)\n          }\n\n          return {\n            ...old,\n            pageCount: newPageCount,\n          }\n        }),\n\n      getPageOptions: memo(\n        () => [\n          instance.getState().pagination.pageSize,\n          instance.getState().pagination.pageCount,\n        ],\n        (pageSize, pageCount) => {\n          let pageOptions: number[] = []\n          if (pageCount && pageCount > 0) {\n            pageOptions = [...new Array(pageCount)].fill(null).map((_, i) => i)\n          }\n          return pageOptions\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getPageOptions',\n          debug: () => instance.options.debugAll ?? instance.options.debugTable,\n        }\n      ),\n\n      getCanPreviousPage: () => instance.getState().pagination.pageIndex > 0,\n\n      getCanNextPage: () => {\n        const { pageIndex } = instance.getState().pagination\n\n        const pageCount = instance.getPageCount()\n\n        if (pageCount === -1) {\n          return true\n        }\n\n        if (pageCount === 0) {\n          return false\n        }\n\n        return pageIndex < pageCount - 1\n      },\n\n      previousPage: () => {\n        return instance.setPageIndex(old => old - 1)\n      },\n\n      nextPage: () => {\n        return instance.setPageIndex(old => {\n          return old + 1\n        })\n      },\n\n      getPrePaginationRowModel: () => instance.getExpandedRowModel(),\n      getPaginationRowModel: () => {\n        if (\n          !instance._getPaginationRowModel &&\n          instance.options.getPaginationRowModel\n        ) {\n          instance._getPaginationRowModel =\n            instance.options.getPaginationRowModel(instance)\n        }\n\n        if (\n          instance.options.manualPagination ||\n          !instance._getPaginationRowModel\n        ) {\n          return instance.getPrePaginationRowModel()\n        }\n\n        return instance._getPaginationRowModel()\n      },\n\n      getPageCount: () => {\n        const { pageCount } = instance.getState().pagination\n\n        if (typeof pageCount !== 'undefined') {\n          return pageCount\n        }\n\n        return Math.ceil(\n          instance.getPrePaginationRowModel().rows.length /\n            instance.getState().pagination.pageSize\n        )\n      },\n    }\n  },\n}\n","import {\n  OnChangeFn,\n  Updater,\n  TableInstance,\n  Column,\n  TableGenerics,\n  Row,\n  Cell,\n  TableFeature,\n} from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type ColumnPinningPosition = false | 'left' | 'right'\n\nexport type ColumnPinningState = {\n  left?: string[]\n  right?: string[]\n}\n\nexport type ColumnPinningTableState = {\n  columnPinning: ColumnPinningState\n}\n\nexport type ColumnPinningOptions = {\n  onColumnPinningChange?: OnChangeFn<ColumnPinningState>\n  enablePinning?: boolean\n}\n\nexport type ColumnPinningDefaultOptions = {\n  onColumnPinningChange: OnChangeFn<ColumnPinningState>\n}\n\nexport type ColumnPinningColumnDef = {\n  enablePinning?: boolean\n}\n\nexport type ColumnPinningColumn = {\n  getCanPin: () => boolean\n  getPinnedIndex: () => number\n  getIsPinned: () => ColumnPinningPosition\n  pin: (position: ColumnPinningPosition) => void\n}\n\nexport type ColumnPinningRow<TGenerics extends TableGenerics> = {\n  getLeftVisibleCells: () => Cell<TGenerics>[]\n  getCenterVisibleCells: () => Cell<TGenerics>[]\n  getRightVisibleCells: () => Cell<TGenerics>[]\n}\n\nexport type ColumnPinningInstance<TGenerics extends TableGenerics> = {\n  setColumnPinning: (updater: Updater<ColumnPinningState>) => void\n  resetColumnPinning: (defaultState?: boolean) => void\n  getIsSomeColumnsPinned: () => boolean\n  getLeftLeafColumns: () => Column<TGenerics>[]\n  getRightLeafColumns: () => Column<TGenerics>[]\n  getCenterLeafColumns: () => Column<TGenerics>[]\n}\n\n//\n\nconst getDefaultPinningState = (): ColumnPinningState => ({\n  left: [],\n  right: [],\n})\n\nexport const Pinning: TableFeature = {\n  getInitialState: (state): ColumnPinningTableState => {\n    return {\n      columnPinning: getDefaultPinningState(),\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TGenerics extends TableGenerics>(\n    instance: TableInstance<TGenerics>\n  ): ColumnPinningDefaultOptions => {\n    return {\n      onColumnPinningChange: makeStateUpdater('columnPinning', instance),\n    }\n  },\n\n  createColumn: <TGenerics extends TableGenerics>(\n    column: Column<TGenerics>,\n    instance: TableInstance<TGenerics>\n  ): ColumnPinningColumn => {\n    return {\n      pin: position => {\n        const columnIds = column\n          .getLeafColumns()\n          .map(d => d.id)\n          .filter(Boolean) as string[]\n\n        instance.setColumnPinning(old => {\n          if (position === 'right') {\n            return {\n              left: (old?.left ?? []).filter(d => !columnIds?.includes(d)),\n              right: [\n                ...(old?.right ?? []).filter(d => !columnIds?.includes(d)),\n                ...columnIds,\n              ],\n            }\n          }\n\n          if (position === 'left') {\n            return {\n              left: [\n                ...(old?.left ?? []).filter(d => !columnIds?.includes(d)),\n                ...columnIds,\n              ],\n              right: (old?.right ?? []).filter(d => !columnIds?.includes(d)),\n            }\n          }\n\n          return {\n            left: (old?.left ?? []).filter(d => !columnIds?.includes(d)),\n            right: (old?.right ?? []).filter(d => !columnIds?.includes(d)),\n          }\n        })\n      },\n\n      getCanPin: () => {\n        const leafColumns = column.getLeafColumns()\n\n        return leafColumns.some(\n          d =>\n            (d.enablePinning ?? true) &&\n            (instance.options.enablePinning ?? true)\n        )\n      },\n\n      getIsPinned: () => {\n        const leafColumnIds = column.getLeafColumns().map(d => d.id)\n\n        const { left, right } = instance.getState().columnPinning\n\n        const isLeft = leafColumnIds.some(d => left?.includes(d))\n        const isRight = leafColumnIds.some(d => right?.includes(d))\n\n        return isLeft ? 'left' : isRight ? 'right' : false\n      },\n\n      getPinnedIndex: () => {\n        const position = column.getIsPinned()\n\n        return position\n          ? instance.getState().columnPinning?.[position]?.indexOf(column.id) ??\n              -1\n          : 0\n      },\n    }\n  },\n\n  createRow: <TGenerics extends TableGenerics>(\n    row: Row<TGenerics>,\n    instance: TableInstance<TGenerics>\n  ): ColumnPinningRow<TGenerics> => {\n    return {\n      getCenterVisibleCells: memo(\n        () => [\n          row._getAllVisibleCells(),\n          instance.getState().columnPinning.left,\n          instance.getState().columnPinning.right,\n        ],\n        (allCells, left, right) => {\n          const leftAndRight: string[] = [...(left ?? []), ...(right ?? [])]\n\n          return allCells.filter(d => !leftAndRight.includes(d.columnId))\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' &&\n            'row.getCenterVisibleCells',\n          debug: () => instance.options.debugAll ?? instance.options.debugRows,\n        }\n      ),\n      getLeftVisibleCells: memo(\n        () => [\n          row._getAllVisibleCells(),\n          instance.getState().columnPinning.left,\n          ,\n        ],\n        (allCells, left) => {\n          const cells = (left ?? [])\n            .map(columnId => allCells.find(cell => cell.columnId === columnId)!)\n            .filter(Boolean)\n            .map(d => ({ ...d, position: 'left' } as Cell<TGenerics>))\n\n          return cells\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' && 'row.getLeftVisibleCells',\n          debug: () => instance.options.debugAll ?? instance.options.debugRows,\n        }\n      ),\n      getRightVisibleCells: memo(\n        () => [\n          row._getAllVisibleCells(),\n          instance.getState().columnPinning.right,\n        ],\n        (allCells, right) => {\n          const cells = (right ?? [])\n            .map(columnId => allCells.find(cell => cell.columnId === columnId)!)\n            .filter(Boolean)\n            .map(d => ({ ...d, position: 'left' } as Cell<TGenerics>))\n\n          return cells\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' && 'row.getRightVisibleCells',\n          debug: () => instance.options.debugAll ?? instance.options.debugRows,\n        }\n      ),\n    }\n  },\n\n  createInstance: <TGenerics extends TableGenerics>(\n    instance: TableInstance<TGenerics>\n  ): ColumnPinningInstance<TGenerics> => {\n    return {\n      setColumnPinning: updater =>\n        instance.options.onColumnPinningChange?.(updater),\n\n      resetColumnPinning: defaultState =>\n        instance.setColumnPinning(\n          defaultState\n            ? getDefaultPinningState()\n            : instance.initialState?.columnPinning ?? getDefaultPinningState()\n        ),\n\n      getIsSomeColumnsPinned: () => {\n        const { left, right } = instance.getState().columnPinning\n\n        return Boolean(left?.length || right?.length)\n      },\n\n      getLeftLeafColumns: memo(\n        () => [\n          instance.getAllLeafColumns(),\n          instance.getState().columnPinning.left,\n        ],\n        (allColumns, left) => {\n          return (left ?? [])\n            .map(columnId => allColumns.find(column => column.id === columnId)!)\n            .filter(Boolean)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftLeafColumns',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugColumns,\n        }\n      ),\n\n      getRightLeafColumns: memo(\n        () => [\n          instance.getAllLeafColumns(),\n          instance.getState().columnPinning.right,\n        ],\n        (allColumns, right) => {\n          return (right ?? [])\n            .map(columnId => allColumns.find(column => column.id === columnId)!)\n            .filter(Boolean)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightLeafColumns',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugColumns,\n        }\n      ),\n\n      getCenterLeafColumns: memo(\n        () => [\n          instance.getAllLeafColumns(),\n          instance.getState().columnPinning.left,\n          instance.getState().columnPinning.right,\n        ],\n        (allColumns, left, right) => {\n          const leftAndRight: string[] = [...(left ?? []), ...(right ?? [])]\n\n          return allColumns.filter(d => !leftAndRight.includes(d.id))\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterLeafColumns',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugColumns,\n        }\n      ),\n    }\n  },\n}\n","import {\n  OnChangeFn,\n  TableGenerics,\n  TableInstance,\n  Row,\n  RowModel,\n  Updater,\n  TableFeature,\n} from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type RowSelectionState = Record<string, boolean>\n\nexport type RowSelectionTableState = {\n  rowSelection: RowSelectionState\n}\n\nexport type RowSelectionOptions<TGenerics extends TableGenerics> = {\n  enableRowSelection?: boolean | ((row: Row<TGenerics>) => boolean)\n  enableMultiRowSelection?: boolean | ((row: Row<TGenerics>) => boolean)\n  enableSubRowSelection?: boolean | ((row: Row<TGenerics>) => boolean)\n  onRowSelectionChange?: OnChangeFn<RowSelectionState>\n  // enableGroupingRowSelection?:\n  //   | boolean\n  //   | ((\n  //       row: Row<TGenerics>\n  //     ) => boolean)\n  // isAdditiveSelectEvent?: (e: unknown) => boolean\n  // isInclusiveSelectEvent?: (e: unknown) => boolean\n  // selectRowsFn?: (\n  //   instance: TableInstance<\n  //     TData,\n  //     TValue,\n  //     TFilterFns,\n  //     TSortingFns,\n  //     TAggregationFns\n  //   >,\n  //   rowModel: RowModel<TGenerics>\n  // ) => RowModel<TGenerics>\n}\n\nexport type RowSelectionRow = {\n  getIsSelected: () => boolean\n  getIsSomeSelected: () => boolean\n  getCanSelect: () => boolean\n  getCanMultiSelect: () => boolean\n  getCanSelectSubRows: () => boolean\n  toggleSelected: (value?: boolean) => void\n  getToggleSelectedHandler: () => (event: unknown) => void\n}\n\nexport type RowSelectionInstance<TGenerics extends TableGenerics> = {\n  getToggleAllRowsSelectedHandler: () => (event: unknown) => void\n  getToggleAllPageRowsSelectedHandler: () => (event: unknown) => void\n  setRowSelection: (updater: Updater<RowSelectionState>) => void\n  resetRowSelection: (defaultState?: boolean) => void\n  getIsAllRowsSelected: () => boolean\n  getIsAllPageRowsSelected: () => boolean\n  getIsSomeRowsSelected: () => boolean\n  getIsSomePageRowsSelected: () => boolean\n  toggleAllRowsSelected: (value: boolean) => void\n  toggleAllPageRowsSelected: (value: boolean) => void\n  getPreSelectedRowModel: () => RowModel<TGenerics>\n  getSelectedRowModel: () => RowModel<TGenerics>\n  getFilteredSelectedRowModel: () => RowModel<TGenerics>\n  getGroupedSelectedRowModel: () => RowModel<TGenerics>\n}\n\n//\n\nexport const RowSelection: TableFeature = {\n  getInitialState: (state): RowSelectionTableState => {\n    return {\n      rowSelection: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TGenerics extends TableGenerics>(\n    instance: TableInstance<TGenerics>\n  ): RowSelectionOptions<TGenerics> => {\n    return {\n      onRowSelectionChange: makeStateUpdater('rowSelection', instance),\n      enableRowSelection: true,\n      enableMultiRowSelection: true,\n      enableSubRowSelection: true,\n      // enableGroupingRowSelection: false,\n      // isAdditiveSelectEvent: (e: unknown) => !!e.metaKey,\n      // isInclusiveSelectEvent: (e: unknown) => !!e.shiftKey,\n    }\n  },\n\n  createInstance: <TGenerics extends TableGenerics>(\n    instance: TableInstance<TGenerics>\n  ): RowSelectionInstance<TGenerics> => {\n    return {\n      setRowSelection: updater =>\n        instance.options.onRowSelectionChange?.(updater),\n      resetRowSelection: defaultState =>\n        instance.setRowSelection(\n          defaultState ? {} : instance.initialState.rowSelection ?? {}\n        ),\n      toggleAllRowsSelected: value => {\n        instance.setRowSelection(old => {\n          value =\n            typeof value !== 'undefined'\n              ? value\n              : !instance.getIsAllRowsSelected()\n\n          const rowSelection = { ...old }\n\n          const preGroupedFlatRows = instance.getPreGroupedRowModel().flatRows\n\n          // We don't use `mutateRowIsSelected` here for performance reasons.\n          // All of the rows are flat already, so it wouldn't be worth it\n          if (value) {\n            preGroupedFlatRows.forEach(row => {\n              rowSelection[row.id] = true\n            })\n          } else {\n            preGroupedFlatRows.forEach(row => {\n              delete rowSelection[row.id]\n            })\n          }\n\n          return rowSelection\n        })\n      },\n      toggleAllPageRowsSelected: value =>\n        instance.setRowSelection(old => {\n          const selectAll =\n            typeof value !== 'undefined'\n              ? value\n              : !instance.getIsAllPageRowsSelected()\n\n          const rowSelection: RowSelectionState = { ...old }\n\n          instance.getRowModel().rows.forEach(row => {\n            mutateRowIsSelected(rowSelection, row.id, value, instance)\n          })\n\n          return rowSelection\n        }),\n\n      // addRowSelectionRange: rowId => {\n      //   const {\n      //     rows,\n      //     rowsById,\n      //     options: { selectGroupingRows, selectSubRows },\n      //   } = instance\n\n      //   const findSelectedRow = (rows: Row[]) => {\n      //     let found\n      //     rows.find(d => {\n      //       if (d.getIsSelected()) {\n      //         found = d\n      //         return true\n      //       }\n      //       const subFound = findSelectedRow(d.subRows || [])\n      //       if (subFound) {\n      //         found = subFound\n      //         return true\n      //       }\n      //       return false\n      //     })\n      //     return found\n      //   }\n\n      //   const firstRow = findSelectedRow(rows) || rows[0]\n      //   const lastRow = rowsById[rowId]\n\n      //   let include = false\n      //   const selectedRowIds = {}\n\n      //   const addRow = (row: Row) => {\n      //     mutateRowIsSelected(selectedRowIds, row.id, true, {\n      //       rowsById,\n      //       selectGroupingRows: selectGroupingRows!,\n      //       selectSubRows: selectSubRows!,\n      //     })\n      //   }\n\n      //   instance.rows.forEach(row => {\n      //     const isFirstRow = row.id === firstRow.id\n      //     const isLastRow = row.id === lastRow.id\n\n      //     if (isFirstRow || isLastRow) {\n      //       if (!include) {\n      //         include = true\n      //       } else if (include) {\n      //         addRow(row)\n      //         include = false\n      //       }\n      //     }\n\n      //     if (include) {\n      //       addRow(row)\n      //     }\n      //   })\n\n      //   instance.setRowSelection(selectedRowIds)\n      // },\n      getPreSelectedRowModel: () => instance.getCoreRowModel(),\n      getSelectedRowModel: memo(\n        () => [instance.getState().rowSelection, instance.getCoreRowModel()],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(instance, rowModel)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getSelectedRowModel',\n          debug: () => instance.options.debugAll ?? instance.options.debugTable,\n        }\n      ),\n\n      getFilteredSelectedRowModel: memo(\n        () => [\n          instance.getState().rowSelection,\n          instance.getFilteredRowModel(),\n        ],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(instance, rowModel)\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' &&\n            'getFilteredSelectedRowModel',\n          debug: () => instance.options.debugAll ?? instance.options.debugTable,\n        }\n      ),\n\n      getGroupedSelectedRowModel: memo(\n        () => [instance.getState().rowSelection, instance.getGroupedRowModel()],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(instance, rowModel)\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' &&\n            'getGroupedSelectedRowModel',\n          debug: () => instance.options.debugAll ?? instance.options.debugTable,\n        }\n      ),\n\n      ///\n\n      // getGroupingRowCanSelect: rowId => {\n      //   const row = instance.getRow(rowId)\n\n      //   if (!row) {\n      //     throw new Error()\n      //   }\n\n      //   if (typeof instance.options.enableGroupingRowSelection === 'function') {\n      //     return instance.options.enableGroupingRowSelection(row)\n      //   }\n\n      //   return instance.options.enableGroupingRowSelection ?? false\n      // },\n\n      getIsAllRowsSelected: () => {\n        const preFilteredFlatRows = instance.getPreFilteredRowModel().flatRows\n        const { rowSelection } = instance.getState()\n\n        let isAllRowsSelected = Boolean(\n          preFilteredFlatRows.length && Object.keys(rowSelection).length\n        )\n\n        if (isAllRowsSelected) {\n          if (preFilteredFlatRows.some(row => !rowSelection[row.id])) {\n            isAllRowsSelected = false\n          }\n        }\n\n        return isAllRowsSelected\n      },\n\n      getIsAllPageRowsSelected: () => {\n        const paginationFlatRows = instance.getPaginationRowModel().flatRows\n        const { rowSelection } = instance.getState()\n\n        let isAllPageRowsSelected = !!paginationFlatRows.length\n\n        if (\n          isAllPageRowsSelected &&\n          paginationFlatRows.some(row => !rowSelection[row.id])\n        ) {\n          isAllPageRowsSelected = false\n        }\n\n        return isAllPageRowsSelected\n      },\n\n      getIsSomeRowsSelected: () => {\n        return (\n          !instance.getIsAllRowsSelected() &&\n          !!Object.keys(instance.getState().rowSelection ?? {}).length\n        )\n      },\n\n      getIsSomePageRowsSelected: () => {\n        const paginationFlatRows = instance.getPaginationRowModel().flatRows\n        return instance.getIsAllPageRowsSelected()\n          ? false\n          : !!paginationFlatRows?.length\n      },\n\n      getToggleAllRowsSelectedHandler: () => {\n        return (e: unknown) => {\n          instance.toggleAllRowsSelected(\n            ((e as MouseEvent).target as HTMLInputElement).checked\n          )\n        }\n      },\n\n      getToggleAllPageRowsSelectedHandler: () => {\n        return (e: unknown) => {\n          instance.toggleAllPageRowsSelected(\n            ((e as MouseEvent).target as HTMLInputElement).checked\n          )\n        }\n      },\n    }\n  },\n\n  createRow: <TGenerics extends TableGenerics>(\n    row: Row<TGenerics>,\n    instance: TableInstance<TGenerics>\n  ): RowSelectionRow => {\n    return {\n      toggleSelected: value => {\n        const isSelected = row.getIsSelected()\n\n        instance.setRowSelection(old => {\n          value = typeof value !== 'undefined' ? value : !isSelected\n\n          if (isSelected === value) {\n            return old\n          }\n\n          const selectedRowIds = { ...old }\n\n          mutateRowIsSelected(selectedRowIds, row.id, value, instance)\n\n          return selectedRowIds\n        })\n      },\n      getIsSelected: () => {\n        const { rowSelection } = instance.getState()\n        return isRowSelected(row, rowSelection, instance) === true\n      },\n\n      getIsSomeSelected: () => {\n        const { rowSelection } = instance.getState()\n        return isRowSelected(row, rowSelection, instance) === 'some'\n      },\n\n      getCanSelect: () => {\n        if (typeof instance.options.enableRowSelection === 'function') {\n          return instance.options.enableRowSelection(row)\n        }\n\n        return instance.options.enableRowSelection ?? true\n      },\n\n      getCanSelectSubRows: () => {\n        if (typeof instance.options.enableSubRowSelection === 'function') {\n          return instance.options.enableSubRowSelection(row)\n        }\n\n        return instance.options.enableSubRowSelection ?? true\n      },\n\n      getCanMultiSelect: () => {\n        if (typeof instance.options.enableMultiRowSelection === 'function') {\n          return instance.options.enableMultiRowSelection(row)\n        }\n\n        return instance.options.enableMultiRowSelection ?? true\n      },\n      getToggleSelectedHandler: () => {\n        const canSelect = row.getCanSelect()\n\n        return (e: unknown) => {\n          if (!canSelect) return\n          row.toggleSelected(\n            ((e as MouseEvent).target as HTMLInputElement)?.checked\n          )\n        }\n      },\n    }\n  },\n}\n\nconst mutateRowIsSelected = <TGenerics extends TableGenerics>(\n  selectedRowIds: Record<string, boolean>,\n  id: string,\n  value: boolean,\n  instance: TableInstance<TGenerics>\n) => {\n  const row = instance.getRow(id)\n\n  const isGrouped = row.getIsGrouped()\n\n  // if ( // TODO: enforce grouping row selection rules\n  //   !isGrouped ||\n  //   (isGrouped && instance.options.enableGroupingRowSelection)\n  // ) {\n  if (value) {\n    selectedRowIds[id] = true\n  } else {\n    delete selectedRowIds[id]\n  }\n  // }\n\n  if (row.subRows?.length && row.getCanSelectSubRows()) {\n    row.subRows.forEach(row =>\n      mutateRowIsSelected(selectedRowIds, row.id, value, instance)\n    )\n  }\n}\n\nexport function selectRowsFn<TGenerics extends TableGenerics>(\n  instance: TableInstance<TGenerics>,\n  rowModel: RowModel<TGenerics>\n): RowModel<TGenerics> {\n  const rowSelection = instance.getState().rowSelection\n\n  const newSelectedFlatRows: Row<TGenerics>[] = []\n  const newSelectedRowsById: Record<string, Row<TGenerics>> = {}\n\n  // Filters top level and nested rows\n  const recurseRows = (rows: Row<TGenerics>[], depth = 0): Row<TGenerics>[] => {\n    return rows\n      .map(row => {\n        const isSelected = isRowSelected(row, rowSelection, instance) === true\n\n        if (isSelected) {\n          newSelectedFlatRows.push(row)\n          newSelectedRowsById[row.id] = row\n        }\n\n        if (row.subRows?.length) {\n          row = {\n            ...row,\n            subRows: recurseRows(row.subRows, depth + 1),\n          }\n        }\n\n        if (isSelected) {\n          return row\n        }\n      })\n      .filter(Boolean) as Row<TGenerics>[]\n  }\n\n  return {\n    rows: recurseRows(rowModel.rows),\n    flatRows: newSelectedFlatRows,\n    rowsById: newSelectedRowsById,\n  }\n}\n\nexport function isRowSelected<TGenerics extends TableGenerics>(\n  row: Row<TGenerics>,\n  selection: Record<string, boolean>,\n  instance: TableInstance<TGenerics>\n): boolean | 'some' {\n  if (selection[row.id]) {\n    return true\n  }\n\n  if (row.subRows && row.subRows.length) {\n    let allChildrenSelected = true\n    let someSelected = false\n\n    row.subRows.forEach(subRow => {\n      // Bail out early if we know both of these\n      if (someSelected && !allChildrenSelected) {\n        return\n      }\n\n      if (isRowSelected(subRow, selection, instance)) {\n        someSelected = true\n      } else {\n        allChildrenSelected = false\n      }\n    })\n\n    return allChildrenSelected ? true : someSelected ? 'some' : false\n  }\n\n  return false\n}\n","import { TableGenerics, Row } from './types'\n\nexport const reSplitAlphaNumeric = /([0-9]+)/gm\n\nexport const sortingFns = {\n  alphanumeric,\n  alphanumericCaseSensitive,\n  text,\n  textCaseSensitive,\n  datetime,\n  basic,\n}\n\nexport type BuiltInSortingFn = keyof typeof sortingFns\n\nfunction alphanumeric<TGenerics extends TableGenerics>(\n  rowA: Row<TGenerics>,\n  rowB: Row<TGenerics>,\n  columnId: string\n) {\n  return compareAlphanumeric(\n    toString(rowA.getValue(columnId)).toLowerCase(),\n    toString(rowB.getValue(columnId)).toLowerCase()\n  )\n}\n\nfunction alphanumericCaseSensitive<TGenerics extends TableGenerics>(\n  rowA: Row<TGenerics>,\n  rowB: Row<TGenerics>,\n  columnId: string\n) {\n  return compareAlphanumeric(\n    toString(rowA.getValue(columnId)),\n    toString(rowB.getValue(columnId))\n  )\n}\n\n// Mixed sorting is slow, but very inclusive of many edge cases.\n// It handles numbers, mixed alphanumeric combinations, and even\n// null, undefined, and Infinity\nfunction compareAlphanumeric(aStr: string, bStr: string) {\n  // Split on number groups, but keep the delimiter\n  // Then remove falsey split values\n  const a = aStr.split(reSplitAlphaNumeric).filter(Boolean)\n  const b = bStr.split(reSplitAlphaNumeric).filter(Boolean)\n\n  // While\n  while (a.length && b.length) {\n    const aa = a.shift()!\n    const bb = b.shift()!\n\n    const an = parseInt(aa, 10)\n    const bn = parseInt(bb, 10)\n\n    const combo = [an, bn].sort()\n\n    // Both are string\n    if (isNaN(combo[0]!)) {\n      if (aa > bb) {\n        return 1\n      }\n      if (bb > aa) {\n        return -1\n      }\n      continue\n    }\n\n    // One is a string, one is a number\n    if (isNaN(combo[1]!)) {\n      return isNaN(an) ? -1 : 1\n    }\n\n    // Both are numbers\n    if (an > bn) {\n      return 1\n    }\n    if (bn > an) {\n      return -1\n    }\n  }\n\n  return a.length - b.length\n}\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nfunction text<TGenerics extends TableGenerics>(\n  rowA: Row<TGenerics>,\n  rowB: Row<TGenerics>,\n  columnId: string\n) {\n  return compareBasic(\n    toString(rowA.getValue(columnId)).toLowerCase(),\n    toString(rowB.getValue(columnId)).toLowerCase()\n  )\n}\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nfunction textCaseSensitive<TGenerics extends TableGenerics>(\n  rowA: Row<TGenerics>,\n  rowB: Row<TGenerics>,\n  columnId: string\n) {\n  return compareBasic(\n    toString(rowA.getValue(columnId)),\n    toString(rowB.getValue(columnId))\n  )\n}\n\nfunction datetime<TGenerics extends TableGenerics>(\n  rowA: Row<TGenerics>,\n  rowB: Row<TGenerics>,\n  columnId: string\n) {\n  return compareBasic(\n    (rowA.getValue(columnId) as Date).getTime(),\n    (rowB.getValue(columnId) as Date).getTime()\n  )\n}\n\nfunction basic<TGenerics extends TableGenerics>(\n  rowA: Row<TGenerics>,\n  rowB: Row<TGenerics>,\n  columnId: string\n) {\n  return compareBasic(rowA.getValue(columnId), rowB.getValue(columnId))\n}\n\n// Utils\n\nfunction compareBasic(a: any, b: any) {\n  return a === b ? 0 : a > b ? 1 : -1\n}\n\nfunction toString(a: any) {\n  if (typeof a === 'number') {\n    if (isNaN(a) || a === Infinity || a === -Infinity) {\n      return ''\n    }\n    return String(a)\n  }\n  if (typeof a === 'string') {\n    return a\n  }\n  return ''\n}\n","import { RowModel } from '..'\nimport {\n  BuiltInSortingFn,\n  reSplitAlphaNumeric,\n  sortingFns,\n} from '../sortingFns'\n\nimport {\n  Column,\n  OnChangeFn,\n  TableGenerics,\n  TableInstance,\n  Row,\n  Updater,\n  TableFeature,\n} from '../types'\n\nimport { isFunction, makeStateUpdater, Overwrite } from '../utils'\n\nexport type SortDirection = 'asc' | 'desc'\n\nexport type ColumnSort = {\n  id: string\n  desc: boolean\n}\n\nexport type SortingState = ColumnSort[]\n\nexport type SortingFn<TGenerics extends TableGenerics> = {\n  (rowA: Row<TGenerics>, rowB: Row<TGenerics>, columnId: string): number\n}\n\nexport type CustomSortingFns<TGenerics extends TableGenerics> = Record<\n  string,\n  SortingFn<TGenerics>\n>\n\nexport type SortingTableState = {\n  sorting: SortingState\n}\n\nexport type SortingFnOption<TGenerics extends TableGenerics> =\n  | 'auto'\n  | BuiltInSortingFn\n  | keyof TGenerics['SortingFns']\n  | SortingFn<TGenerics>\n\nexport type SortingColumnDef<TGenerics extends TableGenerics> = {\n  sortingFn?: SortingFnOption<Overwrite<TGenerics, { Value: any }>>\n  sortDescFirst?: boolean\n  enableSorting?: boolean\n  enableMultiSort?: boolean\n  invertSorting?: boolean\n  sortUndefined?: false | -1 | 1\n}\n\nexport type SortingColumn<TGenerics extends TableGenerics> = {\n  getAutoSortingFn: () => SortingFn<TGenerics>\n  getAutoSortDir: () => SortDirection\n  getSortingFn: () => SortingFn<TGenerics>\n  getCanSort: () => boolean\n  getCanMultiSort: () => boolean\n  getSortIndex: () => number\n  getIsSorted: () => false | SortDirection\n  clearSorting: () => void\n  toggleSorting: (desc?: boolean, isMulti?: boolean) => void\n  getToggleSortingHandler: () => undefined | ((event: unknown) => void)\n}\n\nexport type SortingOptions<TGenerics extends TableGenerics> = {\n  manualSorting?: boolean\n  sortingFns?: TGenerics['SortingFns']\n  onSortingChange?: OnChangeFn<SortingState>\n  enableSorting?: boolean\n  enableSortingRemoval?: boolean\n  enableMultiRemove?: boolean\n  enableMultiSort?: boolean\n  sortDescFirst?: boolean\n  getSortedRowModel?: (\n    instance: TableInstance<TGenerics>\n  ) => () => RowModel<TGenerics>\n  maxMultiSortColCount?: number\n  isMultiSortEvent?: (e: unknown) => boolean\n}\n\nexport type SortingInstance<TGenerics extends TableGenerics> = {\n  setSorting: (updater: Updater<SortingState>) => void\n  resetSorting: (defaultState?: boolean) => void\n  getPreSortedRowModel: () => RowModel<TGenerics>\n  getSortedRowModel: () => RowModel<TGenerics>\n  _getSortedRowModel?: () => RowModel<TGenerics>\n}\n\n//\n\nexport const Sorting: TableFeature = {\n  getInitialState: (state): SortingTableState => {\n    return {\n      sorting: [],\n      ...state,\n    }\n  },\n\n  getDefaultColumn: <\n    TGenerics extends TableGenerics\n  >(): SortingColumnDef<TGenerics> => {\n    return {\n      sortingFn: 'auto',\n    }\n  },\n\n  getDefaultOptions: <TGenerics extends TableGenerics>(\n    instance: TableInstance<TGenerics>\n  ): SortingOptions<TGenerics> => {\n    return {\n      onSortingChange: makeStateUpdater('sorting', instance),\n      isMultiSortEvent: (e: unknown) => {\n        return (e as MouseEvent).shiftKey\n      },\n    }\n  },\n\n  createColumn: <TGenerics extends TableGenerics>(\n    column: Column<TGenerics>,\n    instance: TableInstance<TGenerics>\n  ): SortingColumn<TGenerics> => {\n    return {\n      getAutoSortingFn: () => {\n        const firstRows = instance.getFilteredRowModel().flatRows.slice(10)\n\n        let isString = false\n\n        for (const row of firstRows) {\n          const value = row?.getValue(column.id)\n\n          if (Object.prototype.toString.call(value) === '[object Date]') {\n            return sortingFns.datetime\n          }\n\n          if (typeof value === 'string') {\n            isString = true\n\n            if (value.split(reSplitAlphaNumeric).length > 1) {\n              return sortingFns.alphanumeric\n            }\n          }\n        }\n\n        if (isString) {\n          return sortingFns.text\n        }\n\n        return sortingFns.basic\n      },\n      getAutoSortDir: () => {\n        const firstRow = instance.getFilteredRowModel().flatRows[0]\n\n        const value = firstRow?.getValue(column.id)\n\n        if (typeof value === 'string') {\n          return 'asc'\n        }\n\n        return 'desc'\n      },\n      getSortingFn: () => {\n        const userSortingFn = instance.options.sortingFns\n\n        if (!column) {\n          throw new Error()\n        }\n\n        return isFunction(column.sortingFn)\n          ? column.sortingFn\n          : column.sortingFn === 'auto'\n          ? column.getAutoSortingFn()\n          : (userSortingFn as Record<string, any>)?.[\n              column.sortingFn as string\n            ] ??\n            (sortingFns[\n              column.sortingFn as BuiltInSortingFn\n            ] as SortingFn<TGenerics>)\n      },\n      toggleSorting: (desc, multi) => {\n        // if (column.columns.length) {\n        //   column.columns.forEach((c, i) => {\n        //     if (c.id) {\n        //       instance.toggleColumnSorting(c.id, undefined, multi || !!i)\n        //     }\n        //   })\n        //   return\n        // }\n\n        instance.setSorting(old => {\n          // Find any existing sorting for this column\n          const existingSorting = old?.find(d => d.id === column.id)\n          const existingIndex = old?.findIndex(d => d.id === column.id)\n          const hasDescDefined = typeof desc !== 'undefined' && desc !== null\n\n          let newSorting: SortingState = []\n\n          // What should we do with this sort action?\n          let sortAction\n\n          if (column.getCanMultiSort() && multi) {\n            if (existingSorting) {\n              sortAction = 'toggle'\n            } else {\n              sortAction = 'add'\n            }\n          } else {\n            // Normal mode\n            if (old?.length && existingIndex !== old.length - 1) {\n              sortAction = 'replace'\n            } else if (existingSorting) {\n              sortAction = 'toggle'\n            } else {\n              sortAction = 'replace'\n            }\n          }\n\n          const sortDescFirst =\n            column.sortDescFirst ??\n            instance.options.sortDescFirst ??\n            column.getAutoSortDir() === 'desc'\n\n          // Handle toggle states that will remove the sorting\n          if (\n            sortAction === 'toggle' && // Must be toggling\n            (instance.options.enableSortingRemoval ?? true) && // If enableSortRemove, enable in general\n            !hasDescDefined && // Must not be setting desc\n            (multi ? instance.options.enableMultiRemove ?? true : true) && // If multi, don't allow if enableMultiRemove\n            (existingSorting?.desc // Finally, detect if it should indeed be removed\n              ? !sortDescFirst\n              : sortDescFirst)\n          ) {\n            sortAction = 'remove'\n          }\n\n          if (sortAction === 'replace') {\n            newSorting = [\n              {\n                id: column.id,\n                desc: hasDescDefined ? desc! : !!sortDescFirst,\n              },\n            ]\n          } else if (sortAction === 'add' && old?.length) {\n            newSorting = [\n              ...old,\n              {\n                id: column.id,\n                desc: hasDescDefined ? desc! : !!sortDescFirst,\n              },\n            ]\n            // Take latest n columns\n            newSorting.splice(\n              0,\n              newSorting.length -\n                (instance.options.maxMultiSortColCount ??\n                  Number.MAX_SAFE_INTEGER)\n            )\n          } else if (sortAction === 'toggle' && old?.length) {\n            // This flips (or sets) the\n            newSorting = old.map(d => {\n              if (d.id === column.id) {\n                return {\n                  ...d,\n                  desc: hasDescDefined ? desc! : !existingSorting?.desc,\n                }\n              }\n              return d\n            })\n          } else if (sortAction === 'remove' && old?.length) {\n            newSorting = old.filter(d => d.id !== column.id)\n          }\n\n          return newSorting\n        })\n      },\n\n      getCanSort: () => {\n        return (\n          (column.enableSorting ?? true) &&\n          (instance.options.enableSorting ?? true) &&\n          !!column.accessorFn\n        )\n      },\n\n      getCanMultiSort: () => {\n        return (\n          column.enableMultiSort ??\n          instance.options.enableMultiSort ??\n          !!column.accessorFn\n        )\n      },\n\n      getIsSorted: () => {\n        const columnSort = instance\n          .getState()\n          .sorting?.find(d => d.id === column.id)\n\n        return !columnSort ? false : columnSort.desc ? 'desc' : 'asc'\n      },\n\n      getSortIndex: () =>\n        instance.getState().sorting?.findIndex(d => d.id === column.id) ?? -1,\n\n      clearSorting: () => {\n        //clear sorting for just 1 column\n        instance.setSorting(old =>\n          old?.length ? old.filter(d => d.id !== column.id) : []\n        )\n      },\n\n      getToggleSortingHandler: () => {\n        const canSort = column.getCanSort()\n\n        return (e: unknown) => {\n          if (!canSort) return\n          ;(e as any).persist?.()\n          column.toggleSorting?.(\n            undefined,\n            column.getCanMultiSort()\n              ? instance.options.isMultiSortEvent?.(e)\n              : false\n          )\n        }\n      },\n    }\n  },\n\n  createInstance: <TGenerics extends TableGenerics>(\n    instance: TableInstance<TGenerics>\n  ): SortingInstance<TGenerics> => {\n    let registered = false\n\n    return {\n      setSorting: updater => instance.options.onSortingChange?.(updater),\n      resetSorting: defaultState => {\n        instance.setSorting(\n          defaultState ? [] : instance.initialState?.sorting ?? []\n        )\n      },\n      getPreSortedRowModel: () => instance.getFilteredRowModel(),\n      getSortedRowModel: () => {\n        if (\n          !instance._getSortedRowModel &&\n          instance.options.getSortedRowModel\n        ) {\n          instance._getSortedRowModel =\n            instance.options.getSortedRowModel(instance)\n        }\n\n        if (instance.options.manualSorting || !instance._getSortedRowModel) {\n          return instance.getPreSortedRowModel()\n        }\n\n        return instance._getSortedRowModel()\n      },\n    }\n  },\n}\n","import {\n  Cell,\n  Column,\n  OnChangeFn,\n  TableGenerics,\n  TableInstance,\n  Updater,\n  Row,\n  TableFeature,\n} from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type VisibilityOptions = {\n  onColumnVisibilityChange?: OnChangeFn<VisibilityState>\n  enableHiding?: boolean\n}\n\nexport type VisibilityDefaultOptions = {\n  onColumnVisibilityChange: OnChangeFn<VisibilityState>\n}\n\nexport type VisibilityState = Record<string, boolean>\n\nexport type VisibilityTableState = {\n  columnVisibility: VisibilityState\n}\n\nexport type VisibilityInstance<TGenerics extends TableGenerics> = {\n  getVisibleFlatColumns: () => Column<TGenerics>[]\n  getVisibleLeafColumns: () => Column<TGenerics>[]\n  getLeftVisibleLeafColumns: () => Column<TGenerics>[]\n  getRightVisibleLeafColumns: () => Column<TGenerics>[]\n  getCenterVisibleLeafColumns: () => Column<TGenerics>[]\n  setColumnVisibility: (updater: Updater<VisibilityState>) => void\n  resetColumnVisibility: (defaultState?: boolean) => void\n  toggleAllColumnsVisible: (value?: boolean) => void\n  getIsAllColumnsVisible: () => boolean\n  getIsSomeColumnsVisible: () => boolean\n  getToggleAllColumnsVisibilityHandler: () =>\n    | undefined\n    | ((event: unknown) => void)\n}\n\nexport type VisibilityColumnDef = {\n  enableHiding?: boolean\n  defaultIsVisible?: boolean\n}\n\nexport type VisibilityRow<TGenerics extends TableGenerics> = {\n  _getAllVisibleCells: () => Cell<TGenerics>[]\n  getVisibleCells: () => Cell<TGenerics>[]\n}\n\nexport type VisibilityColumn = {\n  getCanHide: () => boolean\n  getIsVisible: () => boolean\n  toggleVisibility: (value?: boolean) => void\n  getToggleVisibilityHandler: () => (event: unknown) => void\n}\n\n//\n\nexport const Visibility: TableFeature = {\n  getInitialState: (state): VisibilityTableState => {\n    return {\n      columnVisibility: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TGenerics extends TableGenerics>(\n    instance: TableInstance<TGenerics>\n  ): VisibilityDefaultOptions => {\n    return {\n      onColumnVisibilityChange: makeStateUpdater('columnVisibility', instance),\n    }\n  },\n\n  getDefaultColumn: () => {\n    return {\n      defaultIsVisible: true,\n    }\n  },\n\n  createColumn: <TGenerics extends TableGenerics>(\n    column: Column<TGenerics>,\n    instance: TableInstance<TGenerics>\n  ): VisibilityColumn => {\n    return {\n      toggleVisibility: value => {\n        if (column.getCanHide()) {\n          instance.setColumnVisibility(old => ({\n            ...old,\n            [column.id]: value ?? !column.getIsVisible(),\n          }))\n        }\n      },\n      getIsVisible: () => {\n        return instance.getState().columnVisibility?.[column.id] ?? true\n      },\n\n      getCanHide: () => {\n        return (\n          (column.enableHiding ?? true) &&\n          (instance.options.enableHiding ?? true)\n        )\n      },\n      getToggleVisibilityHandler: () => {\n        return (e: unknown) => {\n          column.toggleVisibility?.(\n            ((e as MouseEvent).target as HTMLInputElement).checked\n          )\n        }\n      },\n    }\n  },\n\n  createRow: <TGenerics extends TableGenerics>(\n    row: Row<TGenerics>,\n    instance: TableInstance<TGenerics>\n  ): VisibilityRow<TGenerics> => {\n    return {\n      _getAllVisibleCells: memo(\n        () => [\n          row\n            .getAllCells()\n            .filter(cell => cell.column.getIsVisible())\n            .map(d => d.id)\n            .join('_'),\n        ],\n        _ => {\n          return row.getAllCells().filter(cell => cell.column.getIsVisible())\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' && 'row._getAllVisibleCells',\n          debug: () => instance.options.debugAll ?? instance.options.debugRows,\n        }\n      ),\n      getVisibleCells: memo(\n        () => [\n          row.getLeftVisibleCells(),\n          row.getCenterVisibleCells(),\n          row.getRightVisibleCells(),\n        ],\n        (left, center, right) => [...left, ...center, ...right],\n        {\n          key: process.env.NODE_ENV === 'development' && 'row.getVisibleCells',\n          debug: () => instance.options.debugAll ?? instance.options.debugRows,\n        }\n      ),\n    }\n  },\n\n  createInstance: <TGenerics extends TableGenerics>(\n    instance: TableInstance<TGenerics>\n  ): VisibilityInstance<TGenerics> => {\n    const makeVisibleColumnsMethod = (\n      key: string,\n      getColumns: () => Column<TGenerics>[]\n    ): (() => Column<TGenerics>[]) => {\n      return memo(\n        () => [\n          getColumns(),\n          getColumns()\n            .filter(d => d.getIsVisible())\n            .map(d => d.id)\n            .join('_'),\n        ],\n        columns => {\n          return columns.filter(d => d.getIsVisible?.())\n        },\n        {\n          key,\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugColumns,\n        }\n      )\n    }\n\n    return {\n      getVisibleFlatColumns: makeVisibleColumnsMethod(\n        'getVisibleFlatColumns',\n        () => instance.getAllFlatColumns()\n      ),\n      getVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getVisibleLeafColumns',\n        () => instance.getAllLeafColumns()\n      ),\n      getLeftVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getLeftVisibleLeafColumns',\n        () => instance.getLeftLeafColumns()\n      ),\n      getRightVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getRightVisibleLeafColumns',\n        () => instance.getRightLeafColumns()\n      ),\n      getCenterVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getCenterVisibleLeafColumns',\n        () => instance.getCenterLeafColumns()\n      ),\n\n      setColumnVisibility: updater =>\n        instance.options.onColumnVisibilityChange?.(updater),\n\n      resetColumnVisibility: defaultState => {\n        instance.setColumnVisibility(\n          defaultState ? {} : instance.initialState.columnVisibility ?? {}\n        )\n      },\n\n      toggleAllColumnsVisible: value => {\n        value = value ?? !instance.getIsAllColumnsVisible()\n\n        instance.setColumnVisibility(\n          instance.getAllLeafColumns().reduce(\n            (obj, column) => ({\n              ...obj,\n              [column.id]: !value ? !column.getCanHide?.() : value,\n            }),\n            {}\n          )\n        )\n      },\n\n      getIsAllColumnsVisible: () =>\n        !instance.getAllLeafColumns().some(column => !column.getIsVisible?.()),\n\n      getIsSomeColumnsVisible: () =>\n        instance.getAllLeafColumns().some(column => column.getIsVisible?.()),\n\n      getToggleAllColumnsVisibilityHandler: () => {\n        return (e: unknown) => {\n          instance.toggleAllColumnsVisible(\n            ((e as MouseEvent).target as HTMLInputElement)?.checked\n          )\n        }\n      },\n    }\n  },\n}\n","import {\n  Column,\n  CoreHeader,\n  Header,\n  HeaderGroup,\n  TableGenerics,\n  TableInstance,\n} from '../types'\nimport { memo } from '../utils'\n\nexport type HeadersInstance<TGenerics extends TableGenerics> = {\n  createHeader: (\n    column: Column<TGenerics>,\n    options: {\n      id?: string\n      isPlaceholder?: boolean\n      placeholderId?: string\n      index: number\n      depth: number\n    }\n  ) => Header<TGenerics>\n  getHeaderGroups: () => HeaderGroup<TGenerics>[]\n  getLeftHeaderGroups: () => HeaderGroup<TGenerics>[]\n  getCenterHeaderGroups: () => HeaderGroup<TGenerics>[]\n  getRightHeaderGroups: () => HeaderGroup<TGenerics>[]\n\n  getFooterGroups: () => HeaderGroup<TGenerics>[]\n  getLeftFooterGroups: () => HeaderGroup<TGenerics>[]\n  getCenterFooterGroups: () => HeaderGroup<TGenerics>[]\n  getRightFooterGroups: () => HeaderGroup<TGenerics>[]\n\n  getFlatHeaders: () => Header<TGenerics>[]\n  getLeftFlatHeaders: () => Header<TGenerics>[]\n  getCenterFlatHeaders: () => Header<TGenerics>[]\n  getRightFlatHeaders: () => Header<TGenerics>[]\n\n  getLeafHeaders: () => Header<TGenerics>[]\n  getLeftLeafHeaders: () => Header<TGenerics>[]\n  getCenterLeafHeaders: () => Header<TGenerics>[]\n  getRightLeafHeaders: () => Header<TGenerics>[]\n\n  getHeader: (id: string) => Header<TGenerics>\n}\n\n//\n\nexport const Headers = {\n  createInstance: <TGenerics extends TableGenerics>(\n    instance: TableInstance<TGenerics>\n  ): HeadersInstance<TGenerics> => {\n    return {\n      createHeader: (\n        column: Column<TGenerics>,\n        options: {\n          id?: string\n          isPlaceholder?: boolean\n          placeholderId?: string\n          index: number\n          depth: number\n        }\n      ) => {\n        const id = options.id ?? column.id\n\n        let header: CoreHeader<TGenerics> = {\n          id,\n          column,\n          index: options.index,\n          isPlaceholder: options.isPlaceholder,\n          placeholderId: options.placeholderId,\n          depth: options.depth,\n          subHeaders: [],\n          colSpan: 0,\n          rowSpan: 0,\n          headerGroup: null!,\n          getLeafHeaders: (): Header<TGenerics>[] => {\n            const leafHeaders: CoreHeader<TGenerics>[] = []\n\n            const recurseHeader = (h: CoreHeader<TGenerics>) => {\n              if (h.subHeaders && h.subHeaders.length) {\n                h.subHeaders.map(recurseHeader)\n              }\n              leafHeaders.push(h)\n            }\n\n            recurseHeader(header)\n\n            return leafHeaders as Header<TGenerics>[]\n          },\n          renderHeader: () =>\n            column.header\n              ? instance._render(column.header, {\n                  instance,\n                  header: header as Header<TGenerics>,\n                  column,\n                })\n              : null,\n          renderFooter: () =>\n            column.footer\n              ? instance._render(column.footer, {\n                  instance,\n                  header: header as Header<TGenerics>,\n                  column,\n                })\n              : null,\n        }\n\n        instance._features.forEach(feature => {\n          Object.assign(header, feature.createHeader?.(header, instance))\n        })\n\n        return header as Header<TGenerics>\n      },\n\n      // Header Groups\n\n      getHeaderGroups: memo(\n        () => [\n          instance.getAllColumns(),\n          instance.getVisibleLeafColumns(),\n          instance.getState().columnPinning.left,\n          instance.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, left, right) => {\n          const leftColumns =\n            left\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          const rightColumns =\n            right\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          const centerColumns = leafColumns.filter(\n            column => !left?.includes(column.id) && !right?.includes(column.id)\n          )\n\n          const headerGroups = buildHeaderGroups(\n            allColumns,\n            [...leftColumns, ...centerColumns, ...rightColumns],\n            instance\n          )\n\n          return headerGroups\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getHeaderGroups',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getCenterHeaderGroups: memo(\n        () => [\n          instance.getAllColumns(),\n          instance.getVisibleLeafColumns(),\n          instance.getState().columnPinning.left,\n          instance.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, left, right) => {\n          leafColumns = leafColumns.filter(\n            column => !left?.includes(column.id) && !right?.includes(column.id)\n          )\n          return buildHeaderGroups(allColumns, leafColumns, instance, 'center')\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'development' && 'getCenterHeaderGroups',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getLeftHeaderGroups: memo(\n        () => [\n          instance.getAllColumns(),\n          instance.getVisibleLeafColumns(),\n          instance.getState().columnPinning.left,\n        ],\n        (allColumns, leafColumns, left) => {\n          const orderedLeafColumns =\n            left\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          return buildHeaderGroups(\n            allColumns,\n            orderedLeafColumns,\n            instance,\n            'left'\n          )\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftHeaderGroups',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getRightHeaderGroups: memo(\n        () => [\n          instance.getAllColumns(),\n          instance.getVisibleLeafColumns(),\n          instance.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, right) => {\n          const orderedLeafColumns =\n            right\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          return buildHeaderGroups(\n            allColumns,\n            orderedLeafColumns,\n            instance,\n            'right'\n          )\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightHeaderGroups',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      // Footer Groups\n\n      getFooterGroups: memo(\n        () => [instance.getHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getFooterGroups',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getLeftFooterGroups: memo(\n        () => [instance.getLeftHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftFooterGroups',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getCenterFooterGroups: memo(\n        () => [instance.getCenterHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'development' && 'getCenterFooterGroups',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getRightFooterGroups: memo(\n        () => [instance.getRightHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightFooterGroups',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      // Flat Headers\n\n      getFlatHeaders: memo(\n        () => [instance.getHeaderGroups()],\n        headerGroups => {\n          return headerGroups\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getFlatHeaders',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getLeftFlatHeaders: memo(\n        () => [instance.getLeftHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftFlatHeaders',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getCenterFlatHeaders: memo(\n        () => [instance.getCenterHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterFlatHeaders',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getRightFlatHeaders: memo(\n        () => [instance.getRightHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightFlatHeaders',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      // Leaf Headers\n\n      getCenterLeafHeaders: memo(\n        () => [instance.getCenterFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterLeafHeaders',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getLeftLeafHeaders: memo(\n        () => [instance.getLeftFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftLeafHeaders',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getRightLeafHeaders: memo(\n        () => [instance.getRightFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightLeafHeaders',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getLeafHeaders: memo(\n        () => [\n          instance.getLeftHeaderGroups(),\n          instance.getCenterHeaderGroups(),\n          instance.getRightHeaderGroups(),\n        ],\n        (left, center, right) => {\n          return [\n            ...(left[0]?.headers ?? []),\n            ...(center[0]?.headers ?? []),\n            ...(right[0]?.headers ?? []),\n          ]\n            .map(header => {\n              return header.getLeafHeaders()\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeafHeaders',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getHeader: (id: string) => {\n        const header = [\n          ...instance.getFlatHeaders(),\n          ...instance.getCenterFlatHeaders(),\n          ...instance.getLeftFlatHeaders(),\n          ...instance.getRightFlatHeaders(),\n        ].find(d => d.id === id)\n\n        if (!header) {\n          if (process.env.NODE_ENV !== 'production') {\n            console.warn(`Could not find header with id: ${id}`)\n          }\n          throw new Error()\n        }\n\n        return header\n      },\n    }\n  },\n}\n\nexport function buildHeaderGroups<TGenerics extends TableGenerics>(\n  allColumns: Column<TGenerics>[],\n  columnsToGroup: Column<TGenerics>[],\n  instance: TableInstance<TGenerics>,\n  headerFamily?: 'center' | 'left' | 'right'\n) {\n  // Find the max depth of the columns:\n  // build the leaf column row\n  // build each buffer row going up\n  //    placeholder for non-existent level\n  //    real column for existing level\n\n  let maxDepth = 0\n\n  const findMaxDepth = (columns: Column<TGenerics>[], depth = 1) => {\n    maxDepth = Math.max(maxDepth, depth)\n\n    columns\n      .filter(column => column.getIsVisible())\n      .forEach(column => {\n        if (column.columns?.length) {\n          findMaxDepth(column.columns, depth + 1)\n        }\n      }, 0)\n  }\n\n  findMaxDepth(allColumns)\n\n  let headerGroups: HeaderGroup<TGenerics>[] = []\n\n  const createHeaderGroup = (\n    headersToGroup: Header<TGenerics>[],\n    depth: number\n  ) => {\n    // The header group we are creating\n    const headerGroup: HeaderGroup<TGenerics> = {\n      depth,\n      id: [headerFamily, `${depth}`].filter(Boolean).join('_'),\n      headers: [],\n    }\n\n    // The parent columns we're going to scan next\n    const pendingParentHeaders: Header<TGenerics>[] = []\n\n    // Scan each column for parents\n    headersToGroup.forEach(headerToGroup => {\n      // What is the latest (last) parent column?\n\n      const latestPendingParentHeader = [...pendingParentHeaders].reverse()[0]\n\n      const isLeafHeader = headerToGroup.column.depth === headerGroup.depth\n\n      let column: Column<TGenerics>\n      let isPlaceholder = false\n\n      if (isLeafHeader && headerToGroup.column.parent) {\n        // The parent header is new\n        column = headerToGroup.column.parent\n      } else {\n        // The parent header is repeated\n        column = headerToGroup.column\n        isPlaceholder = true\n      }\n\n      if (latestPendingParentHeader?.column === column) {\n        // This column is repeated. Add it as a sub header to the next batch\n        latestPendingParentHeader.subHeaders.push(headerToGroup)\n      } else {\n        // This is a new header. Let's create it\n        const header = instance.createHeader(column, {\n          id: [headerFamily, depth, column.id, headerToGroup?.id]\n            .filter(Boolean)\n            .join('_'),\n          isPlaceholder,\n          placeholderId: isPlaceholder\n            ? `${pendingParentHeaders.filter(d => d.column === column).length}`\n            : undefined,\n          depth,\n          index: pendingParentHeaders.length,\n        })\n\n        // Add the headerToGroup as a subHeader of the new header\n        header.subHeaders.push(headerToGroup)\n        // Add the new header to the pendingParentHeaders to get grouped\n        // in the next batch\n        pendingParentHeaders.push(header)\n      }\n\n      headerGroup.headers.push(headerToGroup)\n      headerToGroup.headerGroup = headerGroup\n    })\n\n    headerGroups.push(headerGroup)\n\n    if (depth > 0) {\n      createHeaderGroup(pendingParentHeaders, depth - 1)\n    }\n  }\n\n  const bottomHeaders = columnsToGroup.map((column, index) =>\n    instance.createHeader(column, {\n      depth: maxDepth,\n      index,\n    })\n  )\n\n  createHeaderGroup(bottomHeaders, maxDepth - 1)\n\n  headerGroups.reverse()\n\n  // headerGroups = headerGroups.filter(headerGroup => {\n  //   return !headerGroup.headers.every(header => header.isPlaceholder)\n  // })\n\n  const recurseHeadersForSpans = (headers: Header<TGenerics>[]) => {\n    const filteredHeaders = headers.filter(header =>\n      header.column.getIsVisible()\n    )\n\n    return filteredHeaders.map(header => {\n      let colSpan = 0\n      let rowSpan = 0\n      let childRowSpans = [0]\n\n      if (header.subHeaders && header.subHeaders.length) {\n        childRowSpans = []\n\n        recurseHeadersForSpans(header.subHeaders).forEach(\n          ({ colSpan: childColSpan, rowSpan: childRowSpan }) => {\n            colSpan += childColSpan\n            childRowSpans.push(childRowSpan)\n          }\n        )\n      } else {\n        colSpan = 1\n      }\n\n      const minChildRowSpan = Math.min(...childRowSpans)\n      rowSpan = rowSpan + minChildRowSpan\n\n      header.colSpan = colSpan > 0 ? colSpan : undefined\n      header.rowSpan = rowSpan > 0 ? rowSpan : undefined\n\n      return { colSpan, rowSpan }\n    })\n  }\n\n  recurseHeadersForSpans(headerGroups[0]?.headers ?? [])\n\n  return headerGroups\n}\n","import { functionalUpdate, RequiredKeys } from './utils'\n\nimport {\n  Updater,\n  TableOptions,\n  TableState,\n  TableInstance,\n  Renderable,\n  TableFeature,\n  TableGenerics,\n  InitialTableState,\n} from './types'\n\nimport { Columns } from './features/Columns'\nimport { Rows } from './features/Rows'\nimport { Cells } from './features/Cells'\nimport { ColumnSizing } from './features/ColumnSizing'\nimport { Expanding } from './features/Expanding'\nimport { Filters } from './features/Filters'\nimport { Grouping } from './features/Grouping'\nimport { Ordering } from './features/Ordering'\nimport { Pagination } from './features/Pagination'\nimport { Pinning } from './features/Pinning'\nimport { RowSelection } from './features/RowSelection'\nimport { Sorting } from './features/Sorting'\nimport { Visibility } from './features/Visibility'\nimport { Headers } from './features/Headers'\n//\n\nexport type CoreTableState = {\n  // coreProgress: number\n}\n\nexport type CoreOptions<TGenerics extends TableGenerics> = {\n  data: TGenerics['Row'][]\n  state: Partial<TableState>\n  onStateChange: (updater: Updater<TableState>) => void\n  render: TGenerics['Renderer']\n  debugAll?: boolean\n  debugTable?: boolean\n  debugHeaders?: boolean\n  debugColumns?: boolean\n  debugRows?: boolean\n  initialState?: InitialTableState\n  autoResetAll?: boolean\n  mergeOptions?: <T>(defaultOptions: T, options: Partial<T>) => T\n  meta?: TGenerics['TableMeta']\n  // keepPreviousData?: boolean\n}\n\nexport type CoreInstance<TGenerics extends TableGenerics> = {\n  // generics: TGenerics\n  initialState: TableState\n  reset: () => void\n  options: RequiredKeys<TableOptions<TGenerics>, 'state'>\n  setOptions: (newOptions: Updater<TableOptions<TGenerics>>) => void\n  getState: () => TableState\n  setState: (updater: Updater<TableState>) => void\n  _queue: (cb: () => void) => void\n  _render: <TProps>(\n    template: Renderable<TGenerics, TProps>,\n    props: TProps\n  ) => string | null | TGenerics['Rendered']\n  _features: readonly TableFeature[]\n  // getOverallProgress: () => number\n  // getProgressStage: () =>\n  //   | undefined\n  //   | 'coreRowModel'\n  //   | 'filteredRowModel'\n  //   | 'facetedRowModel'\n  // createBatch: (priority: keyof CoreBatches) => Batch\n  // init: () => void\n  // willUpdate: () => void\n  // destroy: () => void\n  // batches: CoreBatches\n}\n\n// export type Batch = {\n//   id: number\n//   priority: keyof CoreBatches\n//   tasks: (() => void)[]\n//   schedule: (cb: () => void) => void\n//   cancel: () => void\n// }\n\n// type CoreBatches = {\n//   data: Batch[]\n//   facets: Batch[]\n// }\n\nexport function createTableInstance<TGenerics extends TableGenerics>(\n  options: TableOptions<TGenerics>\n): TableInstance<TGenerics> {\n  if (options.debugAll || options.debugTable) {\n    console.info('Creating Table Instance...')\n  }\n\n  let instance = {\n    _features: [\n      Columns,\n      Rows,\n      Cells,\n      Headers,\n      Visibility,\n      Ordering,\n      Pinning,\n      Filters,\n      Sorting,\n      Grouping,\n      Expanding,\n      Pagination,\n      RowSelection,\n      ColumnSizing,\n    ] as const,\n  } as unknown as CoreInstance<TGenerics>\n\n  const defaultOptions = instance._features.reduce((obj, feature) => {\n    return Object.assign(obj, feature.getDefaultOptions?.(instance))\n  }, {}) as TableOptions<TGenerics>\n\n  const mergeOptions = (options: TableOptions<TGenerics>) => {\n    if (instance.options.mergeOptions) {\n      return instance.options.mergeOptions(defaultOptions, options)\n    }\n\n    return {\n      ...defaultOptions,\n      ...options,\n    }\n  }\n\n  const coreInitialState: CoreTableState = {\n    // coreProgress: 1,\n  }\n\n  let initialState = {\n    ...coreInitialState,\n    ...(options.initialState ?? {}),\n  } as TableState\n\n  instance._features.forEach(feature => {\n    initialState = feature.getInitialState?.(initialState) ?? initialState\n  })\n\n  const queued: (() => void)[] = []\n  let queuedTimeout = false\n\n  const midInstance: CoreInstance<TGenerics> = {\n    ...instance,\n    // init: () => {\n    //   startWork()\n    // },\n    // willUpdate: () => {\n    //   startWork()\n    // },\n    // destroy: () => {\n    //   stopWork()\n    // },\n    options: {\n      ...defaultOptions,\n      ...options,\n    },\n    initialState,\n    _queue: cb => {\n      queued.push(cb)\n\n      if (!queuedTimeout) {\n        queuedTimeout = true\n\n        // Schedule a microtask to run the queued callbacks after\n        // the current call stack (render, etc) has finished.\n        Promise.resolve()\n          .then(() => {\n            while (queued.length) {\n              queued.shift()!()\n            }\n            queuedTimeout = false\n          })\n          .catch(error =>\n            setTimeout(() => {\n              throw error\n            })\n          )\n      }\n    },\n    reset: () => {\n      instance.setState(instance.initialState)\n    },\n    setOptions: updater => {\n      const newOptions = functionalUpdate(updater, instance.options)\n      instance.options = mergeOptions(newOptions)\n    },\n    _render: (template, props) => {\n      if (typeof instance.options.render === 'function') {\n        return instance.options.render(template, props)\n      }\n\n      if (typeof template === 'function') {\n        return (template as Function)(props)\n      }\n\n      return template\n    },\n\n    getState: () => {\n      return instance.options.state as TableState\n    },\n\n    setState: (updater: Updater<TableState>) => {\n      instance.options.onStateChange?.(updater)\n    },\n\n    // getOverallProgress: () => {\n    //   const { coreProgress, filtersProgress, facetProgress } =\n    //     instance.getState()\n\n    //   return mean(() =>\n    //     [coreProgress, filtersProgress].filter(d => d < 1)\n    //   ) as number\n    // },\n    // getProgressStage: () => {\n    //   const { coreProgress, filtersProgress, facetProgress } =\n    //     instance.getState()\n\n    //   if (coreProgress < 1) {\n    //     return 'coreRowModel'\n    //   }\n\n    //   if (filtersProgress < 1) {\n    //     return 'filteredRowModel'\n    //   }\n\n    //   if (Object.values(facetProgress).some(d => d < 1)) {\n    //     return 'facetedRowModel'\n    //   }\n    // },\n  }\n\n  instance = Object.assign(instance, midInstance)\n\n  instance._features.forEach(feature => {\n    return Object.assign(instance, feature.createInstance?.(instance))\n  })\n\n  return instance as TableInstance<TGenerics>\n}\n","import { CustomFilterFns, FilterFn } from './features/Filters'\nimport { AggregationFn, CustomAggregationFns } from './features/Grouping'\nimport { CustomSortingFns, SortingFn } from './features/Sorting'\nimport {\n  ColumnDef,\n  AccessorFn,\n  AnyRender,\n  TableGenerics,\n  TableOptions,\n} from './types'\nimport { IfDefined, Overwrite } from './utils'\n\nexport type TableFactory<TGenerics extends TableGenerics> =\n  () => Table<TGenerics>\n\nexport type CreateTableOptions<\n  TRender extends AnyRender,\n  TFilterFns extends CustomFilterFns<any>,\n  TSortingFns extends CustomSortingFns<any>,\n  TAggregationFns extends CustomAggregationFns<any>,\n  TGenerics extends TableGenerics\n> = Partial<\n  {\n    render?: TRender\n    filterFns?: TFilterFns\n    sortingFns?: TSortingFns\n    aggregationFns?: TAggregationFns\n  } & Omit<\n    TableOptions<TGenerics>,\n    'filterFns' | 'sortingFns' | 'aggregationFns'\n  >\n>\n\nexport type Table<TGenerics extends TableGenerics> = {\n  generics: TGenerics\n  options: Partial<TableOptions<TGenerics>>\n  setGenerics: <T extends TableGenerics>() => Table<T>\n  setRowType: <TRow>() => Table<Overwrite<TGenerics, { Row: TRow }>>\n  setTableMetaType: <TTableMeta>() => Table<\n    Overwrite<TGenerics, { TableMeta: TTableMeta }>\n  >\n  setColumnMetaType: <TColumnMeta>() => Table<\n    Overwrite<TGenerics, { ColumnMeta: TColumnMeta }>\n  >\n  setFilterMetaType: <TFilterMeta>() => Table<\n    Overwrite<TGenerics, { FilterMeta: TFilterMeta }>\n  >\n  setOptions: <\n    TFilterFns extends Record<string, FilterFn<TGenerics>>,\n    TSortingFns extends Record<string, SortingFn<TGenerics>>,\n    TAggregationFns extends Record<string, AggregationFn<TGenerics>>\n  >(\n    options: CreateTableOptions<\n      any,\n      TFilterFns,\n      TSortingFns,\n      TAggregationFns,\n      TGenerics\n    >\n  ) => Table<\n    Overwrite<\n      TGenerics,\n      {\n        FilterFns: IfDefined<TFilterFns, TGenerics['FilterFns']>\n        SortingFns: IfDefined<TSortingFns, TGenerics['SortingFns']>\n        AggregationFns: IfDefined<TAggregationFns, TGenerics['AggregationFns']>\n      }\n    >\n  >\n  createGroup: (\n    column: Overwrite<\n      | Overwrite<\n          ColumnDef<any>,\n          {\n            header: string\n            id?: string\n          }\n        >\n      | Overwrite<\n          ColumnDef<any>,\n          {\n            id: string\n            header?: string | ((...any: any) => any)\n          }\n        >,\n      {\n        accessorFn?: never\n        accessorKey?: never\n        columns?: ColumnDef<any>[]\n      }\n    >\n  ) => ColumnDef<TGenerics>\n  createDisplayColumn: (\n    column: Omit<ColumnDef<TGenerics>, 'columns'>\n  ) => ColumnDef<TGenerics>\n  createDataColumn: <\n    TAccessor extends AccessorFn<TGenerics['Row']> | keyof TGenerics['Row']\n  >(\n    accessor: TAccessor,\n    column: Overwrite<\n      TAccessor extends (...args: any[]) => any\n        ? // Accessor Fn\n          ColumnDef<Overwrite<TGenerics, { Value: ReturnType<TAccessor> }>>\n        : TAccessor extends keyof TGenerics['Row']\n        ? // Accessor Key\n          Overwrite<\n            ColumnDef<\n              Overwrite<TGenerics, { Value: TGenerics['Row'][TAccessor] }>\n            >,\n            {\n              id?: string\n            }\n          >\n        : never,\n      {\n        accessorFn?: never\n        accessorKey?: never\n        columns?: ColumnDef<any>[]\n      }\n    >\n  ) => ColumnDef<TGenerics>\n}\n\n//\n\nexport function createTableFactory<TRenderer extends AnyRender>(opts: {\n  render: TRenderer\n}): () => Table<{ Renderer: TRenderer; Rendered: ReturnType<TRenderer> }> {\n  return () => createTable(undefined, undefined, opts)\n}\n\n// A lot of returns in here are `as any` for a reason. Unless you\n// can find a better way to do this, then don't worry about them\nfunction createTable<TGenerics extends TableGenerics>(\n  _?: undefined,\n  __?: undefined,\n  options?: CreateTableOptions<any, any, any, any, TGenerics>\n): Table<TGenerics> {\n  const table: Table<TGenerics> = {\n    generics: undefined!,\n    options: options ?? {\n      render: (() => {\n        throw new Error('')\n      })(),\n    },\n    setGenerics: () => table as any,\n    setRowType: () => table as any,\n    setTableMetaType: () => table as any,\n    setColumnMetaType: () => table as any,\n    setFilterMetaType: () => table as any,\n    setOptions: newOptions =>\n      createTable(_, __, {\n        ...options,\n        ...newOptions,\n      } as any),\n    createDisplayColumn: column => ({ ...column, columnDefType: 'display' }),\n    createGroup: column => ({ ...column, columnDefType: 'group' } as any),\n    createDataColumn: (accessor, column): any => {\n      column = {\n        ...column,\n        columnDefType: 'data',\n        id: column.id,\n      }\n\n      if (typeof accessor === 'string') {\n        return {\n          ...column,\n          id: column.id ?? accessor,\n          accessorKey: accessor,\n        }\n      }\n\n      if (typeof accessor === 'function') {\n        return {\n          ...column,\n          accessorFn: accessor,\n        }\n      }\n\n      throw new Error('Invalid accessor')\n    },\n  }\n\n  return table\n}\n","import { TableInstance, Row, RowModel, TableGenerics } from '../types'\nimport { memo } from '../utils'\n\nexport function getCoreRowModel<TGenerics extends TableGenerics>(): (\n  instance: TableInstance<TGenerics>\n) => () => RowModel<TGenerics> {\n  return instance =>\n    memo(\n      () => [instance.options.data],\n      (\n        data\n      ): {\n        rows: Row<TGenerics>[]\n        flatRows: Row<TGenerics>[]\n        rowsById: Record<string, Row<TGenerics>>\n      } => {\n        const rowModel: RowModel<TGenerics> = {\n          rows: [],\n          flatRows: [],\n          rowsById: {},\n        }\n\n        let rows\n        let row\n        let originalRow\n\n        const accessRows = (\n          originalRows: TGenerics['Row'][],\n          depth = 0,\n          parent?: Row<TGenerics>\n        ): Row<TGenerics>[] => {\n          rows = []\n\n          for (let i = 0; i < originalRows.length; i++) {\n            originalRow = originalRows[i]\n\n            // This could be an expensive check at scale, so we should move it somewhere else, but where?\n            // if (!id) {\n            //   if (process.env.NODE_ENV !== 'production') {\n            //     throw new Error(`getRowId expected an ID, but got ${id}`)\n            //   }\n            // }\n\n            // Make the row\n            row = instance.createRow(\n              instance.getRowId(originalRow, i, parent),\n              originalRow,\n              i,\n              depth\n            )\n\n            // Keep track of every row in a flat array\n            rowModel.flatRows.push(row)\n            // Also keep track of every row by its ID\n            rowModel.rowsById[row.id] = row\n            // Push instance row into parent\n            rows.push(row)\n\n            // Get the original subrows\n            if (instance.options.getSubRows) {\n              row.originalSubRows = instance.options.getSubRows(originalRow, i)\n\n              // Then recursively access them\n              if (row.originalSubRows?.length) {\n                row.subRows = accessRows(row.originalSubRows, depth + 1, row)\n              }\n            }\n          }\n\n          return rows\n        }\n\n        rowModel.rows = accessRows(data)\n\n        return rowModel\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getRowModel',\n        debug: () => instance.options.debugAll ?? instance.options.debugTable,\n        onChange: () => {\n          instance._autoResetPageIndex()\n        },\n      }\n    )\n}\n","import { TableGenerics, Row, RowModel, TableInstance } from '../types'\n\nexport function filterRows<TGenerics extends TableGenerics>(\n  rows: Row<TGenerics>[],\n  filterRowImpl: (row: Row<TGenerics>) => any,\n  instance: TableInstance<TGenerics>\n) {\n  if (instance.options.filterFromLeafRows) {\n    return filterRowModelFromLeafs(rows, filterRowImpl, instance)\n  }\n\n  return filterRowModelFromRoot(rows, filterRowImpl, instance)\n}\n\nexport function filterRowModelFromLeafs<TGenerics extends TableGenerics>(\n  rowsToFilter: Row<TGenerics>[],\n  filterRow: (row: Row<TGenerics>) => Row<TGenerics>[],\n  instance: TableInstance<TGenerics>\n): RowModel<TGenerics> {\n  const newFilteredFlatRows: Row<TGenerics>[] = []\n  const newFilteredRowsById: Record<string, Row<TGenerics>> = {}\n\n  let row\n  let newRow\n\n  const recurseFilterRows = (rowsToFilter: Row<TGenerics>[], depth = 0) => {\n    const rows: Row<TGenerics>[] = []\n\n    // Filter from children up first\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      row = rowsToFilter[i]!\n\n      if (row.subRows?.length) {\n        newRow = instance.createRow(row.id, row.original, row.index, row.depth)\n        newRow.columnFilters = row.columnFilters\n        newRow.subRows = recurseFilterRows(row.subRows, depth + 1)\n        if (!newRow.subRows.length) {\n          continue\n        }\n        row = newRow\n      }\n\n      if (filterRow(row)) {\n        rows.push(row)\n        newFilteredRowsById[row.id] = row\n        newFilteredRowsById[i] = row\n      }\n    }\n\n    return rows\n  }\n\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById,\n  }\n}\n\nexport function filterRowModelFromRoot<TGenerics extends TableGenerics>(\n  rowsToFilter: Row<TGenerics>[],\n  filterRow: (row: Row<TGenerics>) => any,\n  instance: TableInstance<TGenerics>\n): RowModel<TGenerics> {\n  const newFilteredFlatRows: Row<TGenerics>[] = []\n  const newFilteredRowsById: Record<string, Row<TGenerics>> = {}\n\n  let rows\n  let row\n  let newRow\n\n  // Filters top level and nested rows\n  const recurseFilterRows = (rowsToFilter: Row<TGenerics>[], depth = 0) => {\n    // Filter from parents downward first\n\n    rows = []\n\n    // Apply the filter to any subRows\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      row = rowsToFilter[i]!\n\n      const pass = filterRow(row)\n\n      if (pass) {\n        if (row.subRows?.length) {\n          newRow = instance.createRow(\n            row.id,\n            row.original,\n            row.index,\n            row.depth\n          )\n          newRow.subRows = recurseFilterRows(row.subRows, depth + 1)\n          row = newRow\n        }\n\n        rows.push(row)\n        newFilteredFlatRows.push(row)\n        newFilteredRowsById[row.id] = row\n      }\n    }\n\n    return rows\n  }\n\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById,\n  }\n}\n","import { ResolvedColumnFilter } from '../features/Filters'\nimport { TableInstance, RowModel, TableGenerics, Row } from '../types'\nimport { memo } from '../utils'\nimport { filterRows } from './filterRowsUtils'\n\nexport function getFilteredRowModel<TGenerics extends TableGenerics>(): (\n  instance: TableInstance<TGenerics>\n) => () => RowModel<TGenerics> {\n  return instance =>\n    memo(\n      () => [\n        instance.getPreFilteredRowModel(),\n        instance.getState().columnFilters,\n        instance.getState().globalFilter,\n      ],\n      (rowModel, columnFilters, globalFilter) => {\n        if (\n          !rowModel.rows.length ||\n          (!columnFilters?.length && !globalFilter)\n        ) {\n          for (let i = 0; i < rowModel.flatRows.length; i++) {\n            rowModel.flatRows[i]!.columnFilters = {}\n            rowModel.flatRows[i]!.columnFiltersMeta = {}\n          }\n          return rowModel\n        }\n\n        const resolvedColumnFilters: ResolvedColumnFilter<TGenerics>[] = []\n        const resolvedGlobalFilters: ResolvedColumnFilter<TGenerics>[] = []\n\n        ;(columnFilters ?? []).forEach(d => {\n          const column = instance.getColumn(d.id)\n\n          if (!column) {\n            if (process.env.NODE_ENV !== 'production') {\n              console.warn(\n                `Table: Could not find a column to filter with columnId: ${d.id}`\n              )\n            }\n          }\n\n          const filterFn = column.getFilterFn()\n\n          if (!filterFn) {\n            if (process.env.NODE_ENV !== 'production') {\n              console.warn(\n                `Could not find a valid 'column.filterFn' for column with the ID: ${column.id}.`\n              )\n            }\n            return\n          }\n\n          resolvedColumnFilters.push({\n            id: d.id,\n            filterFn,\n            resolvedValue: filterFn.resolveFilterValue?.(d.value) ?? d.value,\n          })\n        })\n\n        const filterableIds = columnFilters.map(d => d.id)\n\n        const globalFilterFn = instance.getGlobalFilterFn()\n\n        const globallyFilterableColumns = instance\n          .getAllLeafColumns()\n          .filter(column => column.getCanGlobalFilter())\n\n        if (\n          globalFilter &&\n          globalFilterFn &&\n          globallyFilterableColumns.length\n        ) {\n          filterableIds.push('__global__')\n\n          globallyFilterableColumns.forEach(column => {\n            resolvedGlobalFilters.push({\n              id: column.id,\n              filterFn: globalFilterFn,\n              resolvedValue:\n                globalFilterFn.resolveFilterValue?.(globalFilter) ??\n                globalFilter,\n            })\n          })\n        }\n\n        let currentColumnFilter\n        let currentGlobalFilter\n\n        // Flag the prefiltered row model with each filter state\n        for (let j = 0; j < rowModel.flatRows.length; j++) {\n          const row = rowModel.flatRows[j]!\n\n          row.columnFilters = {}\n\n          if (resolvedColumnFilters.length) {\n            for (let i = 0; i < resolvedColumnFilters.length; i++) {\n              currentColumnFilter = resolvedColumnFilters[i]!\n              const id = currentColumnFilter.id\n\n              // Tag the row with the column filter state\n              row.columnFilters[id] = currentColumnFilter.filterFn(\n                row,\n                id,\n                currentColumnFilter.resolvedValue,\n                filterMeta => {\n                  row.columnFiltersMeta[id] = filterMeta\n                }\n              )\n            }\n          }\n\n          if (resolvedGlobalFilters.length) {\n            for (let i = 0; i < resolvedGlobalFilters.length; i++) {\n              currentGlobalFilter = resolvedGlobalFilters[i]!\n              const id = currentGlobalFilter.id\n              // Tag the row with the first truthy global filter state\n              if (\n                currentGlobalFilter.filterFn(\n                  row,\n                  id,\n                  currentGlobalFilter.resolvedValue,\n                  filterMeta => {\n                    row.columnFiltersMeta[id] = filterMeta\n                  }\n                )\n              ) {\n                row.columnFilters.__global__ = true\n                break\n              }\n            }\n\n            if (row.columnFilters.__global__ !== true) {\n              row.columnFilters.__global__ = false\n            }\n          }\n        }\n\n        const filterRowsImpl = (row: Row<TGenerics>) => {\n          // Horizontally filter rows through each column\n          for (let i = 0; i < filterableIds.length; i++) {\n            if (row.columnFilters[filterableIds[i]!] === false) {\n              return false\n            }\n          }\n          return true\n        }\n\n        // Filter final rows using all of the active filters\n        return filterRows(rowModel.rows, filterRowsImpl, instance)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getFilteredRowModel',\n        debug: () => instance.options.debugAll ?? instance.options.debugTable,\n        onChange: () => {\n          instance._autoResetPageIndex()\n        },\n      }\n    )\n}\n","import { TableInstance, RowModel, TableGenerics, Row } from '../types'\nimport { memo } from '../utils'\nimport { filterRows } from './filterRowsUtils'\n\nexport function getFacetedRowModel<TGenerics extends TableGenerics>(): (\n  instance: TableInstance<TGenerics>,\n  columnId: string\n) => () => RowModel<TGenerics> {\n  return (instance, columnId) =>\n    memo(\n      () => [\n        instance.getPreFilteredRowModel(),\n        instance.getState().columnFilters,\n        instance.getState().globalFilter,\n        instance.getFilteredRowModel(),\n      ],\n      (preRowModel, columnFilters, globalFilter) => {\n        if (\n          !preRowModel.rows.length ||\n          (!columnFilters?.length && !globalFilter)\n        ) {\n          return preRowModel\n        }\n\n        const filterableIds = [\n          ...columnFilters.map(d => d.id).filter(d => d !== columnId),\n          globalFilter ? '__global__' : undefined,\n        ].filter(Boolean) as string[]\n\n        const filterRowsImpl = (row: Row<TGenerics>) => {\n          // Horizontally filter rows through each column\n          for (let i = 0; i < filterableIds.length; i++) {\n            if (row.columnFilters[filterableIds[i]!] === false) {\n              return false\n            }\n          }\n          return true\n        }\n\n        return filterRows(preRowModel.rows, filterRowsImpl, instance)\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedRowModel_' + columnId,\n        debug: () => instance.options.debugAll ?? instance.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n","import { TableInstance, TableGenerics } from '../types'\nimport { memo } from '../utils'\n\nexport function getFacetedUniqueValues<TGenerics extends TableGenerics>(): (\n  instance: TableInstance<TGenerics>,\n  columnId: string\n) => () => Map<any, number> {\n  return (instance, columnId) =>\n    memo(\n      () => [instance.getColumn(columnId).getFacetedRowModel()],\n      facetedRowModel => {\n        let facetedUniqueValues = new Map<any, number>()\n\n        for (let i = 0; i < facetedRowModel.flatRows.length; i++) {\n          const value = facetedRowModel.flatRows[i]?.getValue(columnId)\n\n          if (facetedUniqueValues.has(value)) {\n            facetedUniqueValues.set(\n              value,\n              (facetedUniqueValues.get(value) ?? 0) + 1\n            )\n          } else {\n            facetedUniqueValues.set(value, 1)\n          }\n        }\n\n        return facetedUniqueValues\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedUniqueValues_' + columnId,\n        debug: () => instance.options.debugAll ?? instance.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n","import { TableInstance, TableGenerics } from '../types'\nimport { memo } from '../utils'\n\nexport function getFacetedMinMaxValues<TGenerics extends TableGenerics>(): (\n  instance: TableInstance<TGenerics>,\n  columnId: string\n) => () => undefined | [number, number] {\n  return (instance, columnId) =>\n    memo(\n      () => [instance.getColumn(columnId).getFacetedRowModel()],\n      facetedRowModel => {\n        const firstValue = facetedRowModel.flatRows[0]?.getValue(columnId)\n\n        if (typeof firstValue === 'undefined') {\n          return undefined\n        }\n\n        let facetedMinMaxValues: [any, any] = [firstValue, firstValue]\n\n        for (let i = 0; i < facetedRowModel.flatRows.length; i++) {\n          const value = facetedRowModel.flatRows[i]?.getValue(columnId)\n\n          if (value < facetedMinMaxValues[0]) {\n            facetedMinMaxValues[0] = value\n          } else if (value > facetedMinMaxValues[1]) {\n            facetedMinMaxValues[1] = value\n          }\n        }\n\n        return facetedMinMaxValues\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedMinMaxValues_' + columnId,\n        debug: () => instance.options.debugAll ?? instance.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n","import { TableInstance, Row, RowModel, TableGenerics } from '../types'\nimport { SortingFn } from '../features/Sorting'\nimport { memo } from '../utils'\n\nexport function getSortedRowModel<TGenerics extends TableGenerics>(): (\n  instance: TableInstance<TGenerics>\n) => () => RowModel<TGenerics> {\n  return instance =>\n    memo(\n      () => [instance.getState().sorting, instance.getPreSortedRowModel()],\n      (sorting, rowModel) => {\n        if (!rowModel.rows.length || !sorting?.length) {\n          return rowModel\n        }\n\n        const sortingState = instance.getState().sorting\n\n        const sortedFlatRows: Row<TGenerics>[] = []\n\n        // Filter out sortings that correspond to non existing columns\n        const availableSorting = sortingState.filter(sort =>\n          instance.getColumn(sort.id).getCanSort()\n        )\n\n        const columnInfoById: Record<\n          string,\n          {\n            sortUndefined?: false | -1 | 1\n            invertSorting?: boolean\n            sortingFn: SortingFn<TGenerics>\n          }\n        > = {}\n\n        availableSorting.forEach(sortEntry => {\n          const column = instance.getColumn(sortEntry.id)\n\n          columnInfoById[sortEntry.id] = {\n            sortUndefined: column.sortUndefined,\n            invertSorting: column.invertSorting,\n            sortingFn: column.getSortingFn(),\n          }\n        })\n\n        const sortData = (rows: Row<TGenerics>[]) => {\n          // This will also perform a stable sorting using the row index\n          // if needed.\n          const sortedData = rows.slice()\n\n          sortedData.sort((rowA, rowB) => {\n            for (let i = 0; i < availableSorting.length; i += 1) {\n              const sortEntry = availableSorting[i]!\n              const columnInfo = columnInfoById[sortEntry.id]!\n              const isDesc = sortEntry?.desc ?? false\n\n              if (columnInfo.sortUndefined) {\n                const aValue = rowA.getValue(sortEntry.id)\n                const bValue = rowB.getValue(sortEntry.id)\n\n                const aUndefined = typeof aValue === 'undefined'\n                const bUndefined = typeof bValue === 'undefined'\n\n                if (aUndefined || bUndefined) {\n                  return aUndefined && bUndefined\n                    ? 0\n                    : aUndefined\n                    ? columnInfo.sortUndefined\n                    : -columnInfo.sortUndefined\n                }\n              }\n\n              // This function should always return in ascending order\n              let sortInt = columnInfo.sortingFn(rowA, rowB, sortEntry.id)\n\n              if (sortInt !== 0) {\n                if (isDesc) {\n                  sortInt *= -1\n                }\n\n                if (columnInfo.invertSorting) {\n                  sortInt *= -1\n                }\n\n                return sortInt\n              }\n            }\n\n            return rowA.index - rowB.index\n          })\n\n          // If there are sub-rows, sort them\n          sortedData.forEach(row => {\n            sortedFlatRows.push(row)\n            if (!row.subRows || row.subRows.length <= 1) {\n              return\n            }\n            row.subRows = sortData(row.subRows)\n          })\n\n          return sortedData\n        }\n\n        return {\n          rows: sortData(rowModel.rows),\n          flatRows: sortedFlatRows,\n          rowsById: rowModel.rowsById,\n        }\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getSortedRowModel',\n        debug: () => instance.options.debugAll ?? instance.options.debugTable,\n        onChange: () => {\n          instance._autoResetPageIndex()\n        },\n      }\n    )\n}\n","import { CoreRow } from '../features/Rows'\nimport { TableInstance, Row, RowModel, TableGenerics } from '../types'\nimport { flattenBy, memo } from '../utils'\n\nexport function getGroupedRowModel<TGenerics extends TableGenerics>(): (\n  instance: TableInstance<TGenerics>\n) => () => RowModel<TGenerics> {\n  return instance =>\n    memo(\n      () => [instance.getState().grouping, instance.getPreGroupedRowModel()],\n      (grouping, rowModel) => {\n        if (!rowModel.rows.length || !grouping.length) {\n          return rowModel\n        }\n\n        // Filter the grouping list down to columns that exist\n        const existingGrouping = grouping.filter(columnId =>\n          instance.getColumn(columnId)\n        )\n\n        const groupedFlatRows: Row<TGenerics>[] = []\n        const groupedRowsById: Record<string, Row<TGenerics>> = {}\n        // const onlyGroupedFlatRows: Row[] = [];\n        // const onlyGroupedRowsById: Record<RowId, Row> = {};\n        // const nonGroupedFlatRows: Row[] = [];\n        // const nonGroupedRowsById: Record<RowId, Row> = {};\n\n        // Recursively group the data\n        const groupUpRecursively = (\n          rows: Row<TGenerics>[],\n          depth = 0,\n          parentId: string\n        ) => {\n          // This is the last level, just return the rows\n          if (depth === existingGrouping.length) {\n            return rows\n          }\n\n          const columnId = existingGrouping[depth]!\n\n          // Group the rows together for this level\n          const rowGroupsMap = groupBy(rows, columnId)\n\n          // Peform aggregations for each group\n          const aggregatedGroupedRows = Array.from(rowGroupsMap.entries()).map(\n            ([groupingValue, groupedRows], index) => {\n              let id = `${columnId}:${groupingValue}`\n              id = parentId ? `${parentId}>${id}` : id\n\n              // First, Recurse to group sub rows before aggregation\n              const subRows = groupUpRecursively(groupedRows, depth + 1, id)\n\n              // Flatten the leaf rows of the rows in this group\n              const leafRows = depth\n                ? flattenBy(groupedRows, row => row.subRows)\n                : groupedRows\n\n              const row = instance.createRow(id, undefined, index, depth)\n\n              Object.assign(row, {\n                groupingColumnId: columnId,\n                groupingValue,\n                subRows,\n                leafRows,\n                getValue: (columnId: string) => {\n                  // Don't aggregate columns that are in the grouping\n                  if (existingGrouping.includes(columnId)) {\n                    if (row.valuesCache.hasOwnProperty(columnId)) {\n                      return row.valuesCache[columnId]\n                    }\n\n                    if (groupedRows[0]) {\n                      row.valuesCache[columnId] =\n                        groupedRows[0].getValue(columnId) ?? undefined\n                    }\n\n                    return row.valuesCache[columnId]\n                  }\n\n                  if (row.groupingValuesCache.hasOwnProperty(columnId)) {\n                    return row.groupingValuesCache[columnId]\n                  }\n\n                  // Aggregate the values\n                  const column = instance.getColumn(columnId)\n                  const aggregateFn = column.getColumnAggregationFn()\n\n                  if (aggregateFn) {\n                    row.groupingValuesCache[columnId] = aggregateFn(\n                      () =>\n                        leafRows.map(row => {\n                          let columnValue = row.getValue(columnId)\n\n                          if (!depth && column.aggregateValue) {\n                            columnValue = column.aggregateValue(columnValue)\n                          }\n\n                          return columnValue\n                        }),\n                      () => groupedRows.map(row => row.getValue(columnId))\n                    )\n\n                    return row.groupingValuesCache[columnId]\n                  } else if (column.aggregationFn) {\n                    console.info({ column })\n                    throw new Error(\n                      process.env.NODE_ENV !== 'production'\n                        ? `Table: Invalid column.aggregateType option for column listed above`\n                        : ''\n                    )\n                  }\n                },\n              })\n\n              subRows.forEach(subRow => {\n                groupedFlatRows.push(subRow)\n                groupedRowsById[subRow.id] = subRow\n                // if (subRow.getIsGrouped?.()) {\n                //   onlyGroupedFlatRows.push(subRow);\n                //   onlyGroupedRowsById[subRow.id] = subRow;\n                // } else {\n                //   nonGroupedFlatRows.push(subRow);\n                //   nonGroupedRowsById[subRow.id] = subRow;\n                // }\n              })\n\n              return row\n            }\n          )\n\n          return aggregatedGroupedRows\n        }\n\n        const groupedRows = groupUpRecursively(rowModel.rows, 0, '')\n\n        groupedRows.forEach(subRow => {\n          groupedFlatRows.push(subRow)\n          groupedRowsById[subRow.id] = subRow\n          // if (subRow.getIsGrouped?.()) {\n          //   onlyGroupedFlatRows.push(subRow);\n          //   onlyGroupedRowsById[subRow.id] = subRow;\n          // } else {\n          //   nonGroupedFlatRows.push(subRow);\n          //   nonGroupedRowsById[subRow.id] = subRow;\n          // }\n        })\n\n        return {\n          rows: groupedRows,\n          flatRows: groupedFlatRows,\n          rowsById: groupedRowsById,\n        }\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getGroupedRowModel',\n        debug: () => instance.options.debugAll ?? instance.options.debugTable,\n        onChange: () => {\n          instance._queue(() => {\n            instance._autoResetExpanded()\n            instance._autoResetPageIndex()\n          })\n        },\n      }\n    )\n}\n\nfunction groupBy<TGenerics extends TableGenerics>(\n  rows: Row<TGenerics>[],\n  columnId: string\n) {\n  const groupMap = new Map<any, Row<TGenerics>[]>()\n\n  return rows.reduce((map, row) => {\n    const resKey = `${row.getValue(columnId)}`\n    const previous = map.get(resKey)\n    if (!previous) {\n      map.set(resKey, [row])\n    } else {\n      map.set(resKey, [...previous, row])\n    }\n    return map\n  }, groupMap)\n}\n","import { TableInstance, Row, RowModel, TableGenerics } from '../types'\nimport { memo } from '../utils'\n\nexport function getExpandedRowModel<TGenerics extends TableGenerics>(): (\n  instance: TableInstance<TGenerics>\n) => () => RowModel<TGenerics> {\n  return instance =>\n    memo(\n      () => [\n        instance.getState().expanded,\n        instance.getPreExpandedRowModel(),\n        instance.options.paginateExpandedRows,\n      ],\n      (expanded, rowModel, paginateExpandedRows) => {\n        if (\n          !rowModel.rows.length ||\n          // Do not expand if rows are not included in pagination\n          !paginateExpandedRows ||\n          (expanded !== true && !Object.keys(expanded ?? {}).length)\n        ) {\n          return rowModel\n        }\n\n        return expandRows(rowModel, instance)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getExpandedRowModel',\n        debug: () => instance.options.debugAll ?? instance.options.debugTable,\n      }\n    )\n}\n\nexport function expandRows<TGenerics extends TableGenerics>(\n  rowModel: RowModel<TGenerics>,\n  instance: TableInstance<TGenerics>\n) {\n  const expandedRows: Row<TGenerics>[] = []\n\n  const handleRow = (row: Row<TGenerics>) => {\n    expandedRows.push(row)\n\n    if (\n      instance.options.expandSubRows &&\n      row.subRows?.length &&\n      row.getIsExpanded()\n    ) {\n      row.subRows.forEach(handleRow)\n    }\n  }\n\n  rowModel.rows.forEach(handleRow)\n\n  return {\n    rows: expandedRows,\n    flatRows: rowModel.flatRows,\n    rowsById: rowModel.rowsById,\n  }\n}\n","import { TableInstance, RowModel, TableGenerics } from '../types'\nimport { memo } from '../utils'\nimport { expandRows } from './getExpandedRowModel'\n\nexport function getPaginationRowModel<TGenerics extends TableGenerics>(opts?: {\n  initialSync: boolean\n}): (instance: TableInstance<TGenerics>) => () => RowModel<TGenerics> {\n  return instance =>\n    memo(\n      () => [\n        instance.getState().pagination,\n        instance.getPrePaginationRowModel(),\n      ],\n      (pagination, rowModel) => {\n        if (!rowModel.rows.length) {\n          return rowModel\n        }\n\n        const { pageSize, pageIndex } = pagination\n        let { rows, flatRows, rowsById } = rowModel\n        const pageStart = pageSize * pageIndex\n        const pageEnd = pageStart + pageSize\n\n        rows = rows.slice(pageStart, pageEnd)\n\n        if (!instance.options.paginateExpandedRows) {\n          return expandRows(\n            {\n              rows,\n              flatRows,\n              rowsById,\n            },\n            instance\n          )\n        }\n\n        return {\n          rows,\n          flatRows,\n          rowsById,\n        }\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getPaginationRowModel',\n        debug: () => instance.options.debugAll ?? instance.options.debugTable,\n      }\n    )\n}\n"],"names":["functionalUpdate","updater","input","noop","makeStateUpdater","key","instance","setState","old","isFunction","d","Function","flattenBy","arr","getChildren","flat","recurse","subArr","forEach","item","push","children","length","memo","getDeps","fn","opts","deps","result","depTime","debug","Date","now","newDeps","depsChanged","some","dep","index","resultTime","onChange","depEndTime","Math","round","resultEndTime","resultFpsPercentage","pad","str","num","String","console","info","max","min","Columns","createInstance","getDefaultColumn","options","defaultColumn","header","props","column","id","footer","cell","getValue","toString","_features","reduce","obj","feature","Object","assign","debugAll","debugColumns","getColumnDefs","columns","createColumn","columnDef","depth","parent","accessorKey","undefined","accessorFn","originalRow","Error","columnDefType","getFlatColumns","flatMap","process","getLeafColumns","_getOrderColumnsFn","orderColumns","leafColumns","getAllColumns","columnDefs","recurseColumns","map","getAllFlatColumns","allColumns","getAllFlatColumnsById","flatColumns","acc","getAllLeafColumns","getColumn","columnId","warn","Rows","getRowId","row","join","createRow","original","rowIndex","subRows","valuesCache","hasOwnProperty","getLeafRows","i","getCoreRowModel","_getCoreRowModel","getRowModel","getPaginationRowModel","getRow","rowsById","Cells","getAllCells","createCell","debugRows","getAllCellsByColumnId","allCells","rowId","renderCell","_render","getCell","defaultColumnSizing","size","minSize","maxSize","Number","MAX_SAFE_INTEGER","getDefaultColumnSizingInfoState","startOffset","startSize","deltaOffset","deltaPercentage","isResizingColumn","columnSizingStart","ColumnSizing","getInitialState","state","columnSizing","columnSizingInfo","getDefaultOptions","columnResizeMode","onColumnSizingChange","onColumnSizingInfoChange","getSize","columnSize","getState","getStart","position","getVisibleLeafColumns","getLeftVisibleLeafColumns","getRightVisibleLeafColumns","findIndex","prevSiblingColumn","resetSize","setColumnSizing","_","rest","getCanResize","enableResizing","enableColumnResizing","getIsResizing","createHeader","sum","subHeaders","prevSiblingHeader","headerGroup","headers","getResizeHandler","canResize","e","persist","isTouchStartEvent","touches","getLeafHeaders","clientX","updateOffset","eventType","clientXPos","newColumnSizing","setColumnSizingInfo","headerSize","onMove","onEnd","mouseEvents","moveHandler","upHandler","document","removeEventListener","passiveIfSupported","passiveEventSupported","passive","addEventListener","resetColumnSizing","defaultState","initialState","resetHeaderSizeInfo","getTotalSize","getHeaderGroups","getLeftTotalSize","getLeftHeaderGroups","getCenterTotalSize","getCenterHeaderGroups","getRightTotalSize","getRightHeaderGroups","passiveSupported","supported","window","err","type","Expanding","expanded","onExpandedChange","autoResetExpanded","expandSubRows","paginateExpandedRows","registered","queued","_autoResetExpanded","_queue","autoResetAll","resetExpanded","setExpanded","toggleAllRowsExpanded","getIsAllRowsExpanded","getCanSomeRowsExpand","flatRows","getCanExpand","getToggleAllRowsExpandedHandler","getIsSomeRowsExpanded","values","Boolean","getIsExpanded","getExpandedDepth","maxDepth","rowIds","keys","splitId","split","getPreExpandedRowModel","getGroupedRowModel","getExpandedRowModel","_getExpandedRowModel","manualExpanding","toggleExpanded","exists","oldExpanded","getIsRowExpanded","getRowCanExpand","enableExpanding","getToggleExpandedHandler","canExpand","includesString","filterValue","search","toLowerCase","includes","autoRemove","val","testFalsey","includesStringSensitive","equalsString","arrIncludes","arrIncludesAll","arrIncludesSome","equals","weakEquals","inNumberRange","rowValue","resolveFilterValue","unsafeMin","unsafeMax","parsedMin","parseFloat","parsedMax","isNaN","Infinity","temp","filterFns","Filters","filterFn","columnFilters","globalFilter","onColumnFiltersChange","onGlobalFilterChange","filterFromLeafRows","globalFilterFn","getColumnCanGlobalFilter","value","getAutoFilterFn","firstRow","Array","isArray","getFilterFn","userFilterFns","getCanFilter","enableColumnFilter","enableColumnFilters","enableFilters","getCanGlobalFilter","enableGlobalFilter","getIsFiltered","getFilterIndex","getFilterValue","find","setFilterValue","setColumnFilters","previousfilter","newFilter","shouldAutoRemoveFilter","filter","newFilterObj","_getFacetedRowModel","getFacetedRowModel","getPreFilteredRowModel","_getFacetedUniqueValues","getFacetedUniqueValues","Map","_getFacetedMinMaxValues","getFacetedMinMaxValues","columnFiltersMeta","subRowsByFacetId","getGlobalAutoFilterFn","getGlobalFilterFn","updateFn","setGlobalFilter","resetGlobalFilter","resetColumnFilters","_getFilteredRowModel","getFilteredRowModel","manualFiltering","_getGlobalFacetedRowModel","getGlobalFacetedRowModel","_getGlobalFacetedUniqueValues","getGlobalFacetedUniqueValues","_getGlobalFacetedMinMaxValues","getGlobalFacetedMinMaxValues","aggregationFns","extent","mean","median","unique","uniqueCount","count","_getLeafValues","getChildValues","next","getLeafValues","leafValues","from","Set","Grouping","aggregationFn","grouping","onGroupingChange","groupedColumnMode","toggleGrouping","setGrouping","getCanGroup","enableGrouping","getIsGrouped","getGroupedIndex","indexOf","getToggleGroupingHandler","canGroup","getColumnAutoAggregationFn","prototype","call","getColumnAggregationFn","userAggregationFns","resetGrouping","getPreGroupedRowModel","getSortedRowModel","_getGroupedRowModel","manualGrouping","groupingColumnId","groupingValuesCache","getIsPlaceholder","getIsAggregated","renderAggregatedCell","template","aggregatedCell","nonGroupingColumns","col","groupingColumns","g","Ordering","columnOrder","onColumnOrderChange","setColumnOrder","resetColumnOrder","orderedColumns","columnOrderCopy","columnsCopy","targetColumnId","shift","foundIndex","splice","defaultPageIndex","defaultPageSize","getDefaultPaginationState","pageIndex","pageSize","Pagination","pagination","onPaginationChange","_autoResetPageIndex","autoResetPageIndex","manualPagination","resetPageIndex","setPagination","safeUpdater","newState","resetPagination","setPageIndex","maxPageIndex","pageCount","resetPageSize","setPageSize","topRowIndex","floor","setPageCount","newPageCount","getPageOptions","pageOptions","fill","debugTable","getCanPreviousPage","getCanNextPage","getPageCount","previousPage","nextPage","getPrePaginationRowModel","_getPaginationRowModel","ceil","rows","getDefaultPinningState","left","right","Pinning","columnPinning","onColumnPinningChange","pin","columnIds","setColumnPinning","getCanPin","enablePinning","getIsPinned","leafColumnIds","isLeft","isRight","getPinnedIndex","getCenterVisibleCells","_getAllVisibleCells","leftAndRight","getLeftVisibleCells","cells","getRightVisibleCells","resetColumnPinning","getIsSomeColumnsPinned","getLeftLeafColumns","getRightLeafColumns","getCenterLeafColumns","RowSelection","rowSelection","onRowSelectionChange","enableRowSelection","enableMultiRowSelection","enableSubRowSelection","setRowSelection","resetRowSelection","toggleAllRowsSelected","getIsAllRowsSelected","preGroupedFlatRows","toggleAllPageRowsSelected","getIsAllPageRowsSelected","mutateRowIsSelected","getPreSelectedRowModel","getSelectedRowModel","rowModel","selectRowsFn","getFilteredSelectedRowModel","getGroupedSelectedRowModel","preFilteredFlatRows","isAllRowsSelected","paginationFlatRows","isAllPageRowsSelected","getIsSomeRowsSelected","getIsSomePageRowsSelected","getToggleAllRowsSelectedHandler","target","checked","getToggleAllPageRowsSelectedHandler","toggleSelected","isSelected","getIsSelected","selectedRowIds","isRowSelected","getIsSomeSelected","getCanSelect","getCanSelectSubRows","getCanMultiSelect","getToggleSelectedHandler","canSelect","newSelectedFlatRows","newSelectedRowsById","recurseRows","selection","allChildrenSelected","someSelected","subRow","reSplitAlphaNumeric","sortingFns","alphanumeric","alphanumericCaseSensitive","text","textCaseSensitive","datetime","basic","rowA","rowB","compareAlphanumeric","aStr","bStr","a","b","aa","bb","an","parseInt","bn","combo","sort","compareBasic","getTime","Sorting","sorting","sortingFn","onSortingChange","isMultiSortEvent","shiftKey","getAutoSortingFn","firstRows","slice","isString","getAutoSortDir","getSortingFn","userSortingFn","toggleSorting","desc","multi","setSorting","existingSorting","existingIndex","hasDescDefined","newSorting","sortAction","getCanMultiSort","sortDescFirst","enableSortingRemoval","enableMultiRemove","maxMultiSortColCount","getCanSort","enableSorting","enableMultiSort","getIsSorted","columnSort","getSortIndex","clearSorting","getToggleSortingHandler","canSort","resetSorting","getPreSortedRowModel","_getSortedRowModel","manualSorting","Visibility","columnVisibility","onColumnVisibilityChange","defaultIsVisible","toggleVisibility","getCanHide","setColumnVisibility","getIsVisible","enableHiding","getToggleVisibilityHandler","getVisibleCells","center","makeVisibleColumnsMethod","getColumns","getVisibleFlatColumns","getCenterVisibleLeafColumns","resetColumnVisibility","toggleAllColumnsVisible","getIsAllColumnsVisible","getIsSomeColumnsVisible","getToggleAllColumnsVisibilityHandler","Headers","isPlaceholder","placeholderId","colSpan","rowSpan","leafHeaders","recurseHeader","h","renderHeader","renderFooter","leftColumns","rightColumns","centerColumns","headerGroups","buildHeaderGroups","debugHeaders","orderedLeafColumns","getFooterGroups","reverse","getLeftFooterGroups","getCenterFooterGroups","getRightFooterGroups","getFlatHeaders","getLeftFlatHeaders","getCenterFlatHeaders","getRightFlatHeaders","getCenterLeafHeaders","flatHeaders","getLeftLeafHeaders","getRightLeafHeaders","getHeader","columnsToGroup","headerFamily","findMaxDepth","createHeaderGroup","headersToGroup","pendingParentHeaders","headerToGroup","latestPendingParentHeader","isLeafHeader","bottomHeaders","recurseHeadersForSpans","filteredHeaders","childRowSpans","childColSpan","childRowSpan","minChildRowSpan","createTableInstance","defaultOptions","mergeOptions","coreInitialState","queuedTimeout","midInstance","cb","Promise","resolve","then","catch","error","setTimeout","reset","setOptions","newOptions","render","onStateChange","createTableFactory","createTable","__","table","generics","setGenerics","setRowType","setTableMetaType","setColumnMetaType","setFilterMetaType","createDisplayColumn","createGroup","createDataColumn","accessor","data","accessRows","originalRows","getSubRows","originalSubRows","filterRows","filterRowImpl","filterRowModelFromLeafs","filterRowModelFromRoot","rowsToFilter","filterRow","newFilteredFlatRows","newFilteredRowsById","newRow","recurseFilterRows","pass","resolvedColumnFilters","resolvedGlobalFilters","resolvedValue","filterableIds","globallyFilterableColumns","currentColumnFilter","currentGlobalFilter","j","filterMeta","__global__","filterRowsImpl","preRowModel","facetedRowModel","facetedUniqueValues","has","set","get","firstValue","facetedMinMaxValues","sortingState","sortedFlatRows","availableSorting","columnInfoById","sortEntry","sortUndefined","invertSorting","sortData","sortedData","columnInfo","isDesc","aValue","bValue","aUndefined","bUndefined","sortInt","existingGrouping","groupedFlatRows","groupedRowsById","groupUpRecursively","parentId","rowGroupsMap","groupBy","aggregatedGroupedRows","entries","groupingValue","groupedRows","leafRows","aggregateFn","columnValue","aggregateValue","groupMap","resKey","previous","expandRows","expandedRows","handleRow","pageStart","pageEnd"],"mappings":";;;;;;;;;;;;;;;;EAaO,SAASA,gBAAT,CAA6BC,OAA7B,EAAkDC,KAAlD,EAA+D;EACpE,EAAO,OAAA,OAAOD,OAAP,KAAmB,UAAnB,GACFA,OAAD,CAA6BC,KAA7B,CADG,GAEHD,OAFJ,CAAA;EAGD,CAAA;EAEM,SAASE,IAAT,GAAgB;EAEtB,CAAA;EAEM,SAASC,gBAAT,CAA0BC,GAA1B,EAAiDC,QAAjD,EAAoE;EACzE,EAAA,OAAQL,OAAD,IAA2B;EAC9BK,IAAAA,QAAD,CAAkBC,QAAlB,CAAyCC,GAAd,IAAmC;EAC7D,MAAO,OAAA,EACL,GAAGA,GADE;EAEL,QAACH,CAAAA,GAAD,GAAOL,gBAAgB,CAACC,OAAD,EAAWO,GAAD,CAAaH,GAAb,CAAV,CAAA;EAFlB,OAAP,CAAA;EAID,KALA,CAAA,CAAA;EAMF,GAPD,CAAA;EAQD,CAAA;EAIM,SAASI,UAAT,CAA2CC,CAA3C,EAA2D;EAChE,EAAOA,OAAAA,CAAC,YAAYC,QAApB,CAAA;EACD,CAAA;EAEM,SAASC,SAAT,CACLC,GADK,EAELC,WAFK,EAGL;EACA,EAAMC,MAAAA,IAAa,GAAG,EAAtB,CAAA;;EAEA,EAAMC,MAAAA,OAAO,GAAIC,MAAD,IAAqB;EACnCA,IAAAA,MAAM,CAACC,OAAP,CAAeC,IAAI,IAAI;EACrBJ,MAAAA,IAAI,CAACK,IAAL,CAAUD,IAAV,CAAA,CAAA;EACA,MAAA,MAAME,QAAQ,GAAGP,WAAW,CAACK,IAAD,CAA5B,CAAA;;EACA,MAAA,IAAIE,QAAJ,IAAA,IAAA,IAAIA,QAAQ,CAAEC,MAAd,EAAsB;EACpBN,QAAAA,OAAO,CAACK,QAAD,CAAP,CAAA;EACD,OAAA;EACF,KAND,CAAA,CAAA;EAOD,GARD,CAAA;;EAUAL,EAAAA,OAAO,CAACH,GAAD,CAAP,CAAA;EAEA,EAAA,OAAOE,IAAP,CAAA;EACD,CAAA;EAEM,SAASQ,IAAT,CACLC,OADK,EAELC,EAFK,EAGLC,IAHK,EAQU;EACf,EAAIC,IAAAA,IAAW,GAAG,EAAlB,CAAA;EACA,EAAA,IAAIC,MAAJ,CAAA;EAEA,EAAA,OAAO,MAAM;EACX,IAAA,IAAIC,OAAJ,CAAA;EACA,IAAA,IAAIH,IAAI,CAACrB,GAAL,IAAYqB,IAAI,CAACI,KAArB,EAA4BD,OAAO,GAAGE,IAAI,CAACC,GAAL,EAAV,CAAA;EAE5B,IAAMC,MAAAA,OAAO,GAAGT,OAAO,EAAvB,CAAA;EAEA,IAAMU,MAAAA,WAAW,GACfD,OAAO,CAACX,MAAR,KAAmBK,IAAI,CAACL,MAAxB,IACAW,OAAO,CAACE,IAAR,CAAa,CAACC,GAAD,EAAWC,KAAX,KAA6BV,IAAI,CAACU,KAAD,CAAJ,KAAgBD,GAA1D,CAFF,CAAA;;EAIA,IAAI,IAAA,CAACF,WAAL,EAAkB;EAChB,MAAA,OAAON,MAAP,CAAA;EACD,KAAA;;EAEDD,IAAAA,IAAI,GAAGM,OAAP,CAAA;EAEA,IAAA,IAAIK,UAAJ,CAAA;EACA,IAAA,IAAIZ,IAAI,CAACrB,GAAL,IAAYqB,IAAI,CAACI,KAArB,EAA4BQ,UAAU,GAAGP,IAAI,CAACC,GAAL,EAAb,CAAA;EAE5BJ,IAAAA,MAAM,GAAGH,EAAE,CAAC,GAAGQ,OAAJ,CAAX,CAAA;EACAP,IAAAA,IAAI,IAAJ,IAAA,GAAA,KAAA,CAAA,GAAAA,IAAI,CAAEa,QAAN,IAAA,IAAA,GAAA,KAAA,CAAA,GAAAb,IAAI,CAAEa,QAAN,CAAiBX,MAAjB,CAAA,CAAA;;EAEA,IAAA,IAAIF,IAAI,CAACrB,GAAL,IAAYqB,IAAI,CAACI,KAArB,EAA4B;EAC1B,MAAA,IAAIJ,IAAJ,IAAIA,IAAAA,IAAAA,IAAI,CAAEI,KAAN,EAAJ,EAAmB;EACjB,QAAA,MAAMU,UAAU,GAAGC,IAAI,CAACC,KAAL,CAAW,CAACX,IAAI,CAACC,GAAL,EAAaH,GAAAA,OAAd,IAA0B,GAArC,IAA4C,GAA/D,CAAA;EACA,QAAA,MAAMc,aAAa,GAAGF,IAAI,CAACC,KAAL,CAAW,CAACX,IAAI,CAACC,GAAL,EAAaM,GAAAA,UAAd,IAA6B,GAAxC,IAA+C,GAArE,CAAA;EACA,QAAA,MAAMM,mBAAmB,GAAGD,aAAa,GAAG,EAA5C,CAAA;;EAEA,QAAA,MAAME,GAAG,GAAG,CAACC,GAAD,EAAuBC,GAAvB,KAAuC;EACjDD,UAAAA,GAAG,GAAGE,MAAM,CAACF,GAAD,CAAZ,CAAA;;EACA,UAAA,OAAOA,GAAG,CAACxB,MAAJ,GAAayB,GAApB,EAAyB;EACvBD,YAAAA,GAAG,GAAG,GAAA,GAAMA,GAAZ,CAAA;EACD,WAAA;;EACD,UAAA,OAAOA,GAAP,CAAA;EACD,SAND,CAAA;;EAQAG,QAAAA,OAAO,CAACC,IAAR,eACSL,GAAG,CAACF,aAAD,EAAgB,CAAhB,CADZ,GAAA,IAAA,GACmCE,GAAG,CAACL,UAAD,EAAa,CAAb,CADtC,uGAKiBC,IAAI,CAACU,GAAL,CACX,CADW,EAEXV,IAAI,CAACW,GAAL,CAAS,MAAM,GAAMR,GAAAA,mBAArB,EAA0C,GAA1C,CAFW,CALjB,GAAA,gBAAA,EASElB,IATF,IASEA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,IAAI,CAAErB,GATR,CAAA,CAAA;EAWD,OAAA;EACF,KAAA;;EAED,IAAA,OAAOuB,MAAP,CAAA;EACD,GAnDD,CAAA;EAoDD;;EC5CD;EAEO,MAAMyB,OAAO,GAAG;EACrBC,EAAAA,cAAc,EACZhD,QADc,IAEiB;EAC/B,IAAO,OAAA;EACLiD,MAAAA,gBAAgB,EAAEhC,IAAI,CACpB,MAAM,CAACjB,QAAQ,CAACkD,OAAT,CAAiBC,aAAlB,CADc,EAEpBA,aAAa,IAAI;EAAA,QAAA,IAAA,cAAA,CAAA;;EACfA,QAAAA,aAAa,GAAA,CAAA,cAAA,GAAIA,aAAJ,KAAA,IAAA,GAAA,cAAA,GAAqB,EAAlC,CAAA;EAEA,QAAO,OAAA;EACLC,UAAAA,MAAM,EAAEC,KAAK,IAAIA,KAAK,CAACD,MAAN,CAAaE,MAAb,CAAoBC,EADhC;EAELC,UAAAA,MAAM,EAAEH,KAAK,IAAIA,KAAK,CAACD,MAAN,CAAaE,MAAb,CAAoBC,EAFhC;EAGLE,UAAAA,IAAI,EAAEJ,KAAK,IAAA;EAAA,YAAA,IAAA,qBAAA,EAAA,sBAAA,EAAA,eAAA,CAAA;;EAAA,YAAI,OAAA,CAAA,qBAAA,GAAA,CAAA,sBAAA,GAAA,CAAA,eAAA,GAAAA,KAAK,CAACK,QAAN,IAAiBC,QAArB,KAAA,IAAA,GAAA,KAAA,CAAA,GAAI,sBAAJ,CAAA,IAAA,CAAA,eAAA,CAAA,KAAA,IAAA,GAAA,qBAAA,GAAqC,IAArC,CAAA;EAAA,WAHN;EAIL,UAAG3D,GAAAA,QAAQ,CAAC4D,SAAT,CAAmBC,MAAnB,CAA0B,CAACC,GAAD,EAAMC,OAAN,KAAkB;EAC7C,YAAA,OAAOC,MAAM,CAACC,MAAP,CAAcH,GAAd,EAAmBC,OAAO,CAACd,gBAA3B,IAAmBc,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,OAAO,CAACd,gBAAR,EAAnB,CAAP,CAAA;EACD,WAFE,EAEA,EAFA,CAJE;EAOL,UAAGE,GAAAA,aAAAA;EAPE,SAAP,CAAA;EASD,OAdmB,EAepB;EACE3B,QAAAA,KAAK,EAAE,MAAA;EAAA,UAAA,IAAA,qBAAA,CAAA;;EAAA,UACLxB,OAAAA,CAAAA,qBAAAA,GAAAA,QAAQ,CAACkD,OAAT,CAAiBgB,QADZ,oCACwBlE,QAAQ,CAACkD,OAAT,CAAiBiB,YADzC,CAAA;EAAA,SADT;EAGEpE,QAAAA,GAAG,EAA4C,kBAAA;EAHjD,OAfoB,CADjB;EAuBLqE,MAAAA,aAAa,EAAE,MAAMpE,QAAQ,CAACkD,OAAT,CAAiBmB,OAvBjC;EAyBLC,MAAAA,YAAY,EAAE,CACZC,SADY,EAEZC,KAFY,EAGZC,MAHY,KAIT;EAAA,QAAA,IAAA,IAAA,EAAA,aAAA,CAAA;;EACH,QAAA,MAAMtB,aAAa,GAAGnD,QAAQ,CAACiD,gBAAT,EAAtB,CAAA;EAEA,QAAIM,IAAAA,EAAE,4BACJgB,SAAS,CAAChB,EADN,KAEJgB,IAAAA,GAAAA,aAAAA,GAAAA,SAAS,CAACG,WAFN,KAAA,IAAA,GAAA,IAAA,GAGH,OAAOH,SAAS,CAACnB,MAAjB,KAA4B,QAA5B,GAAuCmB,SAAS,CAACnB,MAAjD,GAA0DuB,SAH7D,CAAA;EAKA,QAAA,IAAIC,UAAJ,CAAA;;EAEA,QAAIL,IAAAA,SAAS,CAACK,UAAd,EAA0B;EACxBA,UAAAA,UAAU,GAAGL,SAAS,CAACK,UAAvB,CAAA;EACD,SAFD,MAEO,IAAIL,SAAS,CAACG,WAAd,EAA2B;EAChCE,UAAAA,UAAU,GAAIC,WAAD,IACVA,WAAD,CAAqBN,SAAS,CAACG,WAA/B,CADF,CAAA;EAED,SAAA;;EAED,QAAI,IAAA,CAACnB,EAAL,EAAS;EACP,UAA2C;EACzC,YAAA,MAAM,IAAIuB,KAAJ,CACJP,SAAS,CAACK,UAAV,4GADI,CAAN,CAAA;EAKD,WAAA;EAEF,SAAA;;EAED,QAAA,IAAItB,MAA6B,GAAG,EAClC,GAAGH,aAD+B;EAElC,UAAA,GAAGoB,SAF+B;EAGlChB,UAAAA,EAAE,OAAKA,EAH2B;EAIlCqB,UAAAA,UAJkC;EAKlCH,UAAAA,MAAM,EAAEA,MAL0B;EAMlCD,UAAAA,KANkC;EAOlCD,UAAAA,SAPkC;EAQlCQ,UAAAA,aAAa,EAAER,SAAS,CAACQ,aARS;EASlCV,UAAAA,OAAO,EAAE,EATyB;EAUlCW,UAAAA,cAAc,EAAE/D,IAAI,CAClB,MAAM,CAAC,IAAD,CADY,EAElB,MAAM;EAAA,YAAA,IAAA,eAAA,CAAA;;EACJ,YAAA,OAAO,CACLqC,MADK,EAEL,uBAAGA,MAAM,CAACe,OAAV,KAAG,IAAA,GAAA,KAAA,CAAA,GAAA,eAAA,CAAgBY,OAAhB,CAAwB7E,CAAC,IAAIA,CAAC,CAAC4E,cAAF,EAA7B,CAAH,CAFK,CAAP,CAAA;EAID,WAPiB,EAQlB;EACEjF,YAAAA,GAAG,EACDmF,aAAA,KAAyB,YAAzB,CAFJ;EAIE1D,YAAAA,KAAK,EAAE,MAAA;EAAA,cAAA,IAAA,sBAAA,CAAA;;EAAA,cACLxB,OAAAA,CAAAA,sBAAAA,GAAAA,QAAQ,CAACkD,OAAT,CAAiBgB,QADZ,qCACwBlE,QAAQ,CAACkD,OAAT,CAAiBiB,YADzC,CAAA;EAAA,aAAA;EAJT,WARkB,CAVc;EA0BlCgB,UAAAA,cAAc,EAAElE,IAAI,CAClB,MAAM,CAACjB,QAAQ,CAACoF,kBAAT,EAAD,CADY,EAElBC,YAAY,IAAI;EAAA,YAAA,IAAA,gBAAA,CAAA;;EACd,YAAA,IAAA,CAAA,gBAAA,GAAI/B,MAAM,CAACe,OAAX,KAAI,IAAA,IAAA,gBAAA,CAAgBrD,MAApB,EAA4B;EAC1B,cAAA,IAAIsE,WAAW,GAAGhC,MAAM,CAACe,OAAP,CAAeY,OAAf,CAAuB3B,MAAM,IAC7CA,MAAM,CAAC6B,cAAP,EADgB,CAAlB,CAAA;EAIA,cAAOE,OAAAA,YAAY,CAACC,WAAD,CAAnB,CAAA;EACD,aAAA;;EAED,YAAO,OAAA,CAAChC,MAAD,CAAP,CAAA;EACD,WAZiB,EAalB;EACEvD,YAAAA,GAAG,EACDmF,aAAA,KAAyB,YAAzB,CAFJ;EAIE1D,YAAAA,KAAK,EAAE,MAAA;EAAA,cAAA,IAAA,sBAAA,CAAA;;EAAA,cACLxB,OAAAA,CAAAA,sBAAAA,GAAAA,QAAQ,CAACkD,OAAT,CAAiBgB,QADZ,qCACwBlE,QAAQ,CAACkD,OAAT,CAAiBiB,YADzC,CAAA;EAAA,aAAA;EAJT,WAbkB,CAAA;EA1Bc,SAApC,CAAA;EAiDAb,QAAAA,MAAM,GAAGtD,QAAQ,CAAC4D,SAAT,CAAmBC,MAAnB,CAA0B,CAACC,GAAD,EAAMC,OAAN,KAAkB;EACnD,UAAA,OAAOC,MAAM,CAACC,MAAP,CAAcH,GAAd,EAAmBC,OAAO,CAACO,YAA3B,IAAmBP,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,OAAO,CAACO,YAAR,CAAuBhB,MAAvB,EAA+BtD,QAA/B,CAAnB,CAAP,CAAA;EACD,SAFQ,EAENsD,MAFM,CAAT,CA7EG;;EAkFH,QAAA,OAAOA,MAAP,CAAA;EACD,OAhHI;EAkHLiC,MAAAA,aAAa,EAAEtE,IAAI,CACjB,MAAM,CAACjB,QAAQ,CAACoE,aAAT,EAAD,CADW,EAEjBoB,UAAU,IAAI;EACZ,QAAMC,MAAAA,cAAc,GAAG,UACrBD,UADqB,EAErBf,MAFqB,EAGrBD,KAHqB,EAIG;EAAA,UAAA,IADxBA,KACwB,KAAA,KAAA,CAAA,EAAA;EADxBA,YAAAA,KACwB,GADhB,CACgB,CAAA;EAAA,WAAA;;EACxB,UAAA,OAAOgB,UAAU,CAACE,GAAX,CAAenB,SAAS,IAAI;EACjC,YAAMjB,MAAAA,MAAM,GAAGtD,QAAQ,CAACsE,YAAT,CAAsBC,SAAtB,EAAiCC,KAAjC,EAAwCC,MAAxC,CAAf,CAAA;EAEAnB,YAAAA,MAAM,CAACe,OAAP,GAAiBE,SAAS,CAACF,OAAV,GACboB,cAAc,CAAClB,SAAS,CAACF,OAAX,EAAoBf,MAApB,EAA4BkB,KAAK,GAAG,CAApC,CADD,GAEb,EAFJ,CAAA;EAIA,YAAA,OAAOlB,MAAP,CAAA;EACD,WARM,CAAP,CAAA;EASD,SAdD,CAAA;;EAgBA,QAAOmC,OAAAA,cAAc,CAACD,UAAD,CAArB,CAAA;EACD,OApBgB,EAqBjB;EACEzF,QAAAA,GAAG,EAA4C,eADjD;EAEEyB,QAAAA,KAAK,EAAE,MAAA;EAAA,UAAA,IAAA,sBAAA,CAAA;;EAAA,UACLxB,OAAAA,CAAAA,sBAAAA,GAAAA,QAAQ,CAACkD,OAAT,CAAiBgB,QADZ,qCACwBlE,QAAQ,CAACkD,OAAT,CAAiBiB,YADzC,CAAA;EAAA,SAAA;EAFT,OArBiB,CAlHd;EA8ILwB,MAAAA,iBAAiB,EAAE1E,IAAI,CACrB,MAAM,CAACjB,QAAQ,CAACuF,aAAT,EAAD,CADe,EAErBK,UAAU,IAAI;EACZ,QAAA,OAAOA,UAAU,CAACX,OAAX,CAAmB3B,MAAM,IAAI;EAClC,UAAOA,OAAAA,MAAM,CAAC0B,cAAP,EAAP,CAAA;EACD,SAFM,CAAP,CAAA;EAGD,OANoB,EAOrB;EACEjF,QAAAA,GAAG,EAA4C,mBADjD;EAEEyB,QAAAA,KAAK,EAAE,MAAA;EAAA,UAAA,IAAA,sBAAA,CAAA;;EAAA,UACLxB,OAAAA,CAAAA,sBAAAA,GAAAA,QAAQ,CAACkD,OAAT,CAAiBgB,QADZ,qCACwBlE,QAAQ,CAACkD,OAAT,CAAiBiB,YADzC,CAAA;EAAA,SAAA;EAFT,OAPqB,CA9IlB;EA4JL0B,MAAAA,qBAAqB,EAAE5E,IAAI,CACzB,MAAM,CAACjB,QAAQ,CAAC2F,iBAAT,EAAD,CADmB,EAEzBG,WAAW,IAAI;EACb,QAAOA,OAAAA,WAAW,CAACjC,MAAZ,CAAmB,CAACkC,GAAD,EAAMzC,MAAN,KAAiB;EACzCyC,UAAAA,GAAG,CAACzC,MAAM,CAACC,EAAR,CAAH,GAAiBD,MAAjB,CAAA;EACA,UAAA,OAAOyC,GAAP,CAAA;EACD,SAHM,EAGJ,EAHI,CAAP,CAAA;EAID,OAPwB,EAQzB;EACEhG,QAAAA,GAAG,EACyC,uBAF9C;EAGEyB,QAAAA,KAAK,EAAE,MAAA;EAAA,UAAA,IAAA,sBAAA,CAAA;;EAAA,UACLxB,OAAAA,CAAAA,sBAAAA,GAAAA,QAAQ,CAACkD,OAAT,CAAiBgB,QADZ,qCACwBlE,QAAQ,CAACkD,OAAT,CAAiBiB,YADzC,CAAA;EAAA,SAAA;EAHT,OARyB,CA5JtB;EA4KL6B,MAAAA,iBAAiB,EAAE/E,IAAI,CACrB,MAAM,CAACjB,QAAQ,CAACuF,aAAT,EAAD,EAA2BvF,QAAQ,CAACoF,kBAAT,EAA3B,CADe,EAErB,CAACQ,UAAD,EAAaP,YAAb,KAA8B;EAC5B,QAAA,IAAIC,WAAW,GAAGM,UAAU,CAACX,OAAX,CAAmB3B,MAAM,IACzCA,MAAM,CAAC6B,cAAP,EADgB,CAAlB,CAAA;EAGA,QAAOE,OAAAA,YAAY,CAACC,WAAD,CAAnB,CAAA;EACD,OAPoB,EAQrB;EACEvF,QAAAA,GAAG,EAA4C,mBADjD;EAEEyB,QAAAA,KAAK,EAAE,MAAA;EAAA,UAAA,IAAA,sBAAA,CAAA;;EAAA,UACLxB,OAAAA,CAAAA,sBAAAA,GAAAA,QAAQ,CAACkD,OAAT,CAAiBgB,QADZ,qCACwBlE,QAAQ,CAACkD,OAAT,CAAiBiB,YADzC,CAAA;EAAA,SAAA;EAFT,OARqB,CA5KlB;EA2LL8B,MAAAA,SAAS,EAAEC,QAAQ,IAAI;EACrB,QAAA,MAAM5C,MAAM,GAAGtD,QAAQ,CAAC6F,qBAAT,EAAA,CAAiCK,QAAjC,CAAf,CAAA;;EAEA,QAAI,IAAA,CAAC5C,MAAL,EAAa;EACX,UAA2C;EACzCX,YAAAA,OAAO,CAACwD,IAAR,CAAA,yBAAA,GAAuCD,QAAvC,GAAA,kBAAA,CAAA,CAAA;EACD,WAAA;;EACD,UAAM,MAAA,IAAIpB,KAAJ,EAAN,CAAA;EACD,SAAA;;EAED,QAAA,OAAOxB,MAAP,CAAA;EACD,OAAA;EAtMI,KAAP,CAAA;EAwMD,GAAA;EA5MoB,CAAhB;;EC5BP;EAEO,MAAM8C,IAAI,GAAG;EAClB;EACA;EACA;EACA;EACA;EACA;EAEApD,EAAAA,cAAc,EACZhD,QADc,IAEc;EAC5B,IAAO,OAAA;EACLqG,MAAAA,QAAQ,EAAE,CACRC,GADQ,EAERvE,KAFQ,EAGR0C,MAHQ,KAAA;EAAA,QAAA,IAAA,qBAAA,CAAA;;EAAA,QAAA,OAAA,CAAA,qBAAA,GAKRzE,QAAQ,CAACkD,OAAT,CAAiBmD,QALT,IAKRrG,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,QAAQ,CAACkD,OAAT,CAAiBmD,QAAjB,CAA4BC,GAA5B,EAAiCvE,KAAjC,EAAwC0C,MAAxC,CALQ,KAMLA,IAAAA,GAAAA,qBAAAA,GAAAA,EAAAA,IAAAA,MAAM,GAAG,CAACA,MAAM,CAAClB,EAAR,EAAYxB,KAAZ,EAAmBwE,IAAnB,CAAwB,GAAxB,CAAH,GAAkCxE,KANnC,CAAA,CAAA;EAAA,OADL;EAQLyE,MAAAA,SAAS,EAAE,CAACjD,EAAD,EAAKkD,QAAL,EAAeC,QAAf,EAAyBlC,KAAzB,EAAgCmC,OAAhC,KAA4C;EACrD,QAAA,IAAIL,GAAuB,GAAG;EAC5B/C,UAAAA,EAD4B;EAE5BxB,UAAAA,KAAK,EAAE2E,QAFqB;EAG5BD,UAAAA,QAH4B;EAI5BjC,UAAAA,KAJ4B;EAK5BoC,UAAAA,WAAW,EAAE,EALe;EAM5BlD,UAAAA,QAAQ,EAAEwC,QAAQ,IAAI;EACpB,YAAII,IAAAA,GAAG,CAACM,WAAJ,CAAgBC,cAAhB,CAA+BX,QAA/B,CAAJ,EAA8C;EAC5C,cAAA,OAAOI,GAAG,CAACM,WAAJ,CAAgBV,QAAhB,CAAP,CAAA;EACD,aAAA;;EAED,YAAA,MAAM5C,MAAM,GAAGtD,QAAQ,CAACiG,SAAT,CAAmBC,QAAnB,CAAf,CAAA;;EAEA,YAAA,IAAI,CAAC5C,MAAM,CAACsB,UAAZ,EAAwB;EACtB,cAAA,OAAOD,SAAP,CAAA;EACD,aAAA;;EAED2B,YAAAA,GAAG,CAACM,WAAJ,CAAgBV,QAAhB,CAA4B5C,GAAAA,MAAM,CAACsB,UAAP,CAC1B0B,GAAG,CAACG,QADsB,EAE1BC,QAF0B,CAA5B,CAAA;EAKA,YAAA,OAAOJ,GAAG,CAACM,WAAJ,CAAgBV,QAAhB,CAAP,CAAA;EACD,WAvB2B;EAwB5BS,UAAAA,OAAO,EAAEA,OAAF,IAAEA,IAAAA,GAAAA,OAAF,GAAa,EAxBQ;EAyB5BG,UAAAA,WAAW,EAAE,MAAMxG,SAAS,CAACgG,GAAG,CAACK,OAAL,EAAcvG,CAAC,IAAIA,CAAC,CAACuG,OAArB,CAAA;EAzBA,SAA9B,CAAA;;EA4BA,QAAA,KAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG/G,QAAQ,CAAC4D,SAAT,CAAmB5C,MAAvC,EAA+C+F,CAAC,EAAhD,EAAoD;EAClD,UAAA,MAAMhD,OAAO,GAAG/D,QAAQ,CAAC4D,SAAT,CAAmBmD,CAAnB,CAAhB,CAAA;EACA/C,UAAAA,MAAM,CAACC,MAAP,CAAcqC,GAAd,EAAmBvC,OAAnB,IAAmBA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,OAAO,CAAEyC,SAA5B,IAAA,IAAA,GAAA,KAAA,CAAA,GAAmBzC,OAAO,CAAEyC,SAAT,CAAqBF,GAArB,EAA0BtG,QAA1B,CAAnB,CAAA,CAAA;EACD,SAAA;;EAED,QAAA,OAAOsG,GAAP,CAAA;EACD,OA3CI;EA6CLU,MAAAA,eAAe,EAAE,MAAM;EACrB,QAAA,IAAI,CAAChH,QAAQ,CAACiH,gBAAd,EAAgC;EAC9BjH,UAAAA,QAAQ,CAACiH,gBAAT,GAA4BjH,QAAQ,CAACkD,OAAT,CAAiB8D,eAAjB,CAAiChH,QAAjC,CAA5B,CAAA;EACD,SAAA;;EAED,QAAOA,OAAAA,QAAQ,CAACiH,gBAAT,EAAP,CAAA;EACD,OAnDI;EAqDL;EACA;EAEAC,MAAAA,WAAW,EAAE,MAAM;EACjB,QAAOlH,OAAAA,QAAQ,CAACmH,qBAAT,EAAP,CAAA;EACD,OA1DI;EA2DLC,MAAAA,MAAM,EAAG7D,EAAD,IAAgB;EACtB,QAAM+C,MAAAA,GAAG,GAAGtG,QAAQ,CAACkH,WAAT,EAAuBG,CAAAA,QAAvB,CAAgC9D,EAAhC,CAAZ,CAAA;;EAEA,QAAI,IAAA,CAAC+C,GAAL,EAAU;EACR,UAA2C;EACzC,YAAA,MAAM,IAAIxB,KAAJ,CAA4CvB,iCAAAA,GAAAA,EAA5C,CAAN,CAAA;EACD,WAAA;EAEF,SAAA;;EAED,QAAA,OAAO+C,GAAP,CAAA;EACD,OAAA;EAtEI,KAAP,CAAA;EAwED,GAAA;EAnFiB,CAAb;;ECjCP;EAEO,MAAMgB,KAAK,GAAG;EACnBd,EAAAA,SAAS,EAAE,CACTF,GADS,EAETtG,QAFS,KAGe;EACxB,IAAO,OAAA;EACLuH,MAAAA,WAAW,EAAEtG,IAAI,CACf,MAAM,CAACjB,QAAQ,CAACgG,iBAAT,EAAD,CADS,EAEfV,WAAW,IAAI;EACb,QAAA,OAAOA,WAAW,CAACI,GAAZ,CAAgBpC,MAAM,IAAI;EAC/B,UAAOtD,OAAAA,QAAQ,CAACwH,UAAT,CAAoBlB,GAApB,EAA2ChD,MAA3C,EAAmDA,MAAM,CAACC,EAA1D,CAAP,CAAA;EACD,SAFM,CAAP,CAAA;EAGD,OANc,EAOf;EACExD,QAAAA,GAAG,EAA4C,iBADjD;EAEEyB,QAAAA,KAAK,EAAE,MAAA;EAAA,UAAA,IAAA,qBAAA,CAAA;;EAAA,UAAMxB,OAAAA,CAAAA,qBAAAA,GAAAA,QAAQ,CAACkD,OAAT,CAAiBgB,QAAvB,oCAAmClE,QAAQ,CAACkD,OAAT,CAAiBuE,SAApD,CAAA;EAAA,SAAA;EAFT,OAPe,CADZ;EAcLC,MAAAA,qBAAqB,EAAEzG,IAAI,CACzB,MAAM,CAACqF,GAAG,CAACiB,WAAJ,EAAD,CADmB,EAEzBI,QAAQ,IAAI;EACV,QAAOA,OAAAA,QAAQ,CAAC9D,MAAT,CAAgB,CAACkC,GAAD,EAAMtC,IAAN,KAAe;EACpCsC,UAAAA,GAAG,CAACtC,IAAI,CAACyC,QAAN,CAAH,GAAqBzC,IAArB,CAAA;EACA,UAAA,OAAOsC,GAAP,CAAA;EACD,SAHM,EAGJ,EAHI,CAAP,CAAA;EAID,OAPwB,EAQzB;EACEhG,QAAAA,GAAG,EACDmF,aAAA,KAAyB,YAAzB,CAFJ;EAIE1D,QAAAA,KAAK,EAAE,MAAA;EAAA,UAAA,IAAA,sBAAA,CAAA;;EAAA,UAAMxB,OAAAA,CAAAA,sBAAAA,GAAAA,QAAQ,CAACkD,OAAT,CAAiBgB,QAAvB,qCAAmClE,QAAQ,CAACkD,OAAT,CAAiBuE,SAApD,CAAA;EAAA,SAAA;EAJT,OARyB,CAAA;EAdtB,KAAP,CAAA;EA8BD,GAnCkB;EAqCnBzE,EAAAA,cAAc,EACZhD,QADc,IAEe;EAC7B,IAAO,OAAA;EACLwH,MAAAA,UAAU,EAAE,CAAClB,GAAD,EAAMhD,MAAN,EAAc4C,QAAd,KAA2B;EACrC,QAAA,MAAMzC,IAAyB,GAAG;EAChCF,UAAAA,EAAE,EAAK+C,GAAG,CAAC/C,EAAT,GAAeD,GAAAA,GAAAA,MAAM,CAACC,EADQ;EAEhCqE,UAAAA,KAAK,EAAEtB,GAAG,CAAC/C,EAFqB;EAGhC2C,UAAAA,QAHgC;EAIhCI,UAAAA,GAJgC;EAKhChD,UAAAA,MALgC;EAMhCI,UAAAA,QAAQ,EAAE,MAAM4C,GAAG,CAAC5C,QAAJ,CAAawC,QAAb,CANgB;EAOhC2B,UAAAA,UAAU,EAAE,MACVvE,MAAM,CAACG,IAAP,GACIzD,QAAQ,CAAC8H,OAAT,CAAiBxE,MAAM,CAACG,IAAxB,EAA8B;EAC5BzD,YAAAA,QAD4B;EAE5BsD,YAAAA,MAF4B;EAG5BgD,YAAAA,GAH4B;EAI5B7C,YAAAA,IAAI,EAAEA,IAJsB;EAK5BC,YAAAA,QAAQ,EAAED,IAAI,CAACC,QAAAA;EALa,WAA9B,CADJ,GAQI,IAAA;EAhB0B,SAAlC,CAAA;;EAmBA1D,QAAAA,QAAQ,CAAC4D,SAAT,CAAmBhD,OAAnB,CAA2BmD,OAAO,IAAI;EACpCC,UAAAA,MAAM,CAACC,MAAP,CACER,IADF,EAEEM,OAAO,CAACyD,UAFV,IAAA,IAAA,GAAA,KAAA,CAAA,GAEEzD,OAAO,CAACyD,UAAR,CACE/D,IADF,EAEEH,MAFF,EAGEgD,GAHF,EAIEtG,QAJF,CAFF,CAAA,CAAA;EASD,SAVD,EAUG,EAVH,CAAA,CAAA;;EAYA,QAAA,OAAOyD,IAAP,CAAA;EACD,OAlCI;EAoCLsE,MAAAA,OAAO,EAAE,CAACH,KAAD,EAAgB1B,QAAhB,KAAqC;EAC5C,QAAA,MAAMI,GAAG,GAAGtG,QAAQ,CAACoH,MAAT,CAAgBQ,KAAhB,CAAZ,CAAA;;EAEA,QAAI,IAAA,CAACtB,GAAL,EAAU;EACR,UAA2C;EACzC,YAAA,MAAM,IAAIxB,KAAJ,CAAgD8C,qCAAAA,GAAAA,KAAhD,CAAN,CAAA;EACD,WAAA;EAEF,SAAA;;EAED,QAAA,MAAMnE,IAAI,GAAG6C,GAAG,CAACoB,qBAAJ,EAAA,CAA4BxB,QAA5B,CAAb,CAAA;;EAEA,QAAI,IAAA,CAACzC,IAAL,EAAW;EACT,UAA2C;EACzC,YAAA,MAAM,IAAIqB,KAAJ,CAAA,8BAAA,GAC2BoB,QAD3B,GAAA,UAAA,GAC8C0B,KAD9C,CAAN,CAAA;EAGD,WAAA;EAEF,SAAA;;EAED,QAAA,OAAOnE,IAAP,CAAA;EACD,OAAA;EA1DI,KAAP,CAAA;EA4DD,GAAA;EApGkB,CAAd;;ECmDP;AAEO,QAAMuE,mBAAmB,GAAG;EACjCC,EAAAA,IAAI,EAAE,GAD2B;EAEjCC,EAAAA,OAAO,EAAE,EAFwB;EAGjCC,EAAAA,OAAO,EAAEC,MAAM,CAACC,gBAAAA;EAHiB,EAA5B;;EAMP,MAAMC,+BAA+B,GAAG,OAA8B;EACpEC,EAAAA,WAAW,EAAE,IADuD;EAEpEC,EAAAA,SAAS,EAAE,IAFyD;EAGpEC,EAAAA,WAAW,EAAE,IAHuD;EAIpEC,EAAAA,eAAe,EAAE,IAJmD;EAKpEC,EAAAA,gBAAgB,EAAE,KALkD;EAMpEC,EAAAA,iBAAiB,EAAE,EAAA;EANiD,CAA9B,CAAxC,CAAA;;AASO,QAAMC,YAA0B,GAAG;EACxC5F,EAAAA,gBAAgB,EAAE,MAA6B;EAC7C,IAAA,OAAO+E,mBAAP,CAAA;EACD,GAHuC;EAIxCc,EAAAA,eAAe,EAAGC,KAAD,IAAmC;EAClD,IAAO,OAAA;EACLC,MAAAA,YAAY,EAAE,EADT;EAELC,MAAAA,gBAAgB,EAAEX,+BAA+B,EAF5C;EAGL,MAAGS,GAAAA,KAAAA;EAHE,KAAP,CAAA;EAKD,GAVuC;EAYxCG,EAAAA,iBAAiB,EACflJ,QADiB,IAEc;EAC/B,IAAO,OAAA;EACLmJ,MAAAA,gBAAgB,EAAE,OADb;EAELC,MAAAA,oBAAoB,EAAEtJ,gBAAgB,CAAC,cAAD,EAAiBE,QAAjB,CAFjC;EAGLqJ,MAAAA,wBAAwB,EAAEvJ,gBAAgB,CAAC,kBAAD,EAAqBE,QAArB,CAAA;EAHrC,KAAP,CAAA;EAKD,GApBuC;EAsBxCsE,EAAAA,YAAY,EAAE,CACZhB,MADY,EAEZtD,QAFY,KAGsB;EAClC,IAAO,OAAA;EACLsJ,MAAAA,OAAO,EAAE,MAAM;EAAA,QAAA,IAAA,eAAA,EAAA,IAAA,EAAA,eAAA,CAAA;;EACb,QAAMC,MAAAA,UAAU,GAAGvJ,QAAQ,CAACwJ,QAAT,EAAoBR,CAAAA,YAApB,CAAiC1F,MAAM,CAACC,EAAxC,CAAnB,CAAA;EAEA,QAAA,OAAOpB,IAAI,CAACW,GAAL,CACLX,IAAI,CAACU,GAAL,CAAA,CAAA,eAAA,GACES,MAAM,CAAC4E,OADT,KACoBF,IAAAA,GAAAA,eAAAA,GAAAA,mBAAmB,CAACE,OADxC,UAEEqB,UAFF,IAAA,IAAA,GAEEA,UAFF,GAEgBjG,MAAM,CAAC2E,IAFvB,KAE+BD,IAAAA,GAAAA,IAAAA,GAAAA,mBAAmB,CAACC,IAFnD,CADK,EAKL3E,CAAAA,eAAAA,GAAAA,MAAM,CAAC6E,OALF,KAAA,IAAA,GAAA,eAAA,GAKaH,mBAAmB,CAACG,OALjC,CAAP,CAAA;EAOD,OAXI;EAYLsB,MAAAA,QAAQ,EAAEC,QAAQ,IAAI;EACpB,QAAMrF,MAAAA,OAAO,GAAG,CAACqF,QAAD,GACZ1J,QAAQ,CAAC2J,qBAAT,EADY,GAEZD,QAAQ,KAAK,MAAb,GACA1J,QAAQ,CAAC4J,yBAAT,EADA,GAEA5J,QAAQ,CAAC6J,0BAAT,EAJJ,CAAA;EAMA,QAAA,MAAM9H,KAAK,GAAGsC,OAAO,CAACyF,SAAR,CAAkB1J,CAAC,IAAIA,CAAC,CAACmD,EAAF,KAASD,MAAM,CAACC,EAAvC,CAAd,CAAA;;EAEA,QAAIxB,IAAAA,KAAK,GAAG,CAAZ,EAAe;EACb,UAAA,MAAMgI,iBAAiB,GAAG1F,OAAO,CAACtC,KAAK,GAAG,CAAT,CAAjC,CAAA;EAEA,UACEgI,OAAAA,iBAAiB,CAACN,QAAlB,CAA2BC,QAA3B,CAAuCK,GAAAA,iBAAiB,CAACT,OAAlB,EADzC,CAAA;EAGD,SAAA;;EAED,QAAA,OAAO,CAAP,CAAA;EACD,OA9BI;EA+BLU,MAAAA,SAAS,EAAE,MAAM;EACfhK,QAAAA,QAAQ,CAACiK,eAAT,CAAyB,KAAiC,IAAA;EAAA,UAAhC,IAAA;EAAE,YAAA,CAAC3G,MAAM,CAACC,EAAR,GAAa2G,CAAf;EAAkB,YAAGC,GAAAA,IAAAA;EAArB,WAAgC,GAAA,KAAA,CAAA;EACxD,UAAA,OAAOA,IAAP,CAAA;EACD,SAFD,CAAA,CAAA;EAGD,OAnCI;EAoCLC,MAAAA,YAAY,EAAE,MAAM;EAAA,QAAA,IAAA,qBAAA,EAAA,qBAAA,CAAA;;EAClB,QAAA,OACE,CAAC9G,CAAAA,qBAAAA,GAAAA,MAAM,CAAC+G,cAAR,oCAA0B,IAA1B,MAAA,CAAA,qBAAA,GACCrK,QAAQ,CAACkD,OAAT,CAAiBoH,oBADlB,KAAA,IAAA,GAAA,qBAAA,GAC0C,IAD1C,CADF,CAAA;EAID,OAzCI;EA0CLC,MAAAA,aAAa,EAAE,MAAM;EACnB,QACEvK,OAAAA,QAAQ,CAACwJ,QAAT,EAAoBP,CAAAA,gBAApB,CAAqCN,gBAArC,KAA0DrF,MAAM,CAACC,EADnE,CAAA;EAGD,OAAA;EA9CI,KAAP,CAAA;EAgDD,GA1EuC;EA4ExCiH,EAAAA,YAAY,EAAE,CACZpH,MADY,EAEZpD,QAFY,KAGsB;EAClC,IAAO,OAAA;EACLsJ,MAAAA,OAAO,EAAE,MAAM;EACb,QAAImB,IAAAA,GAAG,GAAG,CAAV,CAAA;;EAEA,QAAM/J,MAAAA,OAAO,GAAI0C,MAAD,IAA+B;EAC7C,UAAA,IAAIA,MAAM,CAACsH,UAAP,CAAkB1J,MAAtB,EAA8B;EAC5BoC,YAAAA,MAAM,CAACsH,UAAP,CAAkB9J,OAAlB,CAA0BF,OAA1B,CAAA,CAAA;EACD,WAFD,MAEO;EAAA,YAAA,IAAA,qBAAA,CAAA;;EACL+J,YAAAA,GAAG,6BAAIrH,MAAM,CAACE,MAAP,CAAcgG,OAAd,EAAJ,KAAA,IAAA,GAAA,qBAAA,GAA+B,CAAlC,CAAA;EACD,WAAA;EACF,SAND,CAAA;;EAQA5I,QAAAA,OAAO,CAAC0C,MAAD,CAAP,CAAA;EAEA,QAAA,OAAOqH,GAAP,CAAA;EACD,OAfI;EAgBLhB,MAAAA,QAAQ,EAAE,MAAM;EACd,QAAA,IAAIrG,MAAM,CAACrB,KAAP,GAAe,CAAnB,EAAsB;EACpB,UAAA,MAAM4I,iBAAiB,GACrBvH,MAAM,CAACwH,WAAP,CAAmBC,OAAnB,CAA2BzH,MAAM,CAACrB,KAAP,GAAe,CAA1C,CADF,CAAA;EAEA,UAAA,OAAO4I,iBAAiB,CAAClB,QAAlB,KAA+BkB,iBAAiB,CAACrB,OAAlB,EAAtC,CAAA;EACD,SAAA;;EAED,QAAA,OAAO,CAAP,CAAA;EACD,OAxBI;EAyBLwB,MAAAA,gBAAgB,EAAE,MAAM;EACtB,QAAMxH,MAAAA,MAAM,GAAGtD,QAAQ,CAACiG,SAAT,CAAmB7C,MAAM,CAACE,MAAP,CAAcC,EAAjC,CAAf,CAAA;EACA,QAAA,MAAMwH,SAAS,GAAGzH,MAAM,CAAC8G,YAAP,EAAlB,CAAA;EAEA,QAAA,OAAQY,CAAD,IAAgB;EACrB,UAAI,IAAA,CAACD,SAAL,EAAgB;EACd,YAAA,OAAA;EACD,WAAA;EAECC,UAAAA,CAAD,CAAWC,OAAX,IAACD,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,CAAD,CAAWC,OAAX,EAAA,CAAA;;EAED,UAAA,IAAIC,iBAAiB,CAACF,CAAD,CAArB,EAA0B;EACxB;EACA,YAAIA,IAAAA,CAAC,CAACG,OAAF,IAAaH,CAAC,CAACG,OAAF,CAAUnK,MAAV,GAAmB,CAApC,EAAuC;EACrC,cAAA,OAAA;EACD,aAAA;EACF,WAAA;;EAED,UAAA,MAAMwH,SAAS,GAAGpF,MAAM,CAACkG,OAAP,EAAlB,CAAA;EAEA,UAAA,MAAMV,iBAAqC,GAAGxF,MAAM,GAChDA,MAAM,CACHgI,cADH,EAAA,CAEG1F,GAFH,CAEOtF,CAAC,IAAI,CAACA,CAAC,CAACkD,MAAF,CAASC,EAAV,EAAcnD,CAAC,CAACkD,MAAF,CAASgG,OAAT,EAAd,CAFZ,CADgD,GAIhD,CAAC,CAAChG,MAAM,CAACC,EAAR,EAAYD,MAAM,CAACgG,OAAP,EAAZ,CAAD,CAJJ,CAAA;EAMA,UAAM+B,MAAAA,OAAO,GAAGH,iBAAiB,CAACF,CAAD,CAAjB,GACZ7I,IAAI,CAACC,KAAL,CAAW4I,CAAC,CAACG,OAAF,CAAU,CAAV,CAAA,CAAcE,OAAzB,CADY,GAEXL,CAAD,CAAkBK,OAFtB,CAAA;;EAIA,UAAA,MAAMC,YAAY,GAAG,CACnBC,SADmB,EAEnBC,UAFmB,KAGhB;EACH,YAAA,IAAI,OAAOA,UAAP,KAAsB,QAA1B,EAAoC;EAClC,cAAA,OAAA;EACD,aAAA;;EAED,YAAIC,IAAAA,eAAkC,GAAG,EAAzC,CAAA;EAEAzL,YAAAA,QAAQ,CAAC0L,mBAAT,CAA6BxL,GAAG,IAAI;EAAA,cAAA,IAAA,gBAAA,EAAA,cAAA,CAAA;;EAClC,cAAMuI,MAAAA,WAAW,GAAG+C,UAAU,IAAItL,CAAAA,gBAAAA,GAAAA,GAAJ,IAAIA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,GAAG,CAAEqI,WAAT,KAAwB,IAAA,GAAA,gBAAA,GAAA,CAAxB,CAA9B,CAAA;EACA,cAAA,MAAMG,eAAe,GAAGvG,IAAI,CAACU,GAAL,CACtB4F,WAAW,IAAIvI,CAAAA,cAAAA,GAAAA,GAAJ,oBAAIA,GAAG,CAAEsI,SAAT,KAAsB,IAAA,GAAA,cAAA,GAAA,CAAtB,CADW,EAEtB,CAAC,QAFqB,CAAxB,CAAA;EAKAtI,cAAAA,GAAG,CAAC0I,iBAAJ,CAAsBhI,OAAtB,CAA8B,KAA4B,IAAA;EAAA,gBAAA,IAA3B,CAACsF,QAAD,EAAWyF,UAAX,CAA2B,GAAA,KAAA,CAAA;EACxDF,gBAAAA,eAAe,CAACvF,QAAD,CAAf,GACE/D,IAAI,CAACC,KAAL,CACED,IAAI,CAACU,GAAL,CAAS8I,UAAU,GAAGA,UAAU,GAAGjD,eAAnC,EAAoD,CAApD,CAAA,GAAyD,GAD3D,CAAA,GAEI,GAHN,CAAA;EAID,eALD,CAAA,CAAA;EAOA,cAAO,OAAA,EACL,GAAGxI,GADE;EAELuI,gBAAAA,WAFK;EAGLC,gBAAAA,eAAAA;EAHK,eAAP,CAAA;EAKD,aAnBD,CAAA,CAAA;;EAqBA,YACE1I,IAAAA,QAAQ,CAACkD,OAAT,CAAiBiG,gBAAjB,KAAsC,UAAtC,IACAoC,SAAS,KAAK,KAFhB,EAGE;EACAvL,cAAAA,QAAQ,CAACiK,eAAT,CAAyB/J,GAAG,KAAK,EAC/B,GAAGA,GAD4B;EAE/B,gBAAGuL,GAAAA,eAAAA;EAF4B,eAAL,CAA5B,CAAA,CAAA;EAID,aAAA;EACF,WAxCD,CAAA;;EA0CA,UAAMG,MAAAA,MAAM,GAAIJ,UAAD,IACbF,YAAY,CAAC,MAAD,EAASE,UAAT,CADd,CAAA;;EAGA,UAAMK,MAAAA,KAAK,GAAIL,UAAD,IAAyB;EACrCF,YAAAA,YAAY,CAAC,KAAD,EAAQE,UAAR,CAAZ,CAAA;EAEAxL,YAAAA,QAAQ,CAAC0L,mBAAT,CAA6BxL,GAAG,KAAK,EACnC,GAAGA,GADgC;EAEnCyI,cAAAA,gBAAgB,EAAE,KAFiB;EAGnCJ,cAAAA,WAAW,EAAE,IAHsB;EAInCC,cAAAA,SAAS,EAAE,IAJwB;EAKnCC,cAAAA,WAAW,EAAE,IALsB;EAMnCC,cAAAA,eAAe,EAAE,IANkB;EAOnCE,cAAAA,iBAAiB,EAAE,EAAA;EAPgB,aAAL,CAAhC,CAAA,CAAA;EASD,WAZD,CAAA;;EAcA,UAAA,MAAMkD,WAAW,GAAG;EAClBC,YAAAA,WAAW,EAAGf,CAAD,IAAmBY,MAAM,CAACZ,CAAC,CAACK,OAAH,CADpB;EAElBW,YAAAA,SAAS,EAAGhB,CAAD,IAAmB;EAC5BiB,cAAAA,QAAQ,CAACC,mBAAT,CAA6B,WAA7B,EAA0CJ,WAAW,CAACC,WAAtD,CAAA,CAAA;EACAE,cAAAA,QAAQ,CAACC,mBAAT,CAA6B,SAA7B,EAAwCJ,WAAW,CAACE,SAApD,CAAA,CAAA;EACAH,cAAAA,KAAK,CAACb,CAAC,CAACK,OAAH,CAAL,CAAA;EACD,aAAA;EANiB,WAApB,CAAA;EA6BA,UAAMc,MAAAA,kBAAkB,GAAGC,qBAAqB,EAC5C,GAAA;EAAEC,YAAAA,OAAO,EAAE,KAAA;EAAX,WAD4C,GAE5C,KAFJ,CAAA;;EAIA,UAAA,IAAInB,iBAAiB,CAACF,CAAD,CAArB,EAA0B,CAA1B,MACO;EACLiB,YAAAA,QAAQ,CAACK,gBAAT,CACE,WADF,EAEER,WAAW,CAACC,WAFd,EAGEI,kBAHF,CAAA,CAAA;EAKAF,YAAAA,QAAQ,CAACK,gBAAT,CACE,SADF,EAEER,WAAW,CAACE,SAFd,EAGEG,kBAHF,CAAA,CAAA;EAKD,WAAA;;EAEDnM,UAAAA,QAAQ,CAAC0L,mBAAT,CAA6BxL,GAAG,KAAK,EACnC,GAAGA,GADgC;EAEnCqI,YAAAA,WAAW,EAAE8C,OAFsB;EAGnC7C,YAAAA,SAHmC;EAInCC,YAAAA,WAAW,EAAE,CAJsB;EAKnCC,YAAAA,eAAe,EAAE,CALkB;EAMnCE,YAAAA,iBANmC;EAOnCD,YAAAA,gBAAgB,EAAErF,MAAM,CAACC,EAAAA;EAPU,WAAL,CAAhC,CAAA,CAAA;EASD,SA7ID,CAAA;EA8ID,OAAA;EA3KI,KAAP,CAAA;EA6KD,GA7PuC;EA+PxCP,EAAAA,cAAc,EACZhD,QADc,IAEsB;EACpC,IAAO,OAAA;EACLiK,MAAAA,eAAe,EAAEtK,OAAO,IACtBK,QAAQ,CAACkD,OAAT,CAAiBkG,oBADK,IAAA,IAAA,GAAA,KAAA,CAAA,GACtBpJ,QAAQ,CAACkD,OAAT,CAAiBkG,oBAAjB,CAAwCzJ,OAAxC,CAFG;EAGL+L,MAAAA,mBAAmB,EAAE/L,OAAO,IAC1BK,QAAQ,CAACkD,OAAT,CAAiBmG,wBADS,IAAA,IAAA,GAAA,KAAA,CAAA,GAC1BrJ,QAAQ,CAACkD,OAAT,CAAiBmG,wBAAjB,CAA4C1J,OAA5C,CAJG;EAKL4M,MAAAA,iBAAiB,EAAEC,YAAY,IAAI;EAAA,QAAA,IAAA,qBAAA,CAAA;;EACjCxM,QAAAA,QAAQ,CAACiK,eAAT,CACEuC,YAAY,GAAG,EAAH,GAAQxM,CAAAA,qBAAAA,GAAAA,QAAQ,CAACyM,YAAT,CAAsBzD,YAA9B,oCAA8C,EAD5D,CAAA,CAAA;EAGD,OATI;EAUL0D,MAAAA,mBAAmB,EAAEF,YAAY,IAAI;EAAA,QAAA,IAAA,sBAAA,CAAA;;EACnCxM,QAAAA,QAAQ,CAAC0L,mBAAT,CACEc,YAAY,GACRlE,+BAA+B,EADvB,GAERtI,CAAAA,sBAAAA,GAAAA,QAAQ,CAACyM,YAAT,CAAsBxD,gBAFd,KAAA,IAAA,GAAA,sBAAA,GAGNX,+BAA+B,EAJvC,CAAA,CAAA;EAMD,OAjBI;EAkBLqE,MAAAA,YAAY,EAAE,MAAA;EAAA,QAAA,IAAA,qBAAA,EAAA,sBAAA,CAAA;;EAAA,QAAA,OAAA,CAAA,qBAAA,GAAA,CAAA,sBAAA,GACZ3M,QAAQ,CAAC4M,eAAT,EAA2B,CAAA,CAA3B,CADY,KACZ,IAAA,GAAA,KAAA,CAAA,GAAA,sBAAA,CAA+B/B,OAA/B,CAAuChH,MAAvC,CAA8C,CAAC4G,GAAD,EAAMrH,MAAN,KAAiB;EAC7D,UAAA,OAAOqH,GAAG,GAAGrH,MAAM,CAACkG,OAAP,EAAb,CAAA;EACD,SAFD,EAEG,CAFH,CADY,KAAA,IAAA,GAAA,qBAAA,GAGH,CAHG,CAAA;EAAA,OAlBT;EAsBLuD,MAAAA,gBAAgB,EAAE,MAAA;EAAA,QAAA,IAAA,qBAAA,EAAA,sBAAA,CAAA;;EAAA,QAAA,OAAA,CAAA,qBAAA,GAAA,CAAA,sBAAA,GAChB7M,QAAQ,CAAC8M,mBAAT,EAA+B,CAAA,CAA/B,CADgB,KAChB,IAAA,GAAA,KAAA,CAAA,GAAA,sBAAA,CAAmCjC,OAAnC,CAA2ChH,MAA3C,CAAkD,CAAC4G,GAAD,EAAMrH,MAAN,KAAiB;EACjE,UAAA,OAAOqH,GAAG,GAAGrH,MAAM,CAACkG,OAAP,EAAb,CAAA;EACD,SAFD,EAEG,CAFH,CADgB,KAAA,IAAA,GAAA,qBAAA,GAGP,CAHO,CAAA;EAAA,OAtBb;EA0BLyD,MAAAA,kBAAkB,EAAE,MAAA;EAAA,QAAA,IAAA,qBAAA,EAAA,sBAAA,CAAA;;EAAA,QAAA,OAAA,CAAA,qBAAA,GAAA,CAAA,sBAAA,GAClB/M,QAAQ,CAACgN,qBAAT,EAAiC,CAAA,CAAjC,CADkB,KAClB,IAAA,GAAA,KAAA,CAAA,GAAA,sBAAA,CAAqCnC,OAArC,CAA6ChH,MAA7C,CAAoD,CAAC4G,GAAD,EAAMrH,MAAN,KAAiB;EACnE,UAAA,OAAOqH,GAAG,GAAGrH,MAAM,CAACkG,OAAP,EAAb,CAAA;EACD,SAFD,EAEG,CAFH,CADkB,KAAA,IAAA,GAAA,qBAAA,GAGT,CAHS,CAAA;EAAA,OA1Bf;EA8BL2D,MAAAA,iBAAiB,EAAE,MAAA;EAAA,QAAA,IAAA,qBAAA,EAAA,sBAAA,CAAA;;EAAA,QAAA,OAAA,CAAA,qBAAA,GAAA,CAAA,sBAAA,GACjBjN,QAAQ,CAACkN,oBAAT,EAAgC,CAAA,CAAhC,CADiB,KACjB,IAAA,GAAA,KAAA,CAAA,GAAA,sBAAA,CAAoCrC,OAApC,CAA4ChH,MAA5C,CAAmD,CAAC4G,GAAD,EAAMrH,MAAN,KAAiB;EAClE,UAAA,OAAOqH,GAAG,GAAGrH,MAAM,CAACkG,OAAP,EAAb,CAAA;EACD,SAFD,EAEG,CAFH,CADiB,KAAA,IAAA,GAAA,qBAAA,GAGR,CAHQ,CAAA;EAAA,OAAA;EA9Bd,KAAP,CAAA;EAmCD,GAAA;EArSuC,EAAnC;EAwSP,IAAI6D,gBAAgC,GAAG,IAAvC,CAAA;EACO,SAASf,qBAAT,GAAiC;EACtC,EAAA,IAAI,OAAOe,gBAAP,KAA4B,SAAhC,EAA2C,OAAOA,gBAAP,CAAA;EAE3C,EAAIC,IAAAA,SAAS,GAAG,KAAhB,CAAA;;EACA,EAAI,IAAA;EACF,IAAA,MAAMlK,OAAO,GAAG;EACd,MAAA,IAAImJ,OAAJ,GAAc;EACZe,QAAAA,SAAS,GAAG,IAAZ,CAAA;EACA,QAAA,OAAO,KAAP,CAAA;EACD,OAAA;;EAJa,KAAhB,CAAA;;EAOA,IAAA,MAAMvN,IAAI,GAAG,MAAM,EAAnB,CAAA;;EAEAwN,IAAAA,MAAM,CAACf,gBAAP,CAAwB,MAAxB,EAAgCzM,IAAhC,EAAsCqD,OAAtC,CAAA,CAAA;EACAmK,IAAAA,MAAM,CAACnB,mBAAP,CAA2B,MAA3B,EAAmCrM,IAAnC,CAAA,CAAA;EACD,GAZD,CAYE,OAAOyN,GAAP,EAAY;EACZF,IAAAA,SAAS,GAAG,KAAZ,CAAA;EACD,GAAA;;EACDD,EAAAA,gBAAgB,GAAGC,SAAnB,CAAA;EACA,EAAA,OAAOD,gBAAP,CAAA;EACD,CAAA;;EAED,SAASjC,iBAAT,CAA2BF,CAA3B,EAAwD;EACtD,EAAA,OAAQA,CAAD,CAAkBuC,IAAlB,KAA2B,YAAlC,CAAA;EACD;;EC1WD;AAEO,QAAMC,SAAuB,GAAG;EACrC1E,EAAAA,eAAe,EAAGC,KAAD,IAA+B;EAC9C,IAAO,OAAA;EACL0E,MAAAA,QAAQ,EAAE,EADL;EAEL,MAAG1E,GAAAA,KAAAA;EAFE,KAAP,CAAA;EAID,GANoC;EAQrCG,EAAAA,iBAAiB,EACflJ,QADiB,IAEc;EAC/B,IAAO,OAAA;EACL0N,MAAAA,gBAAgB,EAAE5N,gBAAgB,CAAC,UAAD,EAAaE,QAAb,CAD7B;EAEL2N,MAAAA,iBAAiB,EAAE,IAFd;EAGLC,MAAAA,aAAa,EAAE,IAHV;EAILC,MAAAA,oBAAoB,EAAE,IAAA;EAJjB,KAAP,CAAA;EAMD,GAjBoC;EAmBrC7K,EAAAA,cAAc,EACZhD,QADc,IAEkB;EAChC,IAAI8N,IAAAA,UAAU,GAAG,KAAjB,CAAA;EACA,IAAIC,IAAAA,MAAM,GAAG,KAAb,CAAA;EAEA,IAAO,OAAA;EACLC,MAAAA,kBAAkB,EAAE,MAAM;EACxB,QAAI,IAAA,CAACF,UAAL,EAAiB;EACf9N,UAAAA,QAAQ,CAACiO,MAAT,CAAgB,MAAM;EACpBH,YAAAA,UAAU,GAAG,IAAb,CAAA;EACD,WAFD,CAAA,CAAA;;EAGA,UAAA,OAAA;EACD,SAAA;;EAED,QAAA,IAAI9N,QAAQ,CAACkD,OAAT,CAAiBgL,YAAjB,KAAkC,KAAtC,EAA6C;EAC3C,UAAA,OAAA;EACD,SAAA;;EAED,QAAA,IACElO,QAAQ,CAACkD,OAAT,CAAiBgL,YAAjB,KAAkC,IAAlC,IACAlO,QAAQ,CAACkD,OAAT,CAAiByK,iBAFnB,EAGE;EACA,UAAA,IAAII,MAAJ,EAAY,OAAA;EACZA,UAAAA,MAAM,GAAG,IAAT,CAAA;;EACA/N,UAAAA,QAAQ,CAACiO,MAAT,CAAgB,MAAM;EACpBjO,YAAAA,QAAQ,CAACmO,aAAT,EAAA,CAAA;EACAJ,YAAAA,MAAM,GAAG,KAAT,CAAA;EACD,WAHD,CAAA,CAAA;EAID,SAAA;EACF,OAxBI;EAyBLK,MAAAA,WAAW,EAAEzO,OAAO,IAAIK,QAAQ,CAACkD,OAAT,CAAiBwK,gBAArB,IAAA,IAAA,GAAA,KAAA,CAAA,GAAI1N,QAAQ,CAACkD,OAAT,CAAiBwK,gBAAjB,CAAoC/N,OAApC,CAzBnB;EA0BL0O,MAAAA,qBAAqB,EAAEZ,QAAQ,IAAI;EACjC,QAAIA,IAAAA,QAAJ,WAAIA,QAAJ,GAAgB,CAACzN,QAAQ,CAACsO,oBAAT,EAAjB,EAAkD;EAChDtO,UAAAA,QAAQ,CAACoO,WAAT,CAAqB,IAArB,CAAA,CAAA;EACD,SAFD,MAEO;EACLpO,UAAAA,QAAQ,CAACoO,WAAT,CAAqB,EAArB,CAAA,CAAA;EACD,SAAA;EACF,OAhCI;EAiCLD,MAAAA,aAAa,EAAE3B,YAAY,IAAI;EAAA,QAAA,IAAA,qBAAA,EAAA,sBAAA,CAAA;;EAC7BxM,QAAAA,QAAQ,CAACoO,WAAT,CACE5B,YAAY,GAAG,EAAH,GAAQxM,CAAAA,qBAAAA,GAAAA,CAAAA,sBAAAA,GAAAA,QAAQ,CAACyM,YAAjB,KAAA,IAAA,GAAA,KAAA,CAAA,GAAQ,sBAAuBgB,CAAAA,QAA/B,oCAA2C,EADzD,CAAA,CAAA;EAGD,OArCI;EAsCLc,MAAAA,oBAAoB,EAAE,MAAM;EAC1B,QAAA,OAAOvO,QAAQ,CAACkH,WAAT,EAAA,CAAuBsH,QAAvB,CAAgC3M,IAAhC,CAAqCyE,GAAG,IAAIA,GAAG,CAACmI,YAAJ,EAA5C,CAAP,CAAA;EACD,OAxCI;EAyCLC,MAAAA,+BAA+B,EAAE,MAAM;EACrC,QAAA,OAAQ1D,CAAD,IAAgB;EACnBA,UAAAA,CAAD,CAAWC,OAAX,IAACD,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,CAAD,CAAWC,OAAX,EAAA,CAAA;EACDjL,UAAAA,QAAQ,CAACqO,qBAAT,EAAA,CAAA;EACD,SAHD,CAAA;EAID,OA9CI;EA+CLM,MAAAA,qBAAqB,EAAE,MAAM;EAC3B,QAAA,MAAMlB,QAAQ,GAAGzN,QAAQ,CAACwJ,QAAT,GAAoBiE,QAArC,CAAA;EACA,QAAA,OAAOA,QAAQ,KAAK,IAAb,IAAqBzJ,MAAM,CAAC4K,MAAP,CAAcnB,QAAd,CAAA,CAAwB5L,IAAxB,CAA6BgN,OAA7B,CAA5B,CAAA;EACD,OAlDI;EAmDLP,MAAAA,oBAAoB,EAAE,MAAM;EAC1B,QAAMb,MAAAA,QAAQ,GAAGzN,QAAQ,CAACwJ,QAAT,EAAoBiE,CAAAA,QAArC,CAD0B;;EAI1B,QAAIA,IAAAA,QAAQ,KAAK,IAAjB,EAAuB;EACrB,UAAA,OAAO,IAAP,CAAA;EACD,SANyB;;;EAS1B,QAAA,IAAIzN,QAAQ,CAACkH,WAAT,EAAA,CAAuBsH,QAAvB,CAAgC3M,IAAhC,CAAqCyE,GAAG,IAAIA,GAAG,CAACwI,aAAJ,EAA5C,CAAJ,EAAsE;EACpE,UAAA,OAAO,KAAP,CAAA;EACD,SAXyB;;;EAc1B,QAAA,OAAO,IAAP,CAAA;EACD,OAlEI;EAmELC,MAAAA,gBAAgB,EAAE,MAAM;EACtB,QAAIC,IAAAA,QAAQ,GAAG,CAAf,CAAA;EAEA,QAAA,MAAMC,MAAM,GACVjP,QAAQ,CAACwJ,QAAT,EAAA,CAAoBiE,QAApB,KAAiC,IAAjC,GACIzJ,MAAM,CAACkL,IAAP,CAAYlP,QAAQ,CAACkH,WAAT,EAAuBG,CAAAA,QAAnC,CADJ,GAEIrD,MAAM,CAACkL,IAAP,CAAYlP,QAAQ,CAACwJ,QAAT,EAAA,CAAoBiE,QAAhC,CAHN,CAAA;EAKAwB,QAAAA,MAAM,CAACrO,OAAP,CAAe2C,EAAE,IAAI;EACnB,UAAA,MAAM4L,OAAO,GAAG5L,EAAE,CAAC6L,KAAH,CAAS,GAAT,CAAhB,CAAA;EACAJ,UAAAA,QAAQ,GAAG7M,IAAI,CAACU,GAAL,CAASmM,QAAT,EAAmBG,OAAO,CAACnO,MAA3B,CAAX,CAAA;EACD,SAHD,CAAA,CAAA;EAKA,QAAA,OAAOgO,QAAP,CAAA;EACD,OAjFI;EAkFLK,MAAAA,sBAAsB,EAAE,MAAMrP,QAAQ,CAACsP,kBAAT,EAlFzB;EAmFLC,MAAAA,mBAAmB,EAAE,MAAM;EACzB,QACE,IAAA,CAACvP,QAAQ,CAACwP,oBAAV,IACAxP,QAAQ,CAACkD,OAAT,CAAiBqM,mBAFnB,EAGE;EACAvP,UAAAA,QAAQ,CAACwP,oBAAT,GACExP,QAAQ,CAACkD,OAAT,CAAiBqM,mBAAjB,CAAqCvP,QAArC,CADF,CAAA;EAED,SAAA;;EAED,QACEA,IAAAA,QAAQ,CAACkD,OAAT,CAAiBuM,eAAjB,IACA,CAACzP,QAAQ,CAACwP,oBAFZ,EAGE;EACA,UAAOxP,OAAAA,QAAQ,CAACqP,sBAAT,EAAP,CAAA;EACD,SAAA;;EAED,QAAOrP,OAAAA,QAAQ,CAACwP,oBAAT,EAAP,CAAA;EACD,OAAA;EApGI,KAAP,CAAA;EAsGD,GA/HoC;EAiIrChJ,EAAAA,SAAS,EAAE,CACTF,GADS,EAETtG,QAFS,KAGO;EAChB,IAAO,OAAA;EACL0P,MAAAA,cAAc,EAAEjC,QAAQ,IAAI;EAC1BzN,QAAAA,QAAQ,CAACoO,WAAT,CAAqBlO,GAAG,IAAI;EAAA,UAAA,IAAA,SAAA,CAAA;;EAC1B,UAAA,MAAMyP,MAAM,GAAGzP,GAAG,KAAK,IAAR,GAAe,IAAf,GAAsB,CAAC,EAACA,GAAD,YAACA,GAAG,CAAGoG,GAAG,CAAC/C,EAAP,CAAJ,CAAtC,CAAA;EAEA,UAAIqM,IAAAA,WAA8B,GAAG,EAArC,CAAA;;EAEA,UAAI1P,IAAAA,GAAG,KAAK,IAAZ,EAAkB;EAChB8D,YAAAA,MAAM,CAACkL,IAAP,CAAYlP,QAAQ,CAACkH,WAAT,EAAA,CAAuBG,QAAnC,CAAA,CAA6CzG,OAA7C,CAAqDgH,KAAK,IAAI;EAC5DgI,cAAAA,WAAW,CAAChI,KAAD,CAAX,GAAqB,IAArB,CAAA;EACD,aAFD,CAAA,CAAA;EAGD,WAJD,MAIO;EACLgI,YAAAA,WAAW,GAAG1P,GAAd,CAAA;EACD,WAAA;;EAEDuN,UAAAA,QAAQ,GAAA,CAAA,SAAA,GAAGA,QAAH,KAAA,IAAA,GAAA,SAAA,GAAe,CAACkC,MAAxB,CAAA;;EAEA,UAAA,IAAI,CAACA,MAAD,IAAWlC,QAAf,EAAyB;EACvB,YAAO,OAAA,EACL,GAAGmC,WADE;EAEL,cAACtJ,CAAAA,GAAG,CAAC/C,EAAL,GAAU,IAAA;EAFL,aAAP,CAAA;EAID,WAAA;;EAED,UAAA,IAAIoM,MAAM,IAAI,CAAClC,QAAf,EAAyB;EACvB,YAAM,MAAA;EAAE,cAAA,CAACnH,GAAG,CAAC/C,EAAL,GAAU2G,CAAZ;EAAe,cAAGC,GAAAA,IAAAA;EAAlB,aAAA,GAA2ByF,WAAjC,CAAA;EACA,YAAA,OAAOzF,IAAP,CAAA;EACD,WAAA;;EAED,UAAA,OAAOjK,GAAP,CAAA;EACD,SA5BD,CAAA,CAAA;EA6BD,OA/BI;EAgCL4O,MAAAA,aAAa,EAAE,MAAM;EAAA,QAAA,IAAA,qBAAA,CAAA;;EACnB,QAAA,MAAMrB,QAAQ,GAAGzN,QAAQ,CAACwJ,QAAT,GAAoBiE,QAArC,CAAA;EAEA,QAAA,OAAO,CAAC,EAAA,CAAA,qBAAA,GACNzN,QAAQ,CAACkD,OAAT,CAAiB2M,gBADX,IAAA,IAAA,GAAA,KAAA,CAAA,GACN7P,QAAQ,CAACkD,OAAT,CAAiB2M,gBAAjB,CAAoCvJ,GAApC,CADM,KAAA,IAAA,GAAA,qBAAA,GAELmH,QAAQ,KAAK,IAAb,KAAqBA,QAArB,IAAA,IAAA,GAAA,KAAA,CAAA,GAAqBA,QAAQ,CAAGnH,GAAG,CAAC/C,EAAP,CAA7B,CAFK,CAAR,CAAA;EAID,OAvCI;EAwCLkL,MAAAA,YAAY,EAAE,MAAM;EAAA,QAAA,IAAA,sBAAA,EAAA,qBAAA,EAAA,YAAA,CAAA;;EAClB,QAAA,OACE,CAACzO,CAAAA,sBAAAA,GAAAA,QAAQ,CAACkD,OAAT,CAAiB4M,eAAlB,IAAA,IAAA,GAAA,KAAA,CAAA,GAAC9P,QAAQ,CAACkD,OAAT,CAAiB4M,eAAjB,CAAmCxJ,GAAnC,CAAD,KAA4C,IAAA,GAAA,sBAAA,GAAA,IAA5C,MACCtG,CAAAA,qBAAAA,GAAAA,QAAQ,CAACkD,OAAT,CAAiB6M,eADlB,oCACqC,IADrC,CAAA,IAEA,CAAC,EAAA,CAAA,YAAA,GAACzJ,GAAG,CAACK,OAAL,KAAC,IAAA,IAAA,YAAA,CAAa3F,MAAd,CAHH,CAAA;EAKD,OA9CI;EA+CLgP,MAAAA,wBAAwB,EAAE,MAAM;EAC9B,QAAA,MAAMC,SAAS,GAAG3J,GAAG,CAACmI,YAAJ,EAAlB,CAAA;EAEA,QAAA,OAAO,MAAM;EACX,UAAI,IAAA,CAACwB,SAAL,EAAgB,OAAA;EAChB3J,UAAAA,GAAG,CAACoJ,cAAJ,EAAA,CAAA;EACD,SAHD,CAAA;EAID,OAAA;EAtDI,KAAP,CAAA;EAwDD,GAAA;EA7LoC;;ECtDvC,MAAMQ,cAA6B,GAAG,CACpC5J,GADoC,EAEpCJ,QAFoC,EAGpCiK,WAHoC,KAIjC;EACH,EAAA,MAAMC,MAAM,GAAGD,WAAW,CAACE,WAAZ,EAAf,CAAA;EACA,EAAO/J,OAAAA,GAAG,CAAC5C,QAAJ,CAAawC,QAAb,CAAuBmK,CAAAA,WAAvB,EAAqCC,CAAAA,QAArC,CAA8CF,MAA9C,CAAP,CAAA;EACD,CAPD,CAAA;;EASAF,cAAc,CAACK,UAAf,GAA6BC,GAAD,IAAcC,UAAU,CAACD,GAAD,CAApD,CAAA;;EAEA,MAAME,uBAAsC,GAAG,CAC7CpK,GAD6C,EAE7CJ,QAF6C,EAG7CiK,WAH6C,KAI1C;EACH,EAAO7J,OAAAA,GAAG,CAAC5C,QAAJ,CAAawC,QAAb,CAAuBoK,CAAAA,QAAvB,CAAgCH,WAAhC,CAAP,CAAA;EACD,CAND,CAAA;;EAQAO,uBAAuB,CAACH,UAAxB,GAAsCC,GAAD,IAAcC,UAAU,CAACD,GAAD,CAA7D,CAAA;;EAEA,MAAMG,YAA2B,GAAG,CAClCrK,GADkC,EAElCJ,QAFkC,EAGlCiK,WAHkC,KAI/B;EACH,EAAO7J,OAAAA,GAAG,CAAC5C,QAAJ,CAAawC,QAAb,CAAuBmK,CAAAA,WAAvB,EAAyCF,KAAAA,WAAW,CAACE,WAAZ,EAAhD,CAAA;EACD,CAND,CAAA;;EAQAM,YAAY,CAACJ,UAAb,GAA2BC,GAAD,IAAcC,UAAU,CAACD,GAAD,CAAlD,CAAA;;EAEA,MAAMI,WAA0B,GAAG,CACjCtK,GADiC,EAEjCJ,QAFiC,EAGjCiK,WAHiC,KAI9B;EACH,EAAO7J,OAAAA,GAAG,CAAC5C,QAAJ,CAAawC,QAAb,CAAuBoK,CAAAA,QAAvB,CAAgCH,WAAhC,CAAP,CAAA;EACD,CAND,CAAA;;EAQAS,WAAW,CAACL,UAAZ,GAA0BC,GAAD,IAAcC,UAAU,CAACD,GAAD,CAAV,IAAmB,EAACA,GAAD,IAAA,IAAA,IAACA,GAAG,CAAExP,MAAN,CAA1D,CAAA;;EAEA,MAAM6P,cAA6B,GAAG,CACpCvK,GADoC,EAEpCJ,QAFoC,EAGpCiK,WAHoC,KAIjC;EACH,EAAA,OAAO,CAACA,WAAW,CAACtO,IAAZ,CAAiB2O,GAAG,IAAI,CAAClK,GAAG,CAAC5C,QAAJ,CAAawC,QAAb,CAAA,CAAuBoK,QAAvB,CAAgCE,GAAhC,CAAzB,CAAR,CAAA;EACD,CAND,CAAA;;EAQAK,cAAc,CAACN,UAAf,GAA6BC,GAAD,IAAcC,UAAU,CAACD,GAAD,CAAV,IAAmB,EAACA,GAAD,IAAA,IAAA,IAACA,GAAG,CAAExP,MAAN,CAA7D,CAAA;;EAEA,MAAM8P,eAA8B,GAAG,CACrCxK,GADqC,EAErCJ,QAFqC,EAGrCiK,WAHqC,KAIlC;EACH,EAAA,OAAOA,WAAW,CAACtO,IAAZ,CAAiB2O,GAAG,IAAIlK,GAAG,CAAC5C,QAAJ,CAAawC,QAAb,CAAuBoK,CAAAA,QAAvB,CAAgCE,GAAhC,CAAxB,CAAP,CAAA;EACD,CAND,CAAA;;EAQAM,eAAe,CAACP,UAAhB,GAA8BC,GAAD,IAAcC,UAAU,CAACD,GAAD,CAAV,IAAmB,EAACA,GAAD,IAAA,IAAA,IAACA,GAAG,CAAExP,MAAN,CAA9D,CAAA;;EAEA,MAAM+P,MAAqB,GAAG,CAACzK,GAAD,EAAMJ,QAAN,EAAwBiK,WAAxB,KAAiD;EAC7E,EAAA,OAAO7J,GAAG,CAAC5C,QAAJ,CAAawC,QAAb,MAA2BiK,WAAlC,CAAA;EACD,CAFD,CAAA;;EAIAY,MAAM,CAACR,UAAP,GAAqBC,GAAD,IAAcC,UAAU,CAACD,GAAD,CAA5C,CAAA;;EAEA,MAAMQ,UAAyB,GAAG,CAChC1K,GADgC,EAEhCJ,QAFgC,EAGhCiK,WAHgC,KAI7B;EACH,EAAA,OAAO7J,GAAG,CAAC5C,QAAJ,CAAawC,QAAb,KAA0BiK,WAAjC,CAAA;EACD,CAND,CAAA;;EAQAa,UAAU,CAACT,UAAX,GAAyBC,GAAD,IAAcC,UAAU,CAACD,GAAD,CAAhD,CAAA;;EAEA,MAAMS,aAA4B,GAAG,CACnC3K,GADmC,EAEnCJ,QAFmC,EAGnCiK,WAHmC,KAIhC;EACH,EAAA,IAAI,CAACrN,GAAD,EAAMD,GAAN,IAAasN,WAAjB,CAAA;EAEA,EAAA,MAAMe,QAAQ,GAAG5K,GAAG,CAAC5C,QAAJ,CAAawC,QAAb,CAAjB,CAAA;EACA,EAAA,OAAOgL,QAAQ,IAAIpO,GAAZ,IAAmBoO,QAAQ,IAAIrO,GAAtC,CAAA;EACD,CATD,CAAA;;EAWAoO,aAAa,CAACE,kBAAd,GAAoCX,GAAD,IAAqB;EACtD,EAAA,IAAI,CAACY,SAAD,EAAYC,SAAZ,IAAyBb,GAA7B,CAAA;EAEA,EAAA,IAAIc,SAAS,GACX,OAAOF,SAAP,KAAqB,QAArB,GAAgCG,UAAU,CAACH,SAAD,CAA1C,GAAkEA,SADpE,CAAA;EAEA,EAAA,IAAII,SAAS,GACX,OAAOH,SAAP,KAAqB,QAArB,GAAgCE,UAAU,CAACF,SAAD,CAA1C,GAAkEA,SADpE,CAAA;EAGA,EAAA,IAAIvO,GAAG,GACLsO,SAAS,KAAK,IAAd,IAAsBhJ,MAAM,CAACqJ,KAAP,CAAaH,SAAb,CAAtB,GAAgD,CAACI,QAAjD,GAA4DJ,SAD9D,CAAA;EAEA,EAAA,IAAIzO,GAAG,GAAGwO,SAAS,KAAK,IAAd,IAAsBjJ,MAAM,CAACqJ,KAAP,CAAaD,SAAb,CAAtB,GAAgDE,QAAhD,GAA2DF,SAArE,CAAA;;EAEA,EAAI1O,IAAAA,GAAG,GAAGD,GAAV,EAAe;EACb,IAAM8O,MAAAA,IAAI,GAAG7O,GAAb,CAAA;EACAA,IAAAA,GAAG,GAAGD,GAAN,CAAA;EACAA,IAAAA,GAAG,GAAG8O,IAAN,CAAA;EACD,GAAA;;EAED,EAAA,OAAO,CAAC7O,GAAD,EAAMD,GAAN,CAAP,CAAA;EACD,CAnBD,CAAA;;EAqBAoO,aAAa,CAACV,UAAd,GAA4BC,GAAD,IACzBC,UAAU,CAACD,GAAD,CAAV,IAAoBC,UAAU,CAACD,GAAG,CAAC,CAAD,CAAJ,CAAV,IAAsBC,UAAU,CAACD,GAAG,CAAC,CAAD,CAAJ,CADtD;;;AAKO,QAAMoB,SAAS,GAAG;EACvB1B,EAAAA,cADuB;EAEvBQ,EAAAA,uBAFuB;EAGvBC,EAAAA,YAHuB;EAIvBC,EAAAA,WAJuB;EAKvBC,EAAAA,cALuB;EAMvBC,EAAAA,eANuB;EAOvBC,EAAAA,MAPuB;EAQvBC,EAAAA,UARuB;EASvBC,EAAAA,aAAAA;EATuB,EAAlB;;EAcP;EAEA,SAASR,UAAT,CAAoBD,GAApB,EAA8B;EAC5B,EAAOA,OAAAA,GAAG,KAAK7L,SAAR,IAAqB6L,GAAG,KAAK,IAA7B,IAAqCA,GAAG,KAAK,EAApD,CAAA;EACD;;EC0BD;AAEO,QAAMqB,OAAqB,GAAG;EACnC5O,EAAAA,gBAAgB,EAAE,MAEkB;EAClC,IAAO,OAAA;EACL6O,MAAAA,QAAQ,EAAE,MAAA;EADL,KAAP,CAAA;EAGD,GAPkC;EASnChJ,EAAAA,eAAe,EAAGC,KAAD,IAA8B;EAC7C,IAAO,OAAA;EACLgJ,MAAAA,aAAa,EAAE,EADV;EAELC,MAAAA,YAAY,EAAErN,SAFT;EAGL;EACA;EACA,MAAGoE,GAAAA,KAAAA;EALE,KAAP,CAAA;EAOD,GAjBkC;EAmBnCG,EAAAA,iBAAiB,EACflJ,QADiB,IAEa;EAC9B,IAAO,OAAA;EACLiS,MAAAA,qBAAqB,EAAEnS,gBAAgB,CAAC,eAAD,EAAkBE,QAAlB,CADlC;EAELkS,MAAAA,oBAAoB,EAAEpS,gBAAgB,CAAC,cAAD,EAAiBE,QAAjB,CAFjC;EAGLmS,MAAAA,kBAAkB,EAAE,KAHf;EAILC,MAAAA,cAAc,EAAE,MAJX;EAKLC,MAAAA,wBAAwB,EAAE/O,MAAM,IAAI;EAAA,QAAA,IAAA,qBAAA,EAAA,sBAAA,CAAA;;EAClC,QAAMgP,MAAAA,KAAK,4BAAGtS,QAAQ,CACnBgH,eADW,EAEXwH,CAAAA,QAFW,CAEF,CAFE,CAAH,+CAAG,qBAEE9G,CAAAA,qBAFF,GAGXpE,MAAM,CAACC,EAHI,CAAH,KAAA,IAAA,GAAA,KAAA,CAAA,GAAG,sBAGCG,CAAAA,QAHD,EAAd,CAAA;EAKA,QAAO,OAAA,OAAO4O,KAAP,KAAiB,QAAxB,CAAA;EACD,OAAA;EAZI,KAAP,CAAA;EAcD,GApCkC;EAsCnChO,EAAAA,YAAY,EAAE,CACZhB,MADY,EAEZtD,QAFY,KAGiB;EAC7B,IAAO,OAAA;EACL8R,MAAAA,QAAQ,EAAExO,MAAM,CAACwO,QADZ;EAELS,MAAAA,eAAe,EAAE,MAAM;EACrB,QAAMC,MAAAA,QAAQ,GAAGxS,QAAQ,CAACgH,eAAT,EAA2BwH,CAAAA,QAA3B,CAAoC,CAApC,CAAjB,CAAA;EAEA,QAAM8D,MAAAA,KAAK,GAAGE,QAAH,IAAGA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,QAAQ,CAAE9O,QAAV,CAAmBJ,MAAM,CAACC,EAA1B,CAAd,CAAA;;EAEA,QAAA,IAAI,OAAO+O,KAAP,KAAiB,QAArB,EAA+B;EAC7B,UAAOV,OAAAA,SAAS,CAAC1B,cAAjB,CAAA;EACD,SAAA;;EAED,QAAA,IAAI,OAAOoC,KAAP,KAAiB,QAArB,EAA+B;EAC7B,UAAOV,OAAAA,SAAS,CAACX,aAAjB,CAAA;EACD,SAAA;;EAED,QAAIqB,IAAAA,KAAK,KAAK,IAAV,IAAkB,OAAOA,KAAP,KAAiB,QAAvC,EAAiD;EAC/C,UAAOV,OAAAA,SAAS,CAACb,MAAjB,CAAA;EACD,SAAA;;EAED,QAAA,IAAI0B,KAAK,CAACC,OAAN,CAAcJ,KAAd,CAAJ,EAA0B;EACxB,UAAOV,OAAAA,SAAS,CAAChB,WAAjB,CAAA;EACD,SAAA;;EAED,QAAOgB,OAAAA,SAAS,CAACZ,UAAjB,CAAA;EACD,OAxBI;EAyBL2B,MAAAA,WAAW,EAAE,MAAM;EAAA,QAAA,IAAA,IAAA,CAAA;;EACjB,QAAA,MAAMC,aAAa,GAAG5S,QAAQ,CAACkD,OAAT,CAAiB0O,SAAvC,CAAA;EAEA,QAAA,OAAOzR,UAAU,CAACmD,MAAM,CAACwO,QAAR,CAAV,GACHxO,MAAM,CAACwO,QADJ,GAEHxO,MAAM,CAACwO,QAAP,KAAoB,MAApB,GACAxO,MAAM,CAACiP,eAAP,EADA,GAECK,CAAAA,IAAAA,GAAAA,aAFD,IAECA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,aAAD,CACEtP,MAAM,CAACwO,QADT,CAFA,mBAKCF,SAAS,CACRtO,MAAM,CAACwO,QADC,CAPd,CAAA;EAUD,OAtCI;EAuCLe,MAAAA,YAAY,EAAE,MAAM;EAAA,QAAA,IAAA,qBAAA,EAAA,qBAAA,EAAA,sBAAA,CAAA;;EAClB,QACE,OAAA,CAAA,CAAA,qBAAA,GAACvP,MAAM,CAACwP,kBAAR,KAAA,IAAA,GAAA,qBAAA,GAA8B,IAA9B,MAAA,CAAA,qBAAA,GACC9S,QAAQ,CAACkD,OAAT,CAAiB6P,mBADlB,KAAA,IAAA,GAAA,qBAAA,GACyC,IADzC,CAAA,KAAA,CAAA,sBAAA,GAEC/S,QAAQ,CAACkD,OAAT,CAAiB8P,aAFlB,KAAA,IAAA,GAAA,sBAAA,GAEmC,IAFnC,CAAA,IAGA,CAAC,CAAC1P,MAAM,CAACsB,UAJX,CAAA;EAMD,OA9CI;EAgDLqO,MAAAA,kBAAkB,EAAE,MAAM;EAAA,QAAA,IAAA,qBAAA,EAAA,sBAAA,EAAA,sBAAA,EAAA,qBAAA,CAAA;;EACxB,QACE,OAAA,CAAA,CAAA,qBAAA,GAAC3P,MAAM,CAAC4P,kBAAR,oCAA8B,IAA9B,MAAA,CAAA,sBAAA,GACClT,QAAQ,CAACkD,OAAT,CAAiBgQ,kBADlB,KAAA,IAAA,GAAA,sBAAA,GACwC,IADxC,CAEClT,KAAAA,CAAAA,sBAAAA,GAAAA,QAAQ,CAACkD,OAAT,CAAiB8P,aAFlB,KAEmC,IAAA,GAAA,sBAAA,GAAA,IAFnC,+BAGChT,QAAQ,CAACkD,OAAT,CAAiBmP,wBAHlB,oBAGCrS,QAAQ,CAACkD,OAAT,CAAiBmP,wBAAjB,CAA4C/O,MAA5C,CAHD,oCAGwD,IAHxD,CAAA,IAIA,CAAC,CAACA,MAAM,CAACsB,UALX,CAAA;EAOD,OAxDI;EA0DLuO,MAAAA,aAAa,EAAE,MAAM7P,MAAM,CAAC8P,cAAP,EAAA,GAA0B,CAAC,CA1D3C;EA4DLC,MAAAA,cAAc,EAAE,MAAA;EAAA,QAAA,IAAA,qBAAA,EAAA,sBAAA,CAAA;;EAAA,QACdrT,OAAAA,CAAAA,qBAAAA,GAAAA,QAAQ,CAACwJ,QAAT,EAAA,CAAoBuI,aADN,KACd,IAAA,GAAA,KAAA,CAAA,GAAA,CAAA,sBAAA,GAAA,qBAAA,CAAmCuB,IAAnC,CAAwClT,CAAC,IAAIA,CAAC,CAACmD,EAAF,KAASD,MAAM,CAACC,EAA7D,CADc,KACd,IAAA,GAAA,KAAA,CAAA,GAAA,sBAAA,CAAkE+O,KADpD,CAAA;EAAA,OA5DX;EA+DLc,MAAAA,cAAc,EAAE,MAAA;EAAA,QAAA,IAAA,sBAAA,EAAA,sBAAA,CAAA;;EAAA,QACdpT,OAAAA,CAAAA,sBAAAA,GAAAA,CAAAA,sBAAAA,GAAAA,QAAQ,CAACwJ,QAAT,EAAA,CAAoBuI,aADN,KACd,IAAA,GAAA,KAAA,CAAA,GAAA,sBAAA,CAAmCjI,SAAnC,CAA6C1J,CAAC,IAAIA,CAAC,CAACmD,EAAF,KAASD,MAAM,CAACC,EAAlE,CADc,KAEd,IAAA,GAAA,sBAAA,GAAA,CAAC,CAFa,CAAA;EAAA,OA/DX;EAmELgQ,MAAAA,cAAc,EAAEjB,KAAK,IAAI;EACvBtS,QAAAA,QAAQ,CAACwT,gBAAT,CAA0BtT,GAAG,IAAI;EAC/B,UAAA,MAAM4R,QAAQ,GAAGxO,MAAM,CAACqP,WAAP,EAAjB,CAAA;EACA,UAAA,MAAMc,cAAc,GAAGvT,GAAH,IAAGA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,GAAG,CAAEoT,IAAL,CAAUlT,CAAC,IAAIA,CAAC,CAACmD,EAAF,KAASD,MAAM,CAACC,EAA/B,CAAvB,CAAA;EAEA,UAAA,MAAMmQ,SAAS,GAAGhU,gBAAgB,CAChC4S,KADgC,EAEhCmB,cAAc,GAAGA,cAAc,CAACnB,KAAlB,GAA0B3N,SAFR,CAAlC,CAJ+B;;EAU/B,UACEgP,IAAAA,sBAAsB,CACpB7B,QADoB,EAEpB4B,SAFoB,EAGpBpQ,MAHoB,CADxB,EAME;EAAA,YAAA,IAAA,WAAA,CAAA;;EACA,YAAA,OAAA,CAAA,WAAA,GAAOpD,GAAP,IAAOA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,GAAG,CAAE0T,MAAL,CAAYxT,CAAC,IAAIA,CAAC,CAACmD,EAAF,KAASD,MAAM,CAACC,EAAjC,CAAP,0BAA+C,EAA/C,CAAA;EACD,WAAA;;EAED,UAAA,MAAMsQ,YAAY,GAAG;EAAEtQ,YAAAA,EAAE,EAAED,MAAM,CAACC,EAAb;EAAiB+O,YAAAA,KAAK,EAAEoB,SAAAA;EAAxB,WAArB,CAAA;;EAEA,UAAA,IAAID,cAAJ,EAAoB;EAAA,YAAA,IAAA,QAAA,CAAA;;EAClB,YAAA,OAAA,CAAA,QAAA,GACEvT,GADF,IACEA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,GAAG,CAAEwF,GAAL,CAAStF,CAAC,IAAI;EACZ,cAAA,IAAIA,CAAC,CAACmD,EAAF,KAASD,MAAM,CAACC,EAApB,EAAwB;EACtB,gBAAA,OAAOsQ,YAAP,CAAA;EACD,eAAA;;EACD,cAAA,OAAOzT,CAAP,CAAA;EACD,aALD,CADF,uBAMQ,EANR,CAAA;EAQD,WAAA;;EAED,UAAA,IAAIF,GAAJ,IAAA,IAAA,IAAIA,GAAG,CAAEc,MAAT,EAAiB;EACf,YAAA,OAAO,CAAC,GAAGd,GAAJ,EAAS2T,YAAT,CAAP,CAAA;EACD,WAAA;;EAED,UAAO,OAAA,CAACA,YAAD,CAAP,CAAA;EACD,SAtCD,CAAA,CAAA;EAuCD,OA3GI;EA4GLC,MAAAA,mBAAmB,EACjB9T,QAAQ,CAACkD,OAAT,CAAiB6Q,kBAAjB,IACA/T,QAAQ,CAACkD,OAAT,CAAiB6Q,kBAAjB,CAAoC/T,QAApC,EAA8CsD,MAAM,CAACC,EAArD,CA9GG;EA+GLwQ,MAAAA,kBAAkB,EAAE,MAAM;EACxB,QAAA,IAAI,CAACzQ,MAAM,CAACwQ,mBAAZ,EAAiC;EAC/B,UAAO9T,OAAAA,QAAQ,CAACgU,sBAAT,EAAP,CAAA;EACD,SAAA;;EAED,QAAO1Q,OAAAA,MAAM,CAACwQ,mBAAP,EAAP,CAAA;EACD,OArHI;EAsHLG,MAAAA,uBAAuB,EACrBjU,QAAQ,CAACkD,OAAT,CAAiBgR,sBAAjB,IACAlU,QAAQ,CAACkD,OAAT,CAAiBgR,sBAAjB,CAAwClU,QAAxC,EAAkDsD,MAAM,CAACC,EAAzD,CAxHG;EAyHL2Q,MAAAA,sBAAsB,EAAE,MAAM;EAC5B,QAAA,IAAI,CAAC5Q,MAAM,CAAC2Q,uBAAZ,EAAqC;EACnC,UAAO,OAAA,IAAIE,GAAJ,EAAP,CAAA;EACD,SAAA;;EAED,QAAO7Q,OAAAA,MAAM,CAAC2Q,uBAAP,EAAP,CAAA;EACD,OA/HI;EAgILG,MAAAA,uBAAuB,EACrBpU,QAAQ,CAACkD,OAAT,CAAiBmR,sBAAjB,IACArU,QAAQ,CAACkD,OAAT,CAAiBmR,sBAAjB,CAAwCrU,QAAxC,EAAkDsD,MAAM,CAACC,EAAzD,CAlIG;EAmIL8Q,MAAAA,sBAAsB,EAAE,MAAM;EAC5B,QAAA,IAAI,CAAC/Q,MAAM,CAAC8Q,uBAAZ,EAAqC;EACnC,UAAA,OAAOzP,SAAP,CAAA;EACD,SAAA;;EAED,QAAOrB,OAAAA,MAAM,CAAC8Q,uBAAP,EAAP,CAAA;EACD,OAzII;EA2IL;;EA3IK,KAAP,CAAA;EA6ID,GAvLkC;EAyLnC5N,EAAAA,SAAS,EAAE,CACTF,GADS,EAETtG,QAFS,KAGiB;EAC1B,IAAO,OAAA;EACL+R,MAAAA,aAAa,EAAE,EADV;EAELuC,MAAAA,iBAAiB,EAAE,EAFd;EAGLC,MAAAA,gBAAgB,EAAE,EAAA;EAHb,KAAP,CAAA;EAKD,GAlMkC;EAoMnCvR,EAAAA,cAAc,EACZhD,QADc,IAEiB;EAC/B,IAAO,OAAA;EACLwU,MAAAA,qBAAqB,EAAE,MAAM;EAC3B,QAAO5C,OAAAA,SAAS,CAAC1B,cAAjB,CAAA;EACD,OAHI;EAKLuE,MAAAA,iBAAiB,EAAE,MAAM;EAAA,QAAA,IAAA,KAAA,CAAA;;EACvB,QAAM,MAAA;EAAE7C,UAAAA,SAAS,EAAEgB,aAAb;EAA4BR,UAAAA,cAAc,EAAEA,cAAAA;EAA5C,SACJpS,GAAAA,QAAQ,CAACkD,OADX,CAAA;EAGA,QAAO/C,OAAAA,UAAU,CAACiS,cAAD,CAAV,GACHA,cADG,GAEHA,cAAc,KAAK,MAAnB,GACApS,QAAQ,CAACwU,qBAAT,EADA,GAAA,CAAA,KAAA,GAEC5B,aAFD,IAAA,IAAA,GAAA,KAAA,CAAA,GAECA,aAAD,CACER,cADF,CAFA,KAKCR,IAAAA,GAAAA,KAAAA,GAAAA,SAAS,CACRQ,cADQ,CAPd,CAAA;EAUD,OAnBI;EAqBLoB,MAAAA,gBAAgB,EAAG7T,OAAD,IAA0C;EAC1D,QAAA,MAAM2F,WAAW,GAAGtF,QAAQ,CAACgG,iBAAT,EAApB,CAAA;;EAEA,QAAM0O,MAAAA,QAAQ,GAAIxU,GAAD,IAA6B;EAAA,UAAA,IAAA,iBAAA,CAAA;;EAC5C,UAAOR,OAAAA,CAAAA,iBAAAA,GAAAA,gBAAgB,CAACC,OAAD,EAAUO,GAAV,CAAvB,KAAA,IAAA,GAAA,KAAA,CAAA,GAAO,iBAAgC0T,CAAAA,MAAhC,CAAuCA,MAAM,IAAI;EACtD,YAAA,MAAMtQ,MAAM,GAAGgC,WAAW,CAACgO,IAAZ,CAAiBlT,CAAC,IAAIA,CAAC,CAACmD,EAAF,KAASqQ,MAAM,CAACrQ,EAAtC,CAAf,CAAA;;EAEA,YAAA,IAAID,MAAJ,EAAY;EACV,cAAA,MAAMwO,QAAQ,GAAGxO,MAAM,CAACqP,WAAP,EAAjB,CAAA;;EAEA,cAAIgB,IAAAA,sBAAsB,CAAC7B,QAAD,EAAW8B,MAAM,CAACtB,KAAlB,EAAyBhP,MAAzB,CAA1B,EAA4D;EAC1D,gBAAA,OAAO,KAAP,CAAA;EACD,eAAA;EACF,aAAA;;EAED,YAAA,OAAO,IAAP,CAAA;EACD,WAZM,CAAP,CAAA;EAaD,SAdD,CAAA;;EAgBAtD,QAAAA,QAAQ,CAACkD,OAAT,CAAiB+O,qBAAjB,IAAA,IAAA,GAAA,KAAA,CAAA,GAAAjS,QAAQ,CAACkD,OAAT,CAAiB+O,qBAAjB,CAAyCyC,QAAzC,CAAA,CAAA;EACD,OAzCI;EA2CLC,MAAAA,eAAe,EAAEhV,OAAO,IAAI;EAC1BK,QAAAA,QAAQ,CAACkD,OAAT,CAAiBgP,oBAAjB,IAAA,IAAA,GAAA,KAAA,CAAA,GAAAlS,QAAQ,CAACkD,OAAT,CAAiBgP,oBAAjB,CAAwCvS,OAAxC,CAAA,CAAA;EACD,OA7CI;EA+CLiV,MAAAA,iBAAiB,EAAEpI,YAAY,IAAI;EACjCxM,QAAAA,QAAQ,CAAC2U,eAAT,CACEnI,YAAY,GAAG7H,SAAH,GAAe3E,QAAQ,CAACyM,YAAT,CAAsBuF,YADnD,CAAA,CAAA;EAGD,OAnDI;EAqDL6C,MAAAA,kBAAkB,EAAErI,YAAY,IAAI;EAAA,QAAA,IAAA,qBAAA,EAAA,sBAAA,CAAA;;EAClCxM,QAAAA,QAAQ,CAACwT,gBAAT,CACEhH,YAAY,GAAG,EAAH,GAAQxM,CAAAA,qBAAAA,GAAAA,CAAAA,sBAAAA,GAAAA,QAAQ,CAACyM,YAAjB,KAAA,IAAA,GAAA,KAAA,CAAA,GAAQ,sBAAuBsF,CAAAA,aAA/B,oCAAgD,EAD9D,CAAA,CAAA;EAGD,OAzDI;EA2DLiC,MAAAA,sBAAsB,EAAE,MAAMhU,QAAQ,CAACgH,eAAT,EA3DzB;EA4DL8N,MAAAA,oBAAoB,EAClB9U,QAAQ,CAACkD,OAAT,CAAiB6R,mBAAjB,IACA/U,QAAQ,CAACkD,OAAT,CAAiB6R,mBAAjB,CAAqC/U,QAArC,CA9DG;EA+DL+U,MAAAA,mBAAmB,EAAE,MAAM;EACzB,QACE/U,IAAAA,QAAQ,CAACkD,OAAT,CAAiB8R,eAAjB,IACA,CAAChV,QAAQ,CAAC8U,oBAFZ,EAGE;EACA,UAAO9U,OAAAA,QAAQ,CAACgU,sBAAT,EAAP,CAAA;EACD,SAAA;;EAED,QAAOhU,OAAAA,QAAQ,CAAC8U,oBAAT,EAAP,CAAA;EACD,OAxEI;EA0ELG,MAAAA,yBAAyB,EACvBjV,QAAQ,CAACkD,OAAT,CAAiB6Q,kBAAjB,IACA/T,QAAQ,CAACkD,OAAT,CAAiB6Q,kBAAjB,CAAoC/T,QAApC,EAA8C,YAA9C,CA5EG;EA8ELkV,MAAAA,wBAAwB,EAAE,MAAM;EAC9B,QACElV,IAAAA,QAAQ,CAACkD,OAAT,CAAiB8R,eAAjB,IACA,CAAChV,QAAQ,CAACiV,yBAFZ,EAGE;EACA,UAAOjV,OAAAA,QAAQ,CAACgU,sBAAT,EAAP,CAAA;EACD,SAAA;;EAED,QAAOhU,OAAAA,QAAQ,CAACiV,yBAAT,EAAP,CAAA;EACD,OAvFI;EAyFLE,MAAAA,6BAA6B,EAC3BnV,QAAQ,CAACkD,OAAT,CAAiBgR,sBAAjB,IACAlU,QAAQ,CAACkD,OAAT,CAAiBgR,sBAAjB,CAAwClU,QAAxC,EAAkD,YAAlD,CA3FG;EA4FLoV,MAAAA,4BAA4B,EAAE,MAAM;EAClC,QAAA,IAAI,CAACpV,QAAQ,CAACmV,6BAAd,EAA6C;EAC3C,UAAO,OAAA,IAAIhB,GAAJ,EAAP,CAAA;EACD,SAAA;;EAED,QAAOnU,OAAAA,QAAQ,CAACmV,6BAAT,EAAP,CAAA;EACD,OAlGI;EAoGLE,MAAAA,6BAA6B,EAC3BrV,QAAQ,CAACkD,OAAT,CAAiBmR,sBAAjB,IACArU,QAAQ,CAACkD,OAAT,CAAiBmR,sBAAjB,CAAwCrU,QAAxC,EAAkD,YAAlD,CAtGG;EAuGLsV,MAAAA,4BAA4B,EAAE,MAAM;EAClC,QAAA,IAAI,CAACtV,QAAQ,CAACqV,6BAAd,EAA6C;EAC3C,UAAA,OAAA;EACD,SAAA;;EAED,QAAOrV,OAAAA,QAAQ,CAACqV,6BAAT,EAAP,CAAA;EACD,OAAA;EA7GI,KAAP,CAAA;EA+GD,GAAA;EAtTkC,EAA9B;EAyTA,SAAS1B,sBAAT,CACL7B,QADK,EAELQ,KAFK,EAGLhP,MAHK,EAIL;EACA,EAAA,OACE,CAACwO,QAAQ,IAAIA,QAAQ,CAACvB,UAArB,GACGuB,QAAQ,CAACvB,UAAT,CAAoB+B,KAApB,EAA2BhP,MAA3B,CADH,GAEG,KAFJ,KAGA,OAAOgP,KAAP,KAAiB,WAHjB,IAIC,OAAOA,KAAP,KAAiB,QAAjB,IAA6B,CAACA,KALjC,CAAA;EAOD;;ACveM,QAAMiD,cAAc,GAAG;EAC5B9K,EAAAA,GAD4B;EAE5B3H,EAAAA,GAF4B;EAG5BD,EAAAA,GAH4B;EAI5B2S,EAAAA,MAJ4B;EAK5BC,EAAAA,IAL4B;EAM5BC,EAAAA,MAN4B;EAO5BC,EAAAA,MAP4B;EAQ5BC,EAAAA,WAR4B;EAS5BC,EAAAA,KAAAA;EAT4B,EAAvB;;EAcP,SAASpL,GAAT,CAAaqL,cAAb,EAA8CC,cAA9C,EAA+E;EAC7E;EACA;EACA,EAAOA,OAAAA,cAAc,GAAGlS,MAAjB,CACL,CAAC4G,GAAD,EAAcuL,IAAd,KAAgCvL,GAAG,IAAI,OAAOuL,IAAP,KAAgB,QAAhB,GAA2BA,IAA3B,GAAkC,CAAtC,CAD9B,EAEL,CAFK,CAAP,CAAA;EAID,CAAA;;EAED,SAASlT,GAAT,CAAagT,cAAb,EAA8CC,cAA9C,EAA+E;EAC7E,EAAA,IAAIjT,GAAJ,CAAA;;EAEA,EAAA,KAAK,MAAMwP,KAAX,IAAoByD,cAAc,EAAlC,EAAkD;EAChD,IAAA,IACEzD,KAAK,IAAI,IAAT,KACCxP,GAAG,GAAIwP,KAAP,IAAiBxP,GAAG,KAAK6B,SAAR,IAAqB2N,KAAK,IAAIA,KADhD,CADF,EAGE;EACAxP,MAAAA,GAAG,GAAGwP,KAAN,CAAA;EACD,KAAA;EACF,GAAA;;EAED,EAAA,OAAOxP,GAAP,CAAA;EACD,CAAA;;EAED,SAASD,GAAT,CAAaiT,cAAb,EAA8CC,cAA9C,EAA+E;EAC7E,EAAA,IAAIlT,GAAJ,CAAA;;EAEA,EAAA,KAAK,MAAMyP,KAAX,IAAoByD,cAAc,EAAlC,EAAkD;EAChD,IAAA,IACEzD,KAAK,IAAI,IAAT,KACCzP,GAAG,GAAIyP,KAAP,IAAiBzP,GAAG,KAAK8B,SAAR,IAAqB2N,KAAK,IAAIA,KADhD,CADF,EAGE;EACAzP,MAAAA,GAAG,GAAGyP,KAAN,CAAA;EACD,KAAA;EACF,GAAA;;EAED,EAAA,OAAOzP,GAAP,CAAA;EACD,CAAA;;EAED,SAAS2S,MAAT,CACEM,cADF,EAEEC,cAFF,EAGE;EACA,EAAA,IAAIjT,GAAJ,CAAA;EACA,EAAA,IAAID,GAAJ,CAAA;;EAEA,EAAA,KAAK,MAAMyP,KAAX,IAAoByD,cAAc,EAAlC,EAAkD;EAChD,IAAIzD,IAAAA,KAAK,IAAI,IAAb,EAAmB;EACjB,MAAIxP,IAAAA,GAAG,KAAK6B,SAAZ,EAAuB;EACrB,QAAI2N,IAAAA,KAAK,IAAIA,KAAb,EAAoBxP,GAAG,GAAGD,GAAG,GAAGyP,KAAZ,CAAA;EACrB,OAFD,MAEO;EACL,QAAA,IAAIxP,GAAG,GAAGwP,KAAV,EAAiBxP,GAAG,GAAGwP,KAAN,CAAA;EACjB,QAAA,IAAIzP,GAAG,GAAIyP,KAAX,EAAkBzP,GAAG,GAAGyP,KAAN,CAAA;EACnB,OAAA;EACF,KAAA;EACF,GAAA;;EAED,EAAA,OAAO,CAACxP,GAAD,EAAMD,GAAN,CAAP,CAAA;EACD,CAAA;;EAEM,SAAS4S,IAAT,CAAcQ,aAAd,EAA8C;EACnD,EAAIJ,IAAAA,KAAK,GAAG,CAAZ,CAAA;EACA,EAAIpL,IAAAA,GAAG,GAAG,CAAV,CAAA;;EAEA,EAAA,KAAK,IAAI6H,KAAT,IAAkB2D,aAAa,EAA/B,EAA+C;EAC7C,IAAI3D,IAAAA,KAAK,IAAI,IAAT,IAAiB,CAACA,KAAK,GAAG,CAACA,KAAV,KAAoBA,KAAzC,EAAgD;EAC9C,MAAA,EAAEuD,KAAF,EAAUpL,GAAG,IAAI6H,KAAjB,CAAA;EACD,KAAA;EACF,GAAA;;EAED,EAAA,IAAIuD,KAAJ,EAAW,OAAOpL,GAAG,GAAGoL,KAAb,CAAA;EAEX,EAAA,OAAA;EACD,CAAA;;EAED,SAASH,MAAT,CAAgBO,aAAhB,EAAgD;EAC9C,EAAMC,MAAAA,UAAU,GAAGD,aAAa,EAAhC,CAAA;;EACA,EAAA,IAAI,CAACC,UAAU,CAAClV,MAAhB,EAAwB;EACtB,IAAA,OAAA;EACD,GAAA;;EAED,EAAI8B,IAAAA,GAAG,GAAG,CAAV,CAAA;EACA,EAAID,IAAAA,GAAG,GAAG,CAAV,CAAA;EAEAqT,EAAAA,UAAU,CAACtV,OAAX,CAAmB0R,KAAK,IAAI;EAC1B,IAAA,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;EAC7BxP,MAAAA,GAAG,GAAGX,IAAI,CAACW,GAAL,CAASA,GAAT,EAAcwP,KAAd,CAAN,CAAA;EACAzP,MAAAA,GAAG,GAAGV,IAAI,CAACU,GAAL,CAASA,GAAT,EAAcyP,KAAd,CAAN,CAAA;EACD,KAAA;EACF,GALD,CAAA,CAAA;EAOA,EAAA,OAAO,CAACxP,GAAG,GAAGD,GAAP,IAAc,CAArB,CAAA;EACD,CAAA;;EAED,SAAS8S,MAAT,CAAmBM,aAAnB,EAA6C;EAC3C,EAAA,OAAOxD,KAAK,CAAC0D,IAAN,CAAW,IAAIC,GAAJ,CAAQH,aAAa,EAArB,CAAA,CAAyBrH,MAAzB,EAAX,CAAP,CAAA;EACD,CAAA;;EAED,SAASgH,WAAT,CAAqBK,aAArB,EAAqD;EACnD,EAAA,OAAO,IAAIG,GAAJ,CAAQH,aAAa,EAArB,EAAyBhO,IAAhC,CAAA;EACD,CAAA;;EAED,SAAS4N,KAAT,CAAeI,aAAf,EAA+C;EAC7C,EAAOA,OAAAA,aAAa,GAAGjV,MAAvB,CAAA;EACD;;ECXD;AAEO,QAAMqV,QAAsB,GAAG;EACpCpT,EAAAA,gBAAgB,EAAE,MAEmB;EACnC,IAAO,OAAA;EACLqT,MAAAA,aAAa,EAAE,MAAA;EADV,KAAP,CAAA;EAGD,GAPmC;EASpCxN,EAAAA,eAAe,EAAGC,KAAD,IAA+B;EAC9C,IAAO,OAAA;EACLwN,MAAAA,QAAQ,EAAE,EADL;EAEL,MAAGxN,GAAAA,KAAAA;EAFE,KAAP,CAAA;EAID,GAdmC;EAgBpCG,EAAAA,iBAAiB,EACflJ,QADiB,IAEc;EAC/B,IAAO,OAAA;EACLwW,MAAAA,gBAAgB,EAAE1W,gBAAgB,CAAC,UAAD,EAAaE,QAAb,CAD7B;EAELyW,MAAAA,iBAAiB,EAAE,SAAA;EAFd,KAAP,CAAA;EAID,GAvBmC;EAyBpCnS,EAAAA,YAAY,EAAE,CACZhB,MADY,EAEZtD,QAFY,KAGkB;EAC9B,IAAO,OAAA;EACL0W,MAAAA,cAAc,EAAE,MAAM;EACpB1W,QAAAA,QAAQ,CAAC2W,WAAT,CAAqBzW,GAAG,IAAI;EAC1B;EACA,UAAIA,IAAAA,GAAJ,IAAIA,IAAAA,IAAAA,GAAG,CAAEoQ,QAAL,CAAchN,MAAM,CAACC,EAArB,CAAJ,EAA8B;EAC5B,YAAOrD,OAAAA,GAAG,CAAC0T,MAAJ,CAAWxT,CAAC,IAAIA,CAAC,KAAKkD,MAAM,CAACC,EAA7B,CAAP,CAAA;EACD,WAAA;;EAED,UAAA,OAAO,CAAC,IAAIrD,GAAJ,IAAA,IAAA,GAAIA,GAAJ,GAAW,EAAX,CAAD,EAAiBoD,MAAM,CAACC,EAAxB,CAAP,CAAA;EACD,SAPD,CAAA,CAAA;EAQD,OAVI;EAYLqT,MAAAA,WAAW,EAAE,MAAM;EAAA,QAAA,IAAA,IAAA,EAAA,KAAA,EAAA,KAAA,EAAA,qBAAA,CAAA;;EACjB,QAAA,OAAA,CAAA,IAAA,GAAA,CAAA,KAAA,GAAA,CAAA,KAAA,GAAA,CAAA,qBAAA,GACEtT,MAAM,CAACuT,cADT,oCAEE,IAFF,KAAA,IAAA,GAAA,KAAA,GAGE7W,QAAQ,CAACkD,OAAT,CAAiB2T,cAHnB,oBAIE,IAJF,KAAA,IAAA,GAAA,IAAA,GAKE,CAAC,CAACvT,MAAM,CAACsB,UALX,CAAA;EAOD,OApBI;EAsBLkS,MAAAA,YAAY,EAAE,MAAM;EAAA,QAAA,IAAA,qBAAA,CAAA;;EAClB,QAAA,OAAA,CAAA,qBAAA,GAAO9W,QAAQ,CAACwJ,QAAT,EAAA,CAAoB+M,QAA3B,KAAA,IAAA,GAAA,KAAA,CAAA,GAAO,qBAA8BjG,CAAAA,QAA9B,CAAuChN,MAAM,CAACC,EAA9C,CAAP,CAAA;EACD,OAxBI;EA0BLwT,MAAAA,eAAe,EAAE,MAAA;EAAA,QAAA,IAAA,sBAAA,CAAA;;EAAA,QAAA,OAAA,CAAA,sBAAA,GAAM/W,QAAQ,CAACwJ,QAAT,EAAA,CAAoB+M,QAA1B,KAAA,IAAA,GAAA,KAAA,CAAA,GAAM,sBAA8BS,CAAAA,OAA9B,CAAsC1T,MAAM,CAACC,EAA7C,CAAN,CAAA;EAAA,OA1BZ;EA4BL0T,MAAAA,wBAAwB,EAAE,MAAM;EAC9B,QAAA,MAAMC,QAAQ,GAAG5T,MAAM,CAACsT,WAAP,EAAjB,CAAA;EAEA,QAAA,OAAO,MAAM;EACX,UAAI,IAAA,CAACM,QAAL,EAAe,OAAA;EACf5T,UAAAA,MAAM,CAACoT,cAAP,EAAA,CAAA;EACD,SAHD,CAAA;EAID,OAnCI;EAoCLS,MAAAA,0BAA0B,EAAE,MAAM;EAChC,QAAM3E,MAAAA,QAAQ,GAAGxS,QAAQ,CAACgH,eAAT,EAA2BwH,CAAAA,QAA3B,CAAoC,CAApC,CAAjB,CAAA;EAEA,QAAM8D,MAAAA,KAAK,GAAGE,QAAH,IAAGA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,QAAQ,CAAE9O,QAAV,CAAmBJ,MAAM,CAACC,EAA1B,CAAd,CAAA;;EAEA,QAAA,IAAI,OAAO+O,KAAP,KAAiB,QAArB,EAA+B;EAC7B,UAAOiD,OAAAA,cAAc,CAAC9K,GAAtB,CAAA;EACD,SAAA;;EAED,QAAIzG,IAAAA,MAAM,CAACoT,SAAP,CAAiBzT,QAAjB,CAA0B0T,IAA1B,CAA+B/E,KAA/B,CAA0C,KAAA,eAA9C,EAA+D;EAC7D,UAAOiD,OAAAA,cAAc,CAACC,MAAtB,CAAA;EACD,SAAA;;EAED,QAAOD,OAAAA,cAAc,CAACM,KAAtB,CAAA;EACD,OAlDI;EAmDLyB,MAAAA,sBAAsB,EAAE,MAAM;EAAA,QAAA,IAAA,KAAA,CAAA;;EAC5B,QAAA,MAAMC,kBAAkB,GAAGvX,QAAQ,CAACkD,OAAT,CAAiBqS,cAA5C,CAAA;;EAEA,QAAI,IAAA,CAACjS,MAAL,EAAa;EACX,UAAM,MAAA,IAAIwB,KAAJ,EAAN,CAAA;EACD,SAAA;;EAED,QAAA,OAAO3E,UAAU,CAACmD,MAAM,CAACgT,aAAR,CAAV,GACHhT,MAAM,CAACgT,aADJ,GAEHhT,MAAM,CAACgT,aAAP,KAAyB,MAAzB,GACAhT,MAAM,CAAC6T,0BAAP,EADA,GAECI,CAAAA,KAAAA,GAAAA,kBAFD,IAECA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,kBAAD,CACEjU,MAAM,CAACgT,aADT,CAFA,oBAKCf,cAAc,CACbjS,MAAM,CAACgT,aADM,CAPnB,CAAA;EAUD,OAAA;EApEI,KAAP,CAAA;EAsED,GAnGmC;EAqGpCtT,EAAAA,cAAc,EACZhD,QADc,IAEkB;EAChC,IAAO,OAAA;EACL2W,MAAAA,WAAW,EAAEhX,OAAO,IAAIK,QAAQ,CAACkD,OAAT,CAAiBsT,gBAArB,IAAA,IAAA,GAAA,KAAA,CAAA,GAAIxW,QAAQ,CAACkD,OAAT,CAAiBsT,gBAAjB,CAAoC7W,OAApC,CADnB;EAGL6X,MAAAA,aAAa,EAAEhL,YAAY,IAAI;EAAA,QAAA,IAAA,qBAAA,EAAA,sBAAA,CAAA;;EAC7BxM,QAAAA,QAAQ,CAAC2W,WAAT,CACEnK,YAAY,GAAG,EAAH,GAAQxM,CAAAA,qBAAAA,GAAAA,CAAAA,sBAAAA,GAAAA,QAAQ,CAACyM,YAAjB,KAAA,IAAA,GAAA,KAAA,CAAA,GAAQ,sBAAuB8J,CAAAA,QAA/B,oCAA2C,EADzD,CAAA,CAAA;EAGD,OAPI;EASLkB,MAAAA,qBAAqB,EAAE,MAAMzX,QAAQ,CAAC0X,iBAAT,EATxB;EAULpI,MAAAA,kBAAkB,EAAE,MAAM;EACxB,QACE,IAAA,CAACtP,QAAQ,CAAC2X,mBAAV,IACA3X,QAAQ,CAACkD,OAAT,CAAiBoM,kBAFnB,EAGE;EACAtP,UAAAA,QAAQ,CAAC2X,mBAAT,GACE3X,QAAQ,CAACkD,OAAT,CAAiBoM,kBAAjB,CAAoCtP,QAApC,CADF,CAAA;EAED,SAAA;;EAED,QAAIA,IAAAA,QAAQ,CAACkD,OAAT,CAAiB0U,cAAjB,IAAmC,CAAC5X,QAAQ,CAAC2X,mBAAjD,EAAsE;EACpE,UAAO3X,OAAAA,QAAQ,CAACyX,qBAAT,EAAP,CAAA;EACD,SAAA;;EAED,QAAOzX,OAAAA,QAAQ,CAAC2X,mBAAT,EAAP,CAAA;EACD,OAAA;EAxBI,KAAP,CAAA;EA0BD,GAlImC;EAoIpCnR,EAAAA,SAAS,EAAE,CACTF,GADS,EAETtG,QAFS,KAGO;EAChB,IAAO,OAAA;EACL8W,MAAAA,YAAY,EAAE,MAAM,CAAC,CAACxQ,GAAG,CAACuR,gBADrB;EAELC,MAAAA,mBAAmB,EAAE,EAAA;EAFhB,KAAP,CAAA;EAID,GA5ImC;EA8IpCtQ,EAAAA,UAAU,EAAE,CACV/D,IADU,EAEVH,MAFU,EAGVgD,GAHU,EAIVtG,QAJU,KAKkB;EAC5B,IAAO,OAAA;EACL8W,MAAAA,YAAY,EAAE,MACZxT,MAAM,CAACwT,YAAP,EAAyBxT,IAAAA,MAAM,CAACC,EAAP,KAAc+C,GAAG,CAACuR,gBAFxC;EAGLE,MAAAA,gBAAgB,EAAE,MAAM,CAACtU,IAAI,CAACqT,YAAL,EAAD,IAAwBxT,MAAM,CAACwT,YAAP,EAH3C;EAILkB,MAAAA,eAAe,EAAE,MAAA;EAAA,QAAA,IAAA,YAAA,CAAA;;EAAA,QAAA,OACf,CAACvU,IAAI,CAACqT,YAAL,EAAD,IACA,CAACrT,IAAI,CAACsU,gBAAL,EADD,IAEA,iBAAAzR,GAAG,CAACK,OAAJ,KAAa3F,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,YAAAA,CAAAA,MAAb,IAAsB,CAHP,CAAA;EAAA,OAJZ;EAQLiX,MAAAA,oBAAoB,EAAE,MAAM;EAAA,QAAA,IAAA,qBAAA,CAAA;;EAC1B,QAAMC,MAAAA,QAAQ,4BAAG5U,MAAM,CAAC6U,cAAV,KAA4B7U,IAAAA,GAAAA,qBAAAA,GAAAA,MAAM,CAACG,IAAjD,CAAA;EAEA,QAAA,OAAOyU,QAAQ,GACXlY,QAAQ,CAAC8H,OAAT,CAAiBoQ,QAAjB,EAA2B;EACzBlY,UAAAA,QADyB;EAEzBsD,UAAAA,MAFyB;EAGzBgD,UAAAA,GAHyB;EAIzB7C,UAAAA,IAJyB;EAKzBC,UAAAA,QAAQ,EAAED,IAAI,CAACC,QAAAA;EALU,SAA3B,CADW,GAQX,IARJ,CAAA;EASD,OAAA;EApBI,KAAP,CAAA;EAsBD,GAAA;EA1KmC,EAA/B;EA6KA,SAAS2B,YAAT,CACLC,WADK,EAELiR,QAFK,EAGLE,iBAHK,EAIL;EACA,EAAI,IAAA,EAACF,QAAD,IAACA,IAAAA,IAAAA,QAAQ,CAAEvV,MAAX,CAAA,IAAqB,CAACyV,iBAA1B,EAA6C;EAC3C,IAAA,OAAOnR,WAAP,CAAA;EACD,GAAA;;EAED,EAAA,MAAM8S,kBAAkB,GAAG9S,WAAW,CAACsO,MAAZ,CACzByE,GAAG,IAAI,CAAC9B,QAAQ,CAACjG,QAAT,CAAkB+H,GAAG,CAAC9U,EAAtB,CADiB,CAA3B,CAAA;;EAIA,EAAIkT,IAAAA,iBAAiB,KAAK,QAA1B,EAAoC;EAClC,IAAA,OAAO2B,kBAAP,CAAA;EACD,GAAA;;EAED,EAAME,MAAAA,eAAe,GAAG/B,QAAQ,CAC7B7Q,GADqB,CACjB6S,CAAC,IAAIjT,WAAW,CAACgO,IAAZ,CAAiB+E,GAAG,IAAIA,GAAG,CAAC9U,EAAJ,KAAWgV,CAAnC,CADY,CAErB3E,CAAAA,MAFqB,CAEd/E,OAFc,CAAxB,CAAA;EAIA,EAAA,OAAO,CAAC,GAAGyJ,eAAJ,EAAqB,GAAGF,kBAAxB,CAAP,CAAA;EACD;;EC7QD;AAEO,QAAMI,QAAsB,GAAG;EACpC1P,EAAAA,eAAe,EAAGC,KAAD,IAAkC;EACjD,IAAO,OAAA;EACL0P,MAAAA,WAAW,EAAE,EADR;EAEL,MAAG1P,GAAAA,KAAAA;EAFE,KAAP,CAAA;EAID,GANmC;EAQpCG,EAAAA,iBAAiB,EACflJ,QADiB,IAEa;EAC9B,IAAO,OAAA;EACL0Y,MAAAA,mBAAmB,EAAE5Y,gBAAgB,CAAC,aAAD,EAAgBE,QAAhB,CAAA;EADhC,KAAP,CAAA;EAGD,GAdmC;EAgBpCgD,EAAAA,cAAc,EACZhD,QADc,IAEqB;EACnC,IAAO,OAAA;EACL2Y,MAAAA,cAAc,EAAEhZ,OAAO,IACrBK,QAAQ,CAACkD,OAAT,CAAiBwV,mBADI,IAAA,IAAA,GAAA,KAAA,CAAA,GACrB1Y,QAAQ,CAACkD,OAAT,CAAiBwV,mBAAjB,CAAuC/Y,OAAvC,CAFG;EAGLiZ,MAAAA,gBAAgB,EAAEpM,YAAY,IAAI;EAAA,QAAA,IAAA,qBAAA,CAAA;;EAChCxM,QAAAA,QAAQ,CAAC2Y,cAAT,CACEnM,YAAY,GAAG,EAAH,GAAQxM,CAAAA,qBAAAA,GAAAA,QAAQ,CAACyM,YAAT,CAAsBgM,WAA9B,oCAA6C,EAD3D,CAAA,CAAA;EAGD,OAPI;EAQLrT,MAAAA,kBAAkB,EAAEnE,IAAI,CACtB,MAAM,CACJjB,QAAQ,CAACwJ,QAAT,EAAoBiP,CAAAA,WADhB,EAEJzY,QAAQ,CAACwJ,QAAT,EAAA,CAAoB+M,QAFhB,EAGJvW,QAAQ,CAACkD,OAAT,CAAiBuT,iBAHb,CADgB,EAMtB,CAACgC,WAAD,EAAclC,QAAd,EAAwBE,iBAAxB,KAA8CpS,OAAO,IAAI;EACvD;EACA;EACA,QAAA,IAAIwU,cAAmC,GAAG,EAA1C,CAHuD;;EAMvD,QAAA,IAAI,EAACJ,WAAD,IAAA,IAAA,IAACA,WAAW,CAAEzX,MAAd,CAAJ,EAA0B;EACxB6X,UAAAA,cAAc,GAAGxU,OAAjB,CAAA;EACD,SAFD,MAEO;EACL,UAAA,MAAMyU,eAAe,GAAG,CAAC,GAAGL,WAAJ,CAAxB,CADK;;EAIL,UAAA,MAAMM,WAAW,GAAG,CAAC,GAAG1U,OAAJ,CAApB,CAJK;EAQL;;EACA,UAAA,OAAO0U,WAAW,CAAC/X,MAAZ,IAAsB8X,eAAe,CAAC9X,MAA7C,EAAqD;EACnD,YAAA,MAAMgY,cAAc,GAAGF,eAAe,CAACG,KAAhB,EAAvB,CAAA;EACA,YAAA,MAAMC,UAAU,GAAGH,WAAW,CAACjP,SAAZ,CACjB1J,CAAC,IAAIA,CAAC,CAACmD,EAAF,KAASyV,cADG,CAAnB,CAAA;;EAGA,YAAA,IAAIE,UAAU,GAAG,CAAC,CAAlB,EAAqB;EACnBL,cAAAA,cAAc,CAAC/X,IAAf,CAAoBiY,WAAW,CAACI,MAAZ,CAAmBD,UAAnB,EAA+B,CAA/B,CAAA,CAAkC,CAAlC,CAApB,CAAA,CAAA;EACD,aAAA;EACF,WAjBI;;;EAoBLL,UAAAA,cAAc,GAAG,CAAC,GAAGA,cAAJ,EAAoB,GAAGE,WAAvB,CAAjB,CAAA;EACD,SAAA;;EAED,QAAA,OAAO1T,YAAY,CAACwT,cAAD,EAAiBtC,QAAjB,EAA2BE,iBAA3B,CAAnB,CAAA;EACD,OAtCqB,EAuCtB;EACE1W,QAAAA,GAAG,EAA4C,mBADjD;;EAAA,OAvCsB,CAAA;EARnB,KAAP,CAAA;EAqDD,GAAA;EAxEmC;;ECoBtC;EAEA,MAAMqZ,gBAAgB,GAAG,CAAzB,CAAA;EACA,MAAMC,eAAe,GAAG,EAAxB,CAAA;;EAEA,MAAMC,yBAAyB,GAAG,OAAwB;EACxDC,EAAAA,SAAS,EAAEH,gBAD6C;EAExDI,EAAAA,QAAQ,EAAEH,eAAAA;EAF8C,CAAxB,CAAlC,CAAA;;AAKO,QAAMI,UAAwB,GAAG;EACtC3Q,EAAAA,eAAe,EAAGC,KAAD,IAAiC;EAChD,IAAO,OAAA,EACL,GAAGA,KADE;EAEL2Q,MAAAA,UAAU,EAAE,EACV,GAAGJ,yBAAyB,EADlB;EAEV,QAAA,IAAGvQ,KAAH,IAAA,IAAA,GAAA,KAAA,CAAA,GAAGA,KAAK,CAAE2Q,UAAV,CAAA;EAFU,OAAA;EAFP,KAAP,CAAA;EAOD,GATqC;EAWtCxQ,EAAAA,iBAAiB,EACflJ,QADiB,IAEY;EAC7B,IAAO,OAAA;EACL2Z,MAAAA,kBAAkB,EAAE7Z,gBAAgB,CAAC,YAAD,EAAeE,QAAf,CAAA;EAD/B,KAAP,CAAA;EAGD,GAjBqC;EAmBtCgD,EAAAA,cAAc,EACZhD,QADc,IAEoB;EAClC,IAAI8N,IAAAA,UAAU,GAAG,KAAjB,CAAA;EACA,IAAIC,IAAAA,MAAM,GAAG,KAAb,CAAA;EAEA,IAAO,OAAA;EACL6L,MAAAA,mBAAmB,EAAE,MAAM;EAAA,QAAA,IAAA,IAAA,EAAA,qBAAA,CAAA;;EACzB,QAAI,IAAA,CAAC9L,UAAL,EAAiB;EACf9N,UAAAA,QAAQ,CAACiO,MAAT,CAAgB,MAAM;EACpBH,YAAAA,UAAU,GAAG,IAAb,CAAA;EACD,WAFD,CAAA,CAAA;;EAGA,UAAA,OAAA;EACD,SAAA;;EAED,QAAA,IAAA,CAAA,IAAA,GAAA,CAAA,qBAAA,GACE9N,QAAQ,CAACkD,OAAT,CAAiBgL,YADnB,KAAA,IAAA,GAAA,qBAAA,GAEElO,QAAQ,CAACkD,OAAT,CAAiB2W,kBAFnB,mBAGE,CAAC7Z,QAAQ,CAACkD,OAAT,CAAiB4W,gBAHpB,EAIE;EACA,UAAA,IAAI/L,MAAJ,EAAY,OAAA;EACZA,UAAAA,MAAM,GAAG,IAAT,CAAA;;EACA/N,UAAAA,QAAQ,CAACiO,MAAT,CAAgB,MAAM;EACpBjO,YAAAA,QAAQ,CAAC+Z,cAAT,EAAA,CAAA;EACAhM,YAAAA,MAAM,GAAG,KAAT,CAAA;EACD,WAHD,CAAA,CAAA;EAID,SAAA;EACF,OArBI;EAsBLiM,MAAAA,aAAa,EAAEra,OAAO,IAAI;EACxB,QAAMsa,MAAAA,WAAqC,GAAG/Z,GAAG,IAAI;EACnD,UAAA,IAAIga,QAAQ,GAAGxa,gBAAgB,CAACC,OAAD,EAAUO,GAAV,CAA/B,CAAA;EAEA,UAAA,OAAOga,QAAP,CAAA;EACD,SAJD,CAAA;;EAMA,QAAA,OAAOla,QAAQ,CAACkD,OAAT,CAAiByW,kBAAxB,IAAA,IAAA,GAAA,KAAA,CAAA,GAAO3Z,QAAQ,CAACkD,OAAT,CAAiByW,kBAAjB,CAAsCM,WAAtC,CAAP,CAAA;EACD,OA9BI;EA+BLE,MAAAA,eAAe,EAAE3N,YAAY,IAAI;EAAA,QAAA,IAAA,qBAAA,CAAA;;EAC/BxM,QAAAA,QAAQ,CAACga,aAAT,CACExN,YAAY,GACR8M,yBAAyB,EADjB,GAERtZ,CAAAA,qBAAAA,GAAAA,QAAQ,CAACyM,YAAT,CAAsBiN,UAFd,KAAA,IAAA,GAAA,qBAAA,GAE4BJ,yBAAyB,EAHnE,CAAA,CAAA;EAKD,OArCI;EAsCLc,MAAAA,YAAY,EAAEza,OAAO,IAAI;EACvBK,QAAAA,QAAQ,CAACga,aAAT,CAAuB9Z,GAAG,IAAI;EAC5B,UAAIqZ,IAAAA,SAAS,GAAG7Z,gBAAgB,CAACC,OAAD,EAAUO,GAAG,CAACqZ,SAAd,CAAhC,CAAA;EAEA,UAAA,MAAMc,YAAY,GAChB,OAAOna,GAAG,CAACoa,SAAX,KAAyB,WAAzB,GACIpa,GAAG,CAACoa,SAAJ,GAAgB,CADpB,GAEIlS,MAAM,CAACC,gBAHb,CAAA;EAKAkR,UAAAA,SAAS,GAAGpX,IAAI,CAACW,GAAL,CAASX,IAAI,CAACU,GAAL,CAAS,CAAT,EAAY0W,SAAZ,CAAT,EAAiCc,YAAjC,CAAZ,CAAA;EAEA,UAAO,OAAA,EACL,GAAGna,GADE;EAELqZ,YAAAA,SAAAA;EAFK,WAAP,CAAA;EAID,SAdD,CAAA,CAAA;EAeD,OAtDI;EAuDLQ,MAAAA,cAAc,EAAEvN,YAAY,IAAI;EAAA,QAAA,IAAA,sBAAA,EAAA,sBAAA,EAAA,sBAAA,CAAA;;EAC9BxM,QAAAA,QAAQ,CAACoa,YAAT,CACE5N,YAAY,GACR4M,gBADQ,GAERpZ,CAAAA,sBAAAA,GAAAA,CAAAA,sBAAAA,GAAAA,QAAQ,CAACyM,YAFD,+CAER,sBAAuBiN,CAAAA,UAFf,qBAER,sBAAmCH,CAAAA,SAF3B,qCAEwCH,gBAHtD,CAAA,CAAA;EAKD,OA7DI;EA8DLmB,MAAAA,aAAa,EAAE/N,YAAY,IAAI;EAAA,QAAA,IAAA,sBAAA,EAAA,sBAAA,EAAA,sBAAA,CAAA;;EAC7BxM,QAAAA,QAAQ,CAACwa,WAAT,CACEhO,YAAY,GACR6M,eADQ,GAERrZ,CAAAA,sBAAAA,GAAAA,CAAAA,sBAAAA,GAAAA,QAAQ,CAACyM,YAFD,+CAER,sBAAuBiN,CAAAA,UAFf,qBAER,sBAAmCF,CAAAA,QAF3B,qCAEuCH,eAHrD,CAAA,CAAA;EAKD,OApEI;EAqELmB,MAAAA,WAAW,EAAE7a,OAAO,IAAI;EACtBK,QAAAA,QAAQ,CAACga,aAAT,CAAuB9Z,GAAG,IAAI;EAC5B,UAAA,MAAMsZ,QAAQ,GAAGrX,IAAI,CAACU,GAAL,CAAS,CAAT,EAAYnD,gBAAgB,CAACC,OAAD,EAAUO,GAAG,CAACsZ,QAAd,CAA5B,CAAjB,CAAA;EACA,UAAMiB,MAAAA,WAAW,GAAGva,GAAG,CAACsZ,QAAJ,GAAetZ,GAAG,CAACqZ,SAAvC,CAAA;EACA,UAAMA,MAAAA,SAAS,GAAGpX,IAAI,CAACuY,KAAL,CAAWD,WAAW,GAAGjB,QAAzB,CAAlB,CAAA;EAEA,UAAO,OAAA,EACL,GAAGtZ,GADE;EAELqZ,YAAAA,SAFK;EAGLC,YAAAA,QAAAA;EAHK,WAAP,CAAA;EAKD,SAVD,CAAA,CAAA;EAWD,OAjFI;EAkFLmB,MAAAA,YAAY,EAAEhb,OAAO,IACnBK,QAAQ,CAACga,aAAT,CAAuB9Z,GAAG,IAAI;EAAA,QAAA,IAAA,cAAA,CAAA;;EAC5B,QAAA,IAAI0a,YAAY,GAAGlb,gBAAgB,CAACC,OAAD,EAAA,CAAA,cAAA,GAAUO,GAAG,CAACoa,SAAd,KAAA,IAAA,GAAA,cAAA,GAA2B,CAAC,CAA5B,CAAnC,CAAA;;EAEA,QAAA,IAAI,OAAOM,YAAP,KAAwB,QAA5B,EAAsC;EACpCA,UAAAA,YAAY,GAAGzY,IAAI,CAACU,GAAL,CAAS,CAAC,CAAV,EAAa+X,YAAb,CAAf,CAAA;EACD,SAAA;;EAED,QAAO,OAAA,EACL,GAAG1a,GADE;EAELoa,UAAAA,SAAS,EAAEM,YAAAA;EAFN,SAAP,CAAA;EAID,OAXD,CAnFG;EAgGLC,MAAAA,cAAc,EAAE5Z,IAAI,CAClB,MAAM,CACJjB,QAAQ,CAACwJ,QAAT,EAAoBkQ,CAAAA,UAApB,CAA+BF,QAD3B,EAEJxZ,QAAQ,CAACwJ,QAAT,EAAoBkQ,CAAAA,UAApB,CAA+BY,SAF3B,CADY,EAKlB,CAACd,QAAD,EAAWc,SAAX,KAAyB;EACvB,QAAIQ,IAAAA,WAAqB,GAAG,EAA5B,CAAA;;EACA,QAAA,IAAIR,SAAS,IAAIA,SAAS,GAAG,CAA7B,EAAgC;EAC9BQ,UAAAA,WAAW,GAAG,CAAC,GAAG,IAAIrI,KAAJ,CAAU6H,SAAV,CAAJ,CAA0BS,CAAAA,IAA1B,CAA+B,IAA/B,CAAA,CAAqCrV,GAArC,CAAyC,CAACwE,CAAD,EAAInD,CAAJ,KAAUA,CAAnD,CAAd,CAAA;EACD,SAAA;;EACD,QAAA,OAAO+T,WAAP,CAAA;EACD,OAXiB,EAYlB;EACE/a,QAAAA,GAAG,EAA4C,gBADjD;EAEEyB,QAAAA,KAAK,EAAE,MAAA;EAAA,UAAA,IAAA,qBAAA,CAAA;;EAAA,UAAMxB,OAAAA,CAAAA,qBAAAA,GAAAA,QAAQ,CAACkD,OAAT,CAAiBgB,QAAvB,oCAAmClE,QAAQ,CAACkD,OAAT,CAAiB8X,UAApD,CAAA;EAAA,SAAA;EAFT,OAZkB,CAhGf;EAkHLC,MAAAA,kBAAkB,EAAE,MAAMjb,QAAQ,CAACwJ,QAAT,EAAA,CAAoBkQ,UAApB,CAA+BH,SAA/B,GAA2C,CAlHhE;EAoHL2B,MAAAA,cAAc,EAAE,MAAM;EACpB,QAAM,MAAA;EAAE3B,UAAAA,SAAAA;EAAF,SAAA,GAAgBvZ,QAAQ,CAACwJ,QAAT,EAAA,CAAoBkQ,UAA1C,CAAA;EAEA,QAAA,MAAMY,SAAS,GAAGta,QAAQ,CAACmb,YAAT,EAAlB,CAAA;;EAEA,QAAA,IAAIb,SAAS,KAAK,CAAC,CAAnB,EAAsB;EACpB,UAAA,OAAO,IAAP,CAAA;EACD,SAAA;;EAED,QAAIA,IAAAA,SAAS,KAAK,CAAlB,EAAqB;EACnB,UAAA,OAAO,KAAP,CAAA;EACD,SAAA;;EAED,QAAA,OAAOf,SAAS,GAAGe,SAAS,GAAG,CAA/B,CAAA;EACD,OAlII;EAoILc,MAAAA,YAAY,EAAE,MAAM;EAClB,QAAOpb,OAAAA,QAAQ,CAACoa,YAAT,CAAsBla,GAAG,IAAIA,GAAG,GAAG,CAAnC,CAAP,CAAA;EACD,OAtII;EAwILmb,MAAAA,QAAQ,EAAE,MAAM;EACd,QAAA,OAAOrb,QAAQ,CAACoa,YAAT,CAAsBla,GAAG,IAAI;EAClC,UAAOA,OAAAA,GAAG,GAAG,CAAb,CAAA;EACD,SAFM,CAAP,CAAA;EAGD,OA5II;EA8ILob,MAAAA,wBAAwB,EAAE,MAAMtb,QAAQ,CAACuP,mBAAT,EA9I3B;EA+ILpI,MAAAA,qBAAqB,EAAE,MAAM;EAC3B,QACE,IAAA,CAACnH,QAAQ,CAACub,sBAAV,IACAvb,QAAQ,CAACkD,OAAT,CAAiBiE,qBAFnB,EAGE;EACAnH,UAAAA,QAAQ,CAACub,sBAAT,GACEvb,QAAQ,CAACkD,OAAT,CAAiBiE,qBAAjB,CAAuCnH,QAAvC,CADF,CAAA;EAED,SAAA;;EAED,QACEA,IAAAA,QAAQ,CAACkD,OAAT,CAAiB4W,gBAAjB,IACA,CAAC9Z,QAAQ,CAACub,sBAFZ,EAGE;EACA,UAAOvb,OAAAA,QAAQ,CAACsb,wBAAT,EAAP,CAAA;EACD,SAAA;;EAED,QAAOtb,OAAAA,QAAQ,CAACub,sBAAT,EAAP,CAAA;EACD,OAhKI;EAkKLJ,MAAAA,YAAY,EAAE,MAAM;EAClB,QAAM,MAAA;EAAEb,UAAAA,SAAAA;EAAF,SAAA,GAAgBta,QAAQ,CAACwJ,QAAT,EAAA,CAAoBkQ,UAA1C,CAAA;;EAEA,QAAA,IAAI,OAAOY,SAAP,KAAqB,WAAzB,EAAsC;EACpC,UAAA,OAAOA,SAAP,CAAA;EACD,SAAA;;EAED,QAAA,OAAOnY,IAAI,CAACqZ,IAAL,CACLxb,QAAQ,CAACsb,wBAAT,EAAoCG,CAAAA,IAApC,CAAyCza,MAAzC,GACEhB,QAAQ,CAACwJ,QAAT,GAAoBkQ,UAApB,CAA+BF,QAF5B,CAAP,CAAA;EAID,OAAA;EA7KI,KAAP,CAAA;EA+KD,GAAA;EAxMqC;;ECTxC;EAEA,MAAMkC,sBAAsB,GAAG,OAA2B;EACxDC,EAAAA,IAAI,EAAE,EADkD;EAExDC,EAAAA,KAAK,EAAE,EAAA;EAFiD,CAA3B,CAA/B,CAAA;;AAKO,QAAMC,OAAqB,GAAG;EACnC/S,EAAAA,eAAe,EAAGC,KAAD,IAAoC;EACnD,IAAO,OAAA;EACL+S,MAAAA,aAAa,EAAEJ,sBAAsB,EADhC;EAEL,MAAG3S,GAAAA,KAAAA;EAFE,KAAP,CAAA;EAID,GANkC;EAQnCG,EAAAA,iBAAiB,EACflJ,QADiB,IAEe;EAChC,IAAO,OAAA;EACL+b,MAAAA,qBAAqB,EAAEjc,gBAAgB,CAAC,eAAD,EAAkBE,QAAlB,CAAA;EADlC,KAAP,CAAA;EAGD,GAdkC;EAgBnCsE,EAAAA,YAAY,EAAE,CACZhB,MADY,EAEZtD,QAFY,KAGY;EACxB,IAAO,OAAA;EACLgc,MAAAA,GAAG,EAAEtS,QAAQ,IAAI;EACf,QAAA,MAAMuS,SAAS,GAAG3Y,MAAM,CACrB6B,cADe,GAEfO,GAFe,CAEXtF,CAAC,IAAIA,CAAC,CAACmD,EAFI,EAGfqQ,MAHe,CAGR/E,OAHQ,CAAlB,CAAA;EAKA7O,QAAAA,QAAQ,CAACkc,gBAAT,CAA0Bhc,GAAG,IAAI;EAAA,UAAA,IAAA,UAAA,EAAA,WAAA,CAAA;;EAC/B,UAAIwJ,IAAAA,QAAQ,KAAK,OAAjB,EAA0B;EAAA,YAAA,IAAA,SAAA,EAAA,UAAA,CAAA;;EACxB,YAAO,OAAA;EACLiS,cAAAA,IAAI,EAAE,CAAA,CAAA,SAAA,GAACzb,GAAD,IAAA,IAAA,GAAA,KAAA,CAAA,GAACA,GAAG,CAAEyb,IAAN,KAAc,IAAA,GAAA,SAAA,GAAA,EAAd,EAAkB/H,MAAlB,CAAyBxT,CAAC,IAAI,EAAC6b,SAAD,IAACA,IAAAA,IAAAA,SAAS,CAAE3L,QAAX,CAAoBlQ,CAApB,CAAD,CAA9B,CADD;EAELwb,cAAAA,KAAK,EAAE,CACL,GAAG,CAAC1b,CAAAA,UAAAA,GAAAA,GAAD,IAACA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,GAAG,CAAE0b,KAAN,KAAe,IAAA,GAAA,UAAA,GAAA,EAAf,EAAmBhI,MAAnB,CAA0BxT,CAAC,IAAI,EAAC6b,SAAD,IAACA,IAAAA,IAAAA,SAAS,CAAE3L,QAAX,CAAoBlQ,CAApB,CAAD,CAA/B,CADE,EAEL,GAAG6b,SAFE,CAAA;EAFF,aAAP,CAAA;EAOD,WAAA;;EAED,UAAIvS,IAAAA,QAAQ,KAAK,MAAjB,EAAyB;EAAA,YAAA,IAAA,UAAA,EAAA,WAAA,CAAA;;EACvB,YAAO,OAAA;EACLiS,cAAAA,IAAI,EAAE,CACJ,GAAG,CAACzb,CAAAA,UAAAA,GAAAA,GAAD,IAACA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,GAAG,CAAEyb,IAAN,KAAc,IAAA,GAAA,UAAA,GAAA,EAAd,EAAkB/H,MAAlB,CAAyBxT,CAAC,IAAI,EAAC6b,SAAD,IAACA,IAAAA,IAAAA,SAAS,CAAE3L,QAAX,CAAoBlQ,CAApB,CAAD,CAA9B,CADC,EAEJ,GAAG6b,SAFC,CADD;EAKLL,cAAAA,KAAK,EAAE,CAAA,CAAA,WAAA,GAAC1b,GAAD,IAAA,IAAA,GAAA,KAAA,CAAA,GAACA,GAAG,CAAE0b,KAAN,KAAe,IAAA,GAAA,WAAA,GAAA,EAAf,EAAmBhI,MAAnB,CAA0BxT,CAAC,IAAI,EAAC6b,SAAD,IAACA,IAAAA,IAAAA,SAAS,CAAE3L,QAAX,CAAoBlQ,CAApB,CAAD,CAA/B,CAAA;EALF,aAAP,CAAA;EAOD,WAAA;;EAED,UAAO,OAAA;EACLub,YAAAA,IAAI,EAAE,CAAA,CAAA,UAAA,GAACzb,GAAD,IAAA,IAAA,GAAA,KAAA,CAAA,GAACA,GAAG,CAAEyb,IAAN,KAAc,IAAA,GAAA,UAAA,GAAA,EAAd,EAAkB/H,MAAlB,CAAyBxT,CAAC,IAAI,EAAC6b,SAAD,IAACA,IAAAA,IAAAA,SAAS,CAAE3L,QAAX,CAAoBlQ,CAApB,CAAD,CAA9B,CADD;EAELwb,YAAAA,KAAK,EAAE,CAAA,CAAA,WAAA,GAAC1b,GAAD,IAAA,IAAA,GAAA,KAAA,CAAA,GAACA,GAAG,CAAE0b,KAAN,KAAe,IAAA,GAAA,WAAA,GAAA,EAAf,EAAmBhI,MAAnB,CAA0BxT,CAAC,IAAI,EAAC6b,SAAD,IAACA,IAAAA,IAAAA,SAAS,CAAE3L,QAAX,CAAoBlQ,CAApB,CAAD,CAA/B,CAAA;EAFF,WAAP,CAAA;EAID,SAzBD,CAAA,CAAA;EA0BD,OAjCI;EAmCL+b,MAAAA,SAAS,EAAE,MAAM;EACf,QAAA,MAAM7W,WAAW,GAAGhC,MAAM,CAAC6B,cAAP,EAApB,CAAA;EAEA,QAAA,OAAOG,WAAW,CAACzD,IAAZ,CACLzB,CAAC,IAAA;EAAA,UAAA,IAAA,gBAAA,EAAA,qBAAA,CAAA;;EAAA,UAAA,OACC,CAACA,CAAAA,gBAAAA,GAAAA,CAAC,CAACgc,aAAH,+BAAoB,IAApB,MAAA,CAAA,qBAAA,GACCpc,QAAQ,CAACkD,OAAT,CAAiBkZ,aADlB,KAAA,IAAA,GAAA,qBAAA,GACmC,IADnC,CADD,CAAA;EAAA,SADI,CAAP,CAAA;EAKD,OA3CI;EA6CLC,MAAAA,WAAW,EAAE,MAAM;EACjB,QAAA,MAAMC,aAAa,GAAGhZ,MAAM,CAAC6B,cAAP,EAAA,CAAwBO,GAAxB,CAA4BtF,CAAC,IAAIA,CAAC,CAACmD,EAAnC,CAAtB,CAAA;EAEA,QAAM,MAAA;EAAEoY,UAAAA,IAAF;EAAQC,UAAAA,KAAAA;EAAR,SAAA,GAAkB5b,QAAQ,CAACwJ,QAAT,EAAA,CAAoBsS,aAA5C,CAAA;EAEA,QAAA,MAAMS,MAAM,GAAGD,aAAa,CAACza,IAAd,CAAmBzB,CAAC,IAAIub,IAAJ,IAAA,IAAA,GAAA,KAAA,CAAA,GAAIA,IAAI,CAAErL,QAAN,CAAelQ,CAAf,CAAxB,CAAf,CAAA;EACA,QAAA,MAAMoc,OAAO,GAAGF,aAAa,CAACza,IAAd,CAAmBzB,CAAC,IAAIwb,KAAJ,IAAA,IAAA,GAAA,KAAA,CAAA,GAAIA,KAAK,CAAEtL,QAAP,CAAgBlQ,CAAhB,CAAxB,CAAhB,CAAA;EAEA,QAAOmc,OAAAA,MAAM,GAAG,MAAH,GAAYC,OAAO,GAAG,OAAH,GAAa,KAA7C,CAAA;EACD,OAtDI;EAwDLC,MAAAA,cAAc,EAAE,MAAM;EAAA,QAAA,IAAA,qBAAA,EAAA,sBAAA,EAAA,sBAAA,CAAA;;EACpB,QAAA,MAAM/S,QAAQ,GAAGpG,MAAM,CAAC+Y,WAAP,EAAjB,CAAA;EAEA,QAAO3S,OAAAA,QAAQ,sDACX1J,QAAQ,CAACwJ,QAAT,EAAoBsS,CAAAA,aADT,KACX,IAAA,GAAA,KAAA,CAAA,GAAA,CAAA,sBAAA,GAAA,sBAAA,CAAoCpS,QAApC,CADW,qBACX,sBAA+CsN,CAAAA,OAA/C,CAAuD1T,MAAM,CAACC,EAA9D,CADW,KAET,IAAA,GAAA,qBAAA,GAAA,CAAC,CAFQ,GAGX,CAHJ,CAAA;EAID,OAAA;EA/DI,KAAP,CAAA;EAiED,GArFkC;EAuFnCiD,EAAAA,SAAS,EAAE,CACTF,GADS,EAETtG,QAFS,KAGuB;EAChC,IAAO,OAAA;EACL0c,MAAAA,qBAAqB,EAAEzb,IAAI,CACzB,MAAM,CACJqF,GAAG,CAACqW,mBAAJ,EADI,EAEJ3c,QAAQ,CAACwJ,QAAT,GAAoBsS,aAApB,CAAkCH,IAF9B,EAGJ3b,QAAQ,CAACwJ,QAAT,EAAA,CAAoBsS,aAApB,CAAkCF,KAH9B,CADmB,EAMzB,CAACjU,QAAD,EAAWgU,IAAX,EAAiBC,KAAjB,KAA2B;EACzB,QAAA,MAAMgB,YAAsB,GAAG,CAAC,IAAIjB,IAAJ,IAAA,IAAA,GAAIA,IAAJ,GAAY,EAAZ,CAAD,EAAkB,IAAIC,KAAJ,IAAA,IAAA,GAAIA,KAAJ,GAAa,EAAb,CAAlB,CAA/B,CAAA;EAEA,QAAA,OAAOjU,QAAQ,CAACiM,MAAT,CAAgBxT,CAAC,IAAI,CAACwc,YAAY,CAACtM,QAAb,CAAsBlQ,CAAC,CAAC8F,QAAxB,CAAtB,CAAP,CAAA;EACD,OAVwB,EAWzB;EACEnG,QAAAA,GAAG,EACDmF,aAAA,KAAyB,YAAzB,CAFJ;EAIE1D,QAAAA,KAAK,EAAE,MAAA;EAAA,UAAA,IAAA,qBAAA,CAAA;;EAAA,UAAMxB,OAAAA,CAAAA,qBAAAA,GAAAA,QAAQ,CAACkD,OAAT,CAAiBgB,QAAvB,oCAAmClE,QAAQ,CAACkD,OAAT,CAAiBuE,SAApD,CAAA;EAAA,SAAA;EAJT,OAXyB,CADtB;EAmBLoV,MAAAA,mBAAmB,EAAE5b,IAAI,CACvB,MAAM,CACJqF,GAAG,CAACqW,mBAAJ,EADI,EAEJ3c,QAAQ,CAACwJ,QAAT,EAAA,CAAoBsS,aAApB,CAAkCH,IAF9B,GADiB,EAMvB,CAAChU,QAAD,EAAWgU,IAAX,KAAoB;EAClB,QAAA,MAAMmB,KAAK,GAAG,CAACnB,IAAD,IAAA,IAAA,GAACA,IAAD,GAAS,EAAT,EACXjW,GADW,CACPQ,QAAQ,IAAIyB,QAAQ,CAAC2L,IAAT,CAAc7P,IAAI,IAAIA,IAAI,CAACyC,QAAL,KAAkBA,QAAxC,CADL,EAEX0N,MAFW,CAEJ/E,OAFI,CAAA,CAGXnJ,GAHW,CAGPtF,CAAC,KAAK,EAAE,GAAGA,CAAL;EAAQsJ,UAAAA,QAAQ,EAAE,MAAA;EAAlB,SAAL,CAHM,CAAd,CAAA;EAKA,QAAA,OAAOoT,KAAP,CAAA;EACD,OAbsB,EAcvB;EACE/c,QAAAA,GAAG,EACDmF,aAAA,KAAyB,YAAzB,CAFJ;EAGE1D,QAAAA,KAAK,EAAE,MAAA;EAAA,UAAA,IAAA,sBAAA,CAAA;;EAAA,UAAMxB,OAAAA,CAAAA,sBAAAA,GAAAA,QAAQ,CAACkD,OAAT,CAAiBgB,QAAvB,qCAAmClE,QAAQ,CAACkD,OAAT,CAAiBuE,SAApD,CAAA;EAAA,SAAA;EAHT,OAduB,CAnBpB;EAuCLsV,MAAAA,oBAAoB,EAAE9b,IAAI,CACxB,MAAM,CACJqF,GAAG,CAACqW,mBAAJ,EADI,EAEJ3c,QAAQ,CAACwJ,QAAT,EAAA,CAAoBsS,aAApB,CAAkCF,KAF9B,CADkB,EAKxB,CAACjU,QAAD,EAAWiU,KAAX,KAAqB;EACnB,QAAA,MAAMkB,KAAK,GAAG,CAAClB,KAAD,IAAA,IAAA,GAACA,KAAD,GAAU,EAAV,EACXlW,GADW,CACPQ,QAAQ,IAAIyB,QAAQ,CAAC2L,IAAT,CAAc7P,IAAI,IAAIA,IAAI,CAACyC,QAAL,KAAkBA,QAAxC,CADL,EAEX0N,MAFW,CAEJ/E,OAFI,CAAA,CAGXnJ,GAHW,CAGPtF,CAAC,KAAK,EAAE,GAAGA,CAAL;EAAQsJ,UAAAA,QAAQ,EAAE,MAAA;EAAlB,SAAL,CAHM,CAAd,CAAA;EAKA,QAAA,OAAOoT,KAAP,CAAA;EACD,OAZuB,EAaxB;EACE/c,QAAAA,GAAG,EACDmF,aAAA,KAAyB,YAAzB,CAFJ;EAGE1D,QAAAA,KAAK,EAAE,MAAA;EAAA,UAAA,IAAA,sBAAA,CAAA;;EAAA,UAAMxB,OAAAA,CAAAA,sBAAAA,GAAAA,QAAQ,CAACkD,OAAT,CAAiBgB,QAAvB,qCAAmClE,QAAQ,CAACkD,OAAT,CAAiBuE,SAApD,CAAA;EAAA,SAAA;EAHT,OAbwB,CAAA;EAvCrB,KAAP,CAAA;EA2DD,GAtJkC;EAwJnCzE,EAAAA,cAAc,EACZhD,QADc,IAEuB;EACrC,IAAO,OAAA;EACLkc,MAAAA,gBAAgB,EAAEvc,OAAO,IACvBK,QAAQ,CAACkD,OAAT,CAAiB6Y,qBADM,IAAA,IAAA,GAAA,KAAA,CAAA,GACvB/b,QAAQ,CAACkD,OAAT,CAAiB6Y,qBAAjB,CAAyCpc,OAAzC,CAFG;EAILqd,MAAAA,kBAAkB,EAAExQ,YAAY,IAAA;EAAA,QAAA,IAAA,qBAAA,EAAA,sBAAA,CAAA;;EAAA,QAAA,OAC9BxM,QAAQ,CAACkc,gBAAT,CACE1P,YAAY,GACRkP,sBAAsB,EADd,GAAA,CAAA,qBAAA,GAAA,CAAA,sBAAA,GAER1b,QAAQ,CAACyM,YAFD,KAER,IAAA,GAAA,KAAA,CAAA,GAAA,sBAAA,CAAuBqP,aAFf,KAEgCJ,IAAAA,GAAAA,qBAAAA,GAAAA,sBAAsB,EAHpE,CAD8B,CAAA;EAAA,OAJ3B;EAWLuB,MAAAA,sBAAsB,EAAE,MAAM;EAC5B,QAAM,MAAA;EAAEtB,UAAAA,IAAF;EAAQC,UAAAA,KAAAA;EAAR,SAAA,GAAkB5b,QAAQ,CAACwJ,QAAT,EAAA,CAAoBsS,aAA5C,CAAA;EAEA,QAAA,OAAOjN,OAAO,CAAC,CAAA8M,IAAI,IAAA,IAAJ,YAAAA,IAAI,CAAE3a,MAAN,MAAgB4a,KAAhB,IAAgBA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,KAAK,CAAE5a,MAAvB,CAAD,CAAd,CAAA;EACD,OAfI;EAiBLkc,MAAAA,kBAAkB,EAAEjc,IAAI,CACtB,MAAM,CACJjB,QAAQ,CAACgG,iBAAT,EADI,EAEJhG,QAAQ,CAACwJ,QAAT,EAAA,CAAoBsS,aAApB,CAAkCH,IAF9B,CADgB,EAKtB,CAAC/V,UAAD,EAAa+V,IAAb,KAAsB;EACpB,QAAO,OAAA,CAACA,IAAD,IAAA,IAAA,GAACA,IAAD,GAAS,EAAT,EACJjW,GADI,CACAQ,QAAQ,IAAIN,UAAU,CAAC0N,IAAX,CAAgBhQ,MAAM,IAAIA,MAAM,CAACC,EAAP,KAAc2C,QAAxC,CADZ,CAEJ0N,CAAAA,MAFI,CAEG/E,OAFH,CAAP,CAAA;EAGD,OATqB,EAUtB;EACE9O,QAAAA,GAAG,EAA4C,oBADjD;EAEEyB,QAAAA,KAAK,EAAE,MAAA;EAAA,UAAA,IAAA,sBAAA,CAAA;;EAAA,UACLxB,OAAAA,CAAAA,sBAAAA,GAAAA,QAAQ,CAACkD,OAAT,CAAiBgB,QADZ,qCACwBlE,QAAQ,CAACkD,OAAT,CAAiBiB,YADzC,CAAA;EAAA,SAAA;EAFT,OAVsB,CAjBnB;EAkCLgZ,MAAAA,mBAAmB,EAAElc,IAAI,CACvB,MAAM,CACJjB,QAAQ,CAACgG,iBAAT,EADI,EAEJhG,QAAQ,CAACwJ,QAAT,EAAA,CAAoBsS,aAApB,CAAkCF,KAF9B,CADiB,EAKvB,CAAChW,UAAD,EAAagW,KAAb,KAAuB;EACrB,QAAO,OAAA,CAACA,KAAD,IAAA,IAAA,GAACA,KAAD,GAAU,EAAV,EACJlW,GADI,CACAQ,QAAQ,IAAIN,UAAU,CAAC0N,IAAX,CAAgBhQ,MAAM,IAAIA,MAAM,CAACC,EAAP,KAAc2C,QAAxC,CADZ,CAEJ0N,CAAAA,MAFI,CAEG/E,OAFH,CAAP,CAAA;EAGD,OATsB,EAUvB;EACE9O,QAAAA,GAAG,EAA4C,qBADjD;EAEEyB,QAAAA,KAAK,EAAE,MAAA;EAAA,UAAA,IAAA,sBAAA,CAAA;;EAAA,UACLxB,OAAAA,CAAAA,sBAAAA,GAAAA,QAAQ,CAACkD,OAAT,CAAiBgB,QADZ,qCACwBlE,QAAQ,CAACkD,OAAT,CAAiBiB,YADzC,CAAA;EAAA,SAAA;EAFT,OAVuB,CAlCpB;EAmDLiZ,MAAAA,oBAAoB,EAAEnc,IAAI,CACxB,MAAM,CACJjB,QAAQ,CAACgG,iBAAT,EADI,EAEJhG,QAAQ,CAACwJ,QAAT,GAAoBsS,aAApB,CAAkCH,IAF9B,EAGJ3b,QAAQ,CAACwJ,QAAT,EAAA,CAAoBsS,aAApB,CAAkCF,KAH9B,CADkB,EAMxB,CAAChW,UAAD,EAAa+V,IAAb,EAAmBC,KAAnB,KAA6B;EAC3B,QAAA,MAAMgB,YAAsB,GAAG,CAAC,IAAIjB,IAAJ,IAAA,IAAA,GAAIA,IAAJ,GAAY,EAAZ,CAAD,EAAkB,IAAIC,KAAJ,IAAA,IAAA,GAAIA,KAAJ,GAAa,EAAb,CAAlB,CAA/B,CAAA;EAEA,QAAA,OAAOhW,UAAU,CAACgO,MAAX,CAAkBxT,CAAC,IAAI,CAACwc,YAAY,CAACtM,QAAb,CAAsBlQ,CAAC,CAACmD,EAAxB,CAAxB,CAAP,CAAA;EACD,OAVuB,EAWxB;EACExD,QAAAA,GAAG,EAA4C,sBADjD;EAEEyB,QAAAA,KAAK,EAAE,MAAA;EAAA,UAAA,IAAA,sBAAA,CAAA;;EAAA,UACLxB,OAAAA,CAAAA,sBAAAA,GAAAA,QAAQ,CAACkD,OAAT,CAAiBgB,QADZ,qCACwBlE,QAAQ,CAACkD,OAAT,CAAiBiB,YADzC,CAAA;EAAA,SAAA;EAFT,OAXwB,CAAA;EAnDrB,KAAP,CAAA;EAqED,GAAA;EAhOkC;;ECGrC;AAEO,QAAMkZ,YAA0B,GAAG;EACxCvU,EAAAA,eAAe,EAAGC,KAAD,IAAmC;EAClD,IAAO,OAAA;EACLuU,MAAAA,YAAY,EAAE,EADT;EAEL,MAAGvU,GAAAA,KAAAA;EAFE,KAAP,CAAA;EAID,GANuC;EAQxCG,EAAAA,iBAAiB,EACflJ,QADiB,IAEkB;EACnC,IAAO,OAAA;EACLud,MAAAA,oBAAoB,EAAEzd,gBAAgB,CAAC,cAAD,EAAiBE,QAAjB,CADjC;EAELwd,MAAAA,kBAAkB,EAAE,IAFf;EAGLC,MAAAA,uBAAuB,EAAE,IAHpB;EAILC,MAAAA,qBAAqB,EAAE,IAJlB;EAML;EACA;;EAPK,KAAP,CAAA;EASD,GApBuC;EAsBxC1a,EAAAA,cAAc,EACZhD,QADc,IAEsB;EACpC,IAAO,OAAA;EACL2d,MAAAA,eAAe,EAAEhe,OAAO,IACtBK,QAAQ,CAACkD,OAAT,CAAiBqa,oBADK,IAAA,IAAA,GAAA,KAAA,CAAA,GACtBvd,QAAQ,CAACkD,OAAT,CAAiBqa,oBAAjB,CAAwC5d,OAAxC,CAFG;EAGLie,MAAAA,iBAAiB,EAAEpR,YAAY,IAAA;EAAA,QAAA,IAAA,qBAAA,CAAA;;EAAA,QAAA,OAC7BxM,QAAQ,CAAC2d,eAAT,CACEnR,YAAY,GAAG,EAAH,GAAQxM,CAAAA,qBAAAA,GAAAA,QAAQ,CAACyM,YAAT,CAAsB6Q,YAA9B,KAAA,IAAA,GAAA,qBAAA,GAA8C,EAD5D,CAD6B,CAAA;EAAA,OAH1B;EAOLO,MAAAA,qBAAqB,EAAEvL,KAAK,IAAI;EAC9BtS,QAAAA,QAAQ,CAAC2d,eAAT,CAAyBzd,GAAG,IAAI;EAC9BoS,UAAAA,KAAK,GACH,OAAOA,KAAP,KAAiB,WAAjB,GACIA,KADJ,GAEI,CAACtS,QAAQ,CAAC8d,oBAAT,EAHP,CAAA;EAKA,UAAMR,MAAAA,YAAY,GAAG,EAAE,GAAGpd,GAAAA;EAAL,WAArB,CAAA;EAEA,UAAM6d,MAAAA,kBAAkB,GAAG/d,QAAQ,CAACyX,qBAAT,EAAiCjJ,CAAAA,QAA5D,CAR8B;EAW9B;;EACA,UAAA,IAAI8D,KAAJ,EAAW;EACTyL,YAAAA,kBAAkB,CAACnd,OAAnB,CAA2B0F,GAAG,IAAI;EAChCgX,cAAAA,YAAY,CAAChX,GAAG,CAAC/C,EAAL,CAAZ,GAAuB,IAAvB,CAAA;EACD,aAFD,CAAA,CAAA;EAGD,WAJD,MAIO;EACLwa,YAAAA,kBAAkB,CAACnd,OAAnB,CAA2B0F,GAAG,IAAI;EAChC,cAAA,OAAOgX,YAAY,CAAChX,GAAG,CAAC/C,EAAL,CAAnB,CAAA;EACD,aAFD,CAAA,CAAA;EAGD,WAAA;;EAED,UAAA,OAAO+Z,YAAP,CAAA;EACD,SAvBD,CAAA,CAAA;EAwBD,OAhCI;EAiCLU,MAAAA,yBAAyB,EAAE1L,KAAK,IAC9BtS,QAAQ,CAAC2d,eAAT,CAAyBzd,GAAG,IAAI;EAC9B,QACE,OAAOoS,KAAP,KAAiB,WAAjB,GACIA,KADJ,GAEI,CAACtS,QAAQ,CAACie,wBAAT,GAHP;EAKA,QAAMX,MAAAA,YAA+B,GAAG,EAAE,GAAGpd,GAAAA;EAAL,SAAxC,CAAA;EAEAF,QAAAA,QAAQ,CAACkH,WAAT,EAAA,CAAuBuU,IAAvB,CAA4B7a,OAA5B,CAAoC0F,GAAG,IAAI;EACzC4X,UAAAA,mBAAmB,CAACZ,YAAD,EAAehX,GAAG,CAAC/C,EAAnB,EAAuB+O,KAAvB,EAA8BtS,QAA9B,CAAnB,CAAA;EACD,SAFD,CAAA,CAAA;EAIA,QAAA,OAAOsd,YAAP,CAAA;EACD,OAbD,CAlCG;EAiDL;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EAEA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EAEA;EACA;EACAa,MAAAA,sBAAsB,EAAE,MAAMne,QAAQ,CAACgH,eAAT,EA3GzB;EA4GLoX,MAAAA,mBAAmB,EAAEnd,IAAI,CACvB,MAAM,CAACjB,QAAQ,CAACwJ,QAAT,EAAoB8T,CAAAA,YAArB,EAAmCtd,QAAQ,CAACgH,eAAT,EAAnC,CADiB,EAEvB,CAACsW,YAAD,EAAee,QAAf,KAA4B;EAC1B,QAAI,IAAA,CAACra,MAAM,CAACkL,IAAP,CAAYoO,YAAZ,CAAA,CAA0Btc,MAA/B,EAAuC;EACrC,UAAO,OAAA;EACLya,YAAAA,IAAI,EAAE,EADD;EAELjN,YAAAA,QAAQ,EAAE,EAFL;EAGLnH,YAAAA,QAAQ,EAAE,EAAA;EAHL,WAAP,CAAA;EAKD,SAAA;;EAED,QAAA,OAAOiX,YAAY,CAACte,QAAD,EAAWqe,QAAX,CAAnB,CAAA;EACD,OAZsB,EAavB;EACEte,QAAAA,GAAG,EAA4C,qBADjD;EAEEyB,QAAAA,KAAK,EAAE,MAAA;EAAA,UAAA,IAAA,qBAAA,CAAA;;EAAA,UAAMxB,OAAAA,CAAAA,qBAAAA,GAAAA,QAAQ,CAACkD,OAAT,CAAiBgB,QAAvB,oCAAmClE,QAAQ,CAACkD,OAAT,CAAiB8X,UAApD,CAAA;EAAA,SAAA;EAFT,OAbuB,CA5GpB;EA+HLuD,MAAAA,2BAA2B,EAAEtd,IAAI,CAC/B,MAAM,CACJjB,QAAQ,CAACwJ,QAAT,EAAoB8T,CAAAA,YADhB,EAEJtd,QAAQ,CAAC+U,mBAAT,EAFI,CADyB,EAK/B,CAACuI,YAAD,EAAee,QAAf,KAA4B;EAC1B,QAAI,IAAA,CAACra,MAAM,CAACkL,IAAP,CAAYoO,YAAZ,CAAA,CAA0Btc,MAA/B,EAAuC;EACrC,UAAO,OAAA;EACLya,YAAAA,IAAI,EAAE,EADD;EAELjN,YAAAA,QAAQ,EAAE,EAFL;EAGLnH,YAAAA,QAAQ,EAAE,EAAA;EAHL,WAAP,CAAA;EAKD,SAAA;;EAED,QAAA,OAAOiX,YAAY,CAACte,QAAD,EAAWqe,QAAX,CAAnB,CAAA;EACD,OAf8B,EAgB/B;EACEte,QAAAA,GAAG,EACDmF,aAAA,KAAyB,YAAzB,CAFJ;EAIE1D,QAAAA,KAAK,EAAE,MAAA;EAAA,UAAA,IAAA,sBAAA,CAAA;;EAAA,UAAMxB,OAAAA,CAAAA,sBAAAA,GAAAA,QAAQ,CAACkD,OAAT,CAAiBgB,QAAvB,qCAAmClE,QAAQ,CAACkD,OAAT,CAAiB8X,UAApD,CAAA;EAAA,SAAA;EAJT,OAhB+B,CA/H5B;EAuJLwD,MAAAA,0BAA0B,EAAEvd,IAAI,CAC9B,MAAM,CAACjB,QAAQ,CAACwJ,QAAT,EAAoB8T,CAAAA,YAArB,EAAmCtd,QAAQ,CAACsP,kBAAT,EAAnC,CADwB,EAE9B,CAACgO,YAAD,EAAee,QAAf,KAA4B;EAC1B,QAAI,IAAA,CAACra,MAAM,CAACkL,IAAP,CAAYoO,YAAZ,CAAA,CAA0Btc,MAA/B,EAAuC;EACrC,UAAO,OAAA;EACLya,YAAAA,IAAI,EAAE,EADD;EAELjN,YAAAA,QAAQ,EAAE,EAFL;EAGLnH,YAAAA,QAAQ,EAAE,EAAA;EAHL,WAAP,CAAA;EAKD,SAAA;;EAED,QAAA,OAAOiX,YAAY,CAACte,QAAD,EAAWqe,QAAX,CAAnB,CAAA;EACD,OAZ6B,EAa9B;EACEte,QAAAA,GAAG,EACDmF,aAAA,KAAyB,YAAzB,CAFJ;EAIE1D,QAAAA,KAAK,EAAE,MAAA;EAAA,UAAA,IAAA,sBAAA,CAAA;;EAAA,UAAMxB,OAAAA,CAAAA,sBAAAA,GAAAA,QAAQ,CAACkD,OAAT,CAAiBgB,QAAvB,qCAAmClE,QAAQ,CAACkD,OAAT,CAAiB8X,UAApD,CAAA;EAAA,SAAA;EAJT,OAb8B,CAvJ3B;EA4KL;EAEA;EACA;EAEA;EACA;EACA;EAEA;EACA;EACA;EAEA;EACA;EAEA8C,MAAAA,oBAAoB,EAAE,MAAM;EAC1B,QAAA,MAAMW,mBAAmB,GAAGze,QAAQ,CAACgU,sBAAT,GAAkCxF,QAA9D,CAAA;EACA,QAAM,MAAA;EAAE8O,UAAAA,YAAAA;EAAF,SAAmBtd,GAAAA,QAAQ,CAACwJ,QAAT,EAAzB,CAAA;EAEA,QAAA,IAAIkV,iBAAiB,GAAG7P,OAAO,CAC7B4P,mBAAmB,CAACzd,MAApB,IAA8BgD,MAAM,CAACkL,IAAP,CAAYoO,YAAZ,CAAA,CAA0Btc,MAD3B,CAA/B,CAAA;;EAIA,QAAA,IAAI0d,iBAAJ,EAAuB;EACrB,UAAA,IAAID,mBAAmB,CAAC5c,IAApB,CAAyByE,GAAG,IAAI,CAACgX,YAAY,CAAChX,GAAG,CAAC/C,EAAL,CAA7C,CAAJ,EAA4D;EAC1Dmb,YAAAA,iBAAiB,GAAG,KAApB,CAAA;EACD,WAAA;EACF,SAAA;;EAED,QAAA,OAAOA,iBAAP,CAAA;EACD,OA3MI;EA6MLT,MAAAA,wBAAwB,EAAE,MAAM;EAC9B,QAAA,MAAMU,kBAAkB,GAAG3e,QAAQ,CAACmH,qBAAT,GAAiCqH,QAA5D,CAAA;EACA,QAAM,MAAA;EAAE8O,UAAAA,YAAAA;EAAF,SAAmBtd,GAAAA,QAAQ,CAACwJ,QAAT,EAAzB,CAAA;EAEA,QAAA,IAAIoV,qBAAqB,GAAG,CAAC,CAACD,kBAAkB,CAAC3d,MAAjD,CAAA;;EAEA,QAAA,IACE4d,qBAAqB,IACrBD,kBAAkB,CAAC9c,IAAnB,CAAwByE,GAAG,IAAI,CAACgX,YAAY,CAAChX,GAAG,CAAC/C,EAAL,CAA5C,CAFF,EAGE;EACAqb,UAAAA,qBAAqB,GAAG,KAAxB,CAAA;EACD,SAAA;;EAED,QAAA,OAAOA,qBAAP,CAAA;EACD,OA3NI;EA6NLC,MAAAA,qBAAqB,EAAE,MAAM;EAAA,QAAA,IAAA,qBAAA,CAAA;;EAC3B,QACE,OAAA,CAAC7e,QAAQ,CAAC8d,oBAAT,EAAD,IACA,CAAC,CAAC9Z,MAAM,CAACkL,IAAP,CAAYlP,CAAAA,qBAAAA,GAAAA,QAAQ,CAACwJ,QAAT,EAAA,CAAoB8T,YAAhC,KAAgD,IAAA,GAAA,qBAAA,GAAA,EAAhD,EAAoDtc,MAFxD,CAAA;EAID,OAlOI;EAoOL8d,MAAAA,yBAAyB,EAAE,MAAM;EAC/B,QAAA,MAAMH,kBAAkB,GAAG3e,QAAQ,CAACmH,qBAAT,GAAiCqH,QAA5D,CAAA;EACA,QAAA,OAAOxO,QAAQ,CAACie,wBAAT,EAAA,GACH,KADG,GAEH,CAAC,EAACU,kBAAD,IAAA,IAAA,IAACA,kBAAkB,CAAE3d,MAArB,CAFL,CAAA;EAGD,OAzOI;EA2OL+d,MAAAA,+BAA+B,EAAE,MAAM;EACrC,QAAA,OAAQ/T,CAAD,IAAgB;EACrBhL,UAAAA,QAAQ,CAAC6d,qBAAT,CACI7S,CAAD,CAAkBgU,MAAnB,CAA+CC,OADjD,CAAA,CAAA;EAGD,SAJD,CAAA;EAKD,OAjPI;EAmPLC,MAAAA,mCAAmC,EAAE,MAAM;EACzC,QAAA,OAAQlU,CAAD,IAAgB;EACrBhL,UAAAA,QAAQ,CAACge,yBAAT,CACIhT,CAAD,CAAkBgU,MAAnB,CAA+CC,OADjD,CAAA,CAAA;EAGD,SAJD,CAAA;EAKD,OAAA;EAzPI,KAAP,CAAA;EA2PD,GApRuC;EAsRxCzY,EAAAA,SAAS,EAAE,CACTF,GADS,EAETtG,QAFS,KAGW;EACpB,IAAO,OAAA;EACLmf,MAAAA,cAAc,EAAE7M,KAAK,IAAI;EACvB,QAAA,MAAM8M,UAAU,GAAG9Y,GAAG,CAAC+Y,aAAJ,EAAnB,CAAA;EAEArf,QAAAA,QAAQ,CAAC2d,eAAT,CAAyBzd,GAAG,IAAI;EAC9BoS,UAAAA,KAAK,GAAG,OAAOA,KAAP,KAAiB,WAAjB,GAA+BA,KAA/B,GAAuC,CAAC8M,UAAhD,CAAA;;EAEA,UAAIA,IAAAA,UAAU,KAAK9M,KAAnB,EAA0B;EACxB,YAAA,OAAOpS,GAAP,CAAA;EACD,WAAA;;EAED,UAAMof,MAAAA,cAAc,GAAG,EAAE,GAAGpf,GAAAA;EAAL,WAAvB,CAAA;EAEAge,UAAAA,mBAAmB,CAACoB,cAAD,EAAiBhZ,GAAG,CAAC/C,EAArB,EAAyB+O,KAAzB,EAAgCtS,QAAhC,CAAnB,CAAA;EAEA,UAAA,OAAOsf,cAAP,CAAA;EACD,SAZD,CAAA,CAAA;EAaD,OAjBI;EAkBLD,MAAAA,aAAa,EAAE,MAAM;EACnB,QAAM,MAAA;EAAE/B,UAAAA,YAAAA;EAAF,SAAmBtd,GAAAA,QAAQ,CAACwJ,QAAT,EAAzB,CAAA;EACA,QAAO+V,OAAAA,aAAa,CAACjZ,GAAD,EAAMgX,YAAN,CAAb,KAA+C,IAAtD,CAAA;EACD,OArBI;EAuBLkC,MAAAA,iBAAiB,EAAE,MAAM;EACvB,QAAM,MAAA;EAAElC,UAAAA,YAAAA;EAAF,SAAmBtd,GAAAA,QAAQ,CAACwJ,QAAT,EAAzB,CAAA;EACA,QAAO+V,OAAAA,aAAa,CAACjZ,GAAD,EAAMgX,YAAN,CAAb,KAA+C,MAAtD,CAAA;EACD,OA1BI;EA4BLmC,MAAAA,YAAY,EAAE,MAAM;EAAA,QAAA,IAAA,qBAAA,CAAA;;EAClB,QAAI,IAAA,OAAOzf,QAAQ,CAACkD,OAAT,CAAiBsa,kBAAxB,KAA+C,UAAnD,EAA+D;EAC7D,UAAA,OAAOxd,QAAQ,CAACkD,OAAT,CAAiBsa,kBAAjB,CAAoClX,GAApC,CAAP,CAAA;EACD,SAAA;;EAED,QAAA,OAAA,CAAA,qBAAA,GAAOtG,QAAQ,CAACkD,OAAT,CAAiBsa,kBAAxB,oCAA8C,IAA9C,CAAA;EACD,OAlCI;EAoCLkC,MAAAA,mBAAmB,EAAE,MAAM;EAAA,QAAA,IAAA,sBAAA,CAAA;;EACzB,QAAI,IAAA,OAAO1f,QAAQ,CAACkD,OAAT,CAAiBwa,qBAAxB,KAAkD,UAAtD,EAAkE;EAChE,UAAA,OAAO1d,QAAQ,CAACkD,OAAT,CAAiBwa,qBAAjB,CAAuCpX,GAAvC,CAAP,CAAA;EACD,SAAA;;EAED,QAAA,OAAA,CAAA,sBAAA,GAAOtG,QAAQ,CAACkD,OAAT,CAAiBwa,qBAAxB,qCAAiD,IAAjD,CAAA;EACD,OA1CI;EA4CLiC,MAAAA,iBAAiB,EAAE,MAAM;EAAA,QAAA,IAAA,sBAAA,CAAA;;EACvB,QAAI,IAAA,OAAO3f,QAAQ,CAACkD,OAAT,CAAiBua,uBAAxB,KAAoD,UAAxD,EAAoE;EAClE,UAAA,OAAOzd,QAAQ,CAACkD,OAAT,CAAiBua,uBAAjB,CAAyCnX,GAAzC,CAAP,CAAA;EACD,SAAA;;EAED,QAAA,OAAA,CAAA,sBAAA,GAAOtG,QAAQ,CAACkD,OAAT,CAAiBua,uBAAxB,qCAAmD,IAAnD,CAAA;EACD,OAlDI;EAmDLmC,MAAAA,wBAAwB,EAAE,MAAM;EAC9B,QAAA,MAAMC,SAAS,GAAGvZ,GAAG,CAACmZ,YAAJ,EAAlB,CAAA;EAEA,QAAA,OAAQzU,CAAD,IAAgB;EAAA,UAAA,IAAA,OAAA,CAAA;;EACrB,UAAI,IAAA,CAAC6U,SAAL,EAAgB,OAAA;EAChBvZ,UAAAA,GAAG,CAAC6Y,cAAJ,CAAA,CAAA,OAAA,GACInU,CAAD,CAAkBgU,MADrB,KACE,IAAA,GAAA,KAAA,CAAA,GAAA,OAAA,CAAgDC,OADlD,CAAA,CAAA;EAGD,SALD,CAAA;EAMD,OAAA;EA5DI,KAAP,CAAA;EA8DD,GAAA;EAxVuC,EAAnC;;EA2VP,MAAMf,mBAAmB,GAAG,CAC1BoB,cAD0B,EAE1B/b,EAF0B,EAG1B+O,KAH0B,EAI1BtS,QAJ0B,KAKvB;EAAA,EAAA,IAAA,YAAA,CAAA;;EACH,EAAA,MAAMsG,GAAG,GAAGtG,QAAQ,CAACoH,MAAT,CAAgB7D,EAAhB,CAAZ,CAAA;EAEA,EAAkB+C,GAAG,CAACwQ,YAAJ,GAHf;EAMH;EACA;EACA;;EACA,EAAA,IAAIxE,KAAJ,EAAW;EACTgN,IAAAA,cAAc,CAAC/b,EAAD,CAAd,GAAqB,IAArB,CAAA;EACD,GAFD,MAEO;EACL,IAAO+b,OAAAA,cAAc,CAAC/b,EAAD,CAArB,CAAA;EACD,GAbE;;;EAgBH,EAAI,IAAA,CAAA,YAAA,GAAA+C,GAAG,CAACK,OAAJ,KAAA,IAAA,IAAA,YAAA,CAAa3F,MAAb,IAAuBsF,GAAG,CAACoZ,mBAAJ,EAA3B,EAAsD;EACpDpZ,IAAAA,GAAG,CAACK,OAAJ,CAAY/F,OAAZ,CAAoB0F,GAAG,IACrB4X,mBAAmB,CAACoB,cAAD,EAAiBhZ,GAAG,CAAC/C,EAArB,EAAyB+O,KAAzB,EAAgCtS,QAAhC,CADrB,CAAA,CAAA;EAGD,GAAA;EACF,CA1BD,CAAA;;EA4BO,SAASse,YAAT,CACLte,QADK,EAELqe,QAFK,EAGgB;EACrB,EAAA,MAAMf,YAAY,GAAGtd,QAAQ,CAACwJ,QAAT,GAAoB8T,YAAzC,CAAA;EAEA,EAAMwC,MAAAA,mBAAqC,GAAG,EAA9C,CAAA;EACA,EAAA,MAAMC,mBAAmD,GAAG,EAA5D,CAJqB;;EAOrB,EAAA,MAAMC,WAAW,GAAG,UAACvE,IAAD,EAAyBjX,KAAzB,EAAyD;EAAA,IAAA,IAAhCA,KAAgC,KAAA,KAAA,CAAA,EAAA;EAAhCA,MAAAA,KAAgC,GAAxB,CAAwB,CAAA;EAAA,KAAA;;EAC3E,IAAA,OAAOiX,IAAI,CACR/V,GADI,CACAY,GAAG,IAAI;EAAA,MAAA,IAAA,aAAA,CAAA;;EACV,MAAM8Y,MAAAA,UAAU,GAAGG,aAAa,CAACjZ,GAAD,EAAMgX,YAAN,CAAb,KAA+C,IAAlE,CAAA;;EAEA,MAAA,IAAI8B,UAAJ,EAAgB;EACdU,QAAAA,mBAAmB,CAAChf,IAApB,CAAyBwF,GAAzB,CAAA,CAAA;EACAyZ,QAAAA,mBAAmB,CAACzZ,GAAG,CAAC/C,EAAL,CAAnB,GAA8B+C,GAA9B,CAAA;EACD,OAAA;;EAED,MAAA,IAAA,CAAA,aAAA,GAAIA,GAAG,CAACK,OAAR,KAAI,IAAA,IAAA,aAAA,CAAa3F,MAAjB,EAAyB;EACvBsF,QAAAA,GAAG,GAAG,EACJ,GAAGA,GADC;EAEJK,UAAAA,OAAO,EAAEqZ,WAAW,CAAC1Z,GAAG,CAACK,OAAL,EAAcnC,KAAK,GAAG,CAAtB,CAAA;EAFhB,SAAN,CAAA;EAID,OAAA;;EAED,MAAA,IAAI4a,UAAJ,EAAgB;EACd,QAAA,OAAO9Y,GAAP,CAAA;EACD,OAAA;EACF,KAnBI,CAoBJsN,CAAAA,MApBI,CAoBG/E,OApBH,CAAP,CAAA;EAqBD,GAtBD,CAAA;;EAwBA,EAAO,OAAA;EACL4M,IAAAA,IAAI,EAAEuE,WAAW,CAAC3B,QAAQ,CAAC5C,IAAV,CADZ;EAELjN,IAAAA,QAAQ,EAAEsR,mBAFL;EAGLzY,IAAAA,QAAQ,EAAE0Y,mBAAAA;EAHL,GAAP,CAAA;EAKD,CAAA;EAEM,SAASR,aAAT,CACLjZ,GADK,EAEL2Z,SAFK,EAGLjgB,QAHK,EAIa;EAClB,EAAA,IAAIigB,SAAS,CAAC3Z,GAAG,CAAC/C,EAAL,CAAb,EAAuB;EACrB,IAAA,OAAO,IAAP,CAAA;EACD,GAAA;;EAED,EAAI+C,IAAAA,GAAG,CAACK,OAAJ,IAAeL,GAAG,CAACK,OAAJ,CAAY3F,MAA/B,EAAuC;EACrC,IAAIkf,IAAAA,mBAAmB,GAAG,IAA1B,CAAA;EACA,IAAIC,IAAAA,YAAY,GAAG,KAAnB,CAAA;EAEA7Z,IAAAA,GAAG,CAACK,OAAJ,CAAY/F,OAAZ,CAAoBwf,MAAM,IAAI;EAC5B;EACA,MAAA,IAAID,YAAY,IAAI,CAACD,mBAArB,EAA0C;EACxC,QAAA,OAAA;EACD,OAAA;;EAED,MAAIX,IAAAA,aAAa,CAACa,MAAD,EAASH,SAAT,CAAjB,EAAgD;EAC9CE,QAAAA,YAAY,GAAG,IAAf,CAAA;EACD,OAFD,MAEO;EACLD,QAAAA,mBAAmB,GAAG,KAAtB,CAAA;EACD,OAAA;EACF,KAXD,CAAA,CAAA;EAaA,IAAOA,OAAAA,mBAAmB,GAAG,IAAH,GAAUC,YAAY,GAAG,MAAH,GAAY,KAA5D,CAAA;EACD,GAAA;;EAED,EAAA,OAAO,KAAP,CAAA;EACD;;AClgBM,QAAME,mBAAmB,GAAG,aAA5B;AAEA,QAAMC,UAAU,GAAG;EACxBC,EAAAA,YADwB;EAExBC,EAAAA,yBAFwB;EAGxBC,EAAAA,IAHwB;EAIxBC,EAAAA,iBAJwB;EAKxBC,EAAAA,QALwB;EAMxBC,EAAAA,KAAAA;EANwB,EAAnB;;EAWP,SAASL,YAAT,CACEM,IADF,EAEEC,IAFF,EAGE5a,QAHF,EAIE;EACA,EAAO6a,OAAAA,mBAAmB,CACxBpd,QAAQ,CAACkd,IAAI,CAACnd,QAAL,CAAcwC,QAAd,CAAD,CAAR,CAAkCmK,WAAlC,EADwB,EAExB1M,QAAQ,CAACmd,IAAI,CAACpd,QAAL,CAAcwC,QAAd,CAAD,CAAR,CAAkCmK,WAAlC,EAFwB,CAA1B,CAAA;EAID,CAAA;;EAED,SAASmQ,yBAAT,CACEK,IADF,EAEEC,IAFF,EAGE5a,QAHF,EAIE;EACA,EAAO6a,OAAAA,mBAAmB,CACxBpd,QAAQ,CAACkd,IAAI,CAACnd,QAAL,CAAcwC,QAAd,CAAD,CADgB,EAExBvC,QAAQ,CAACmd,IAAI,CAACpd,QAAL,CAAcwC,QAAd,CAAD,CAFgB,CAA1B,CAAA;EAID;EAGD;EACA;;;EACA,SAAS6a,mBAAT,CAA6BC,IAA7B,EAA2CC,IAA3C,EAAyD;EACvD;EACA;EACA,EAAMC,MAAAA,CAAC,GAAGF,IAAI,CAAC5R,KAAL,CAAWiR,mBAAX,CAAgCzM,CAAAA,MAAhC,CAAuC/E,OAAvC,CAAV,CAAA;EACA,EAAA,MAAMsS,CAAC,GAAGF,IAAI,CAAC7R,KAAL,CAAWiR,mBAAX,CAAA,CAAgCzM,MAAhC,CAAuC/E,OAAvC,CAAV,CAJuD;;EAOvD,EAAA,OAAOqS,CAAC,CAAClgB,MAAF,IAAYmgB,CAAC,CAACngB,MAArB,EAA6B;EAC3B,IAAA,MAAMogB,EAAE,GAAGF,CAAC,CAACjI,KAAF,EAAX,CAAA;EACA,IAAA,MAAMoI,EAAE,GAAGF,CAAC,CAAClI,KAAF,EAAX,CAAA;EAEA,IAAA,MAAMqI,EAAE,GAAGC,QAAQ,CAACH,EAAD,EAAK,EAAL,CAAnB,CAAA;EACA,IAAA,MAAMI,EAAE,GAAGD,QAAQ,CAACF,EAAD,EAAK,EAAL,CAAnB,CAAA;EAEA,IAAMI,MAAAA,KAAK,GAAG,CAACH,EAAD,EAAKE,EAAL,CAASE,CAAAA,IAAT,EAAd,CAP2B;;EAU3B,IAAA,IAAIjQ,KAAK,CAACgQ,KAAK,CAAC,CAAD,CAAN,CAAT,EAAsB;EACpB,MAAIL,IAAAA,EAAE,GAAGC,EAAT,EAAa;EACX,QAAA,OAAO,CAAP,CAAA;EACD,OAAA;;EACD,MAAIA,IAAAA,EAAE,GAAGD,EAAT,EAAa;EACX,QAAA,OAAO,CAAC,CAAR,CAAA;EACD,OAAA;;EACD,MAAA,SAAA;EACD,KAlB0B;;;EAqB3B,IAAA,IAAI3P,KAAK,CAACgQ,KAAK,CAAC,CAAD,CAAN,CAAT,EAAsB;EACpB,MAAOhQ,OAAAA,KAAK,CAAC6P,EAAD,CAAL,GAAY,CAAC,CAAb,GAAiB,CAAxB,CAAA;EACD,KAvB0B;;;EA0B3B,IAAIA,IAAAA,EAAE,GAAGE,EAAT,EAAa;EACX,MAAA,OAAO,CAAP,CAAA;EACD,KAAA;;EACD,IAAIA,IAAAA,EAAE,GAAGF,EAAT,EAAa;EACX,MAAA,OAAO,CAAC,CAAR,CAAA;EACD,KAAA;EACF,GAAA;;EAED,EAAA,OAAOJ,CAAC,CAAClgB,MAAF,GAAWmgB,CAAC,CAACngB,MAApB,CAAA;EACD;EAGD;;;EACA,SAASyf,IAAT,CACEI,IADF,EAEEC,IAFF,EAGE5a,QAHF,EAIE;EACA,EAAOyb,OAAAA,YAAY,CACjBhe,QAAQ,CAACkd,IAAI,CAACnd,QAAL,CAAcwC,QAAd,CAAD,CAAR,CAAkCmK,WAAlC,EADiB,EAEjB1M,QAAQ,CAACmd,IAAI,CAACpd,QAAL,CAAcwC,QAAd,CAAD,CAAR,CAAkCmK,WAAlC,EAFiB,CAAnB,CAAA;EAID;EAGD;;;EACA,SAASqQ,iBAAT,CACEG,IADF,EAEEC,IAFF,EAGE5a,QAHF,EAIE;EACA,EAAOyb,OAAAA,YAAY,CACjBhe,QAAQ,CAACkd,IAAI,CAACnd,QAAL,CAAcwC,QAAd,CAAD,CADS,EAEjBvC,QAAQ,CAACmd,IAAI,CAACpd,QAAL,CAAcwC,QAAd,CAAD,CAFS,CAAnB,CAAA;EAID,CAAA;;EAED,SAASya,QAAT,CACEE,IADF,EAEEC,IAFF,EAGE5a,QAHF,EAIE;EACA,EAAOyb,OAAAA,YAAY,CAChBd,IAAI,CAACnd,QAAL,CAAcwC,QAAd,CAAD,CAAkC0b,OAAlC,EADiB,EAEhBd,IAAI,CAACpd,QAAL,CAAcwC,QAAd,CAAD,CAAkC0b,OAAlC,EAFiB,CAAnB,CAAA;EAID,CAAA;;EAED,SAAShB,KAAT,CACEC,IADF,EAEEC,IAFF,EAGE5a,QAHF,EAIE;EACA,EAAA,OAAOyb,YAAY,CAACd,IAAI,CAACnd,QAAL,CAAcwC,QAAd,CAAD,EAA0B4a,IAAI,CAACpd,QAAL,CAAcwC,QAAd,CAA1B,CAAnB,CAAA;EACD;;;EAID,SAASyb,YAAT,CAAsBT,CAAtB,EAA8BC,CAA9B,EAAsC;EACpC,EAAA,OAAOD,CAAC,KAAKC,CAAN,GAAU,CAAV,GAAcD,CAAC,GAAGC,CAAJ,GAAQ,CAAR,GAAY,CAAC,CAAlC,CAAA;EACD,CAAA;;EAED,SAASxd,QAAT,CAAkBud,CAAlB,EAA0B;EACxB,EAAA,IAAI,OAAOA,CAAP,KAAa,QAAjB,EAA2B;EACzB,IAAA,IAAIzP,KAAK,CAACyP,CAAD,CAAL,IAAYA,CAAC,KAAKxP,QAAlB,IAA8BwP,CAAC,KAAK,CAACxP,QAAzC,EAAmD;EACjD,MAAA,OAAO,EAAP,CAAA;EACD,KAAA;;EACD,IAAOhP,OAAAA,MAAM,CAACwe,CAAD,CAAb,CAAA;EACD,GAAA;;EACD,EAAA,IAAI,OAAOA,CAAP,KAAa,QAAjB,EAA2B;EACzB,IAAA,OAAOA,CAAP,CAAA;EACD,GAAA;;EACD,EAAA,OAAO,EAAP,CAAA;EACD;;ECrDD;AAEO,QAAMW,OAAqB,GAAG;EACnC/Y,EAAAA,eAAe,EAAGC,KAAD,IAA8B;EAC7C,IAAO,OAAA;EACL+Y,MAAAA,OAAO,EAAE,EADJ;EAEL,MAAG/Y,GAAAA,KAAAA;EAFE,KAAP,CAAA;EAID,GANkC;EAQnC9F,EAAAA,gBAAgB,EAAE,MAEkB;EAClC,IAAO,OAAA;EACL8e,MAAAA,SAAS,EAAE,MAAA;EADN,KAAP,CAAA;EAGD,GAdkC;EAgBnC7Y,EAAAA,iBAAiB,EACflJ,QADiB,IAEa;EAC9B,IAAO,OAAA;EACLgiB,MAAAA,eAAe,EAAEliB,gBAAgB,CAAC,SAAD,EAAYE,QAAZ,CAD5B;EAELiiB,MAAAA,gBAAgB,EAAGjX,CAAD,IAAgB;EAChC,QAAQA,OAAAA,CAAD,CAAkBkX,QAAzB,CAAA;EACD,OAAA;EAJI,KAAP,CAAA;EAMD,GAzBkC;EA2BnC5d,EAAAA,YAAY,EAAE,CACZhB,MADY,EAEZtD,QAFY,KAGiB;EAC7B,IAAO,OAAA;EACLmiB,MAAAA,gBAAgB,EAAE,MAAM;EACtB,QAAMC,MAAAA,SAAS,GAAGpiB,QAAQ,CAAC+U,mBAAT,EAA+BvG,CAAAA,QAA/B,CAAwC6T,KAAxC,CAA8C,EAA9C,CAAlB,CAAA;EAEA,QAAIC,IAAAA,QAAQ,GAAG,KAAf,CAAA;;EAEA,QAAA,KAAK,MAAMhc,GAAX,IAAkB8b,SAAlB,EAA6B;EAC3B,UAAM9P,MAAAA,KAAK,GAAGhM,GAAH,IAAGA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,GAAG,CAAE5C,QAAL,CAAcJ,MAAM,CAACC,EAArB,CAAd,CAAA;;EAEA,UAAIS,IAAAA,MAAM,CAACoT,SAAP,CAAiBzT,QAAjB,CAA0B0T,IAA1B,CAA+B/E,KAA/B,CAA0C,KAAA,eAA9C,EAA+D;EAC7D,YAAOgO,OAAAA,UAAU,CAACK,QAAlB,CAAA;EACD,WAAA;;EAED,UAAA,IAAI,OAAOrO,KAAP,KAAiB,QAArB,EAA+B;EAC7BgQ,YAAAA,QAAQ,GAAG,IAAX,CAAA;;EAEA,YAAIhQ,IAAAA,KAAK,CAAClD,KAAN,CAAYiR,mBAAZ,CAAiCrf,CAAAA,MAAjC,GAA0C,CAA9C,EAAiD;EAC/C,cAAOsf,OAAAA,UAAU,CAACC,YAAlB,CAAA;EACD,aAAA;EACF,WAAA;EACF,SAAA;;EAED,QAAA,IAAI+B,QAAJ,EAAc;EACZ,UAAOhC,OAAAA,UAAU,CAACG,IAAlB,CAAA;EACD,SAAA;;EAED,QAAOH,OAAAA,UAAU,CAACM,KAAlB,CAAA;EACD,OA3BI;EA4BL2B,MAAAA,cAAc,EAAE,MAAM;EACpB,QAAM/P,MAAAA,QAAQ,GAAGxS,QAAQ,CAAC+U,mBAAT,EAA+BvG,CAAAA,QAA/B,CAAwC,CAAxC,CAAjB,CAAA;EAEA,QAAM8D,MAAAA,KAAK,GAAGE,QAAH,IAAGA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,QAAQ,CAAE9O,QAAV,CAAmBJ,MAAM,CAACC,EAA1B,CAAd,CAAA;;EAEA,QAAA,IAAI,OAAO+O,KAAP,KAAiB,QAArB,EAA+B;EAC7B,UAAA,OAAO,KAAP,CAAA;EACD,SAAA;;EAED,QAAA,OAAO,MAAP,CAAA;EACD,OAtCI;EAuCLkQ,MAAAA,YAAY,EAAE,MAAM;EAAA,QAAA,IAAA,IAAA,CAAA;;EAClB,QAAA,MAAMC,aAAa,GAAGziB,QAAQ,CAACkD,OAAT,CAAiBod,UAAvC,CAAA;;EAEA,QAAI,IAAA,CAAChd,MAAL,EAAa;EACX,UAAM,MAAA,IAAIwB,KAAJ,EAAN,CAAA;EACD,SAAA;;EAED,QAAA,OAAO3E,UAAU,CAACmD,MAAM,CAACye,SAAR,CAAV,GACHze,MAAM,CAACye,SADJ,GAEHze,MAAM,CAACye,SAAP,KAAqB,MAArB,GACAze,MAAM,CAAC6e,gBAAP,EADA,GAECM,CAAAA,IAAAA,GAAAA,aAFD,IAECA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,aAAD,CACEnf,MAAM,CAACye,SADT,CAFA,mBAKCzB,UAAU,CACThd,MAAM,CAACye,SADE,CAPf,CAAA;EAUD,OAxDI;EAyDLW,MAAAA,aAAa,EAAE,CAACC,IAAD,EAAOC,KAAP,KAAiB;EAC9B;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA5iB,QAAAA,QAAQ,CAAC6iB,UAAT,CAAoB3iB,GAAG,IAAI;EAAA,UAAA,IAAA,KAAA,EAAA,qBAAA,EAAA,qBAAA,EAAA,sBAAA,CAAA;;EACzB;EACA,UAAA,MAAM4iB,eAAe,GAAG5iB,GAAH,IAAGA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,GAAG,CAAEoT,IAAL,CAAUlT,CAAC,IAAIA,CAAC,CAACmD,EAAF,KAASD,MAAM,CAACC,EAA/B,CAAxB,CAAA;EACA,UAAA,MAAMwf,aAAa,GAAG7iB,GAAH,IAAGA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,GAAG,CAAE4J,SAAL,CAAe1J,CAAC,IAAIA,CAAC,CAACmD,EAAF,KAASD,MAAM,CAACC,EAApC,CAAtB,CAAA;EACA,UAAMyf,MAAAA,cAAc,GAAG,OAAOL,IAAP,KAAgB,WAAhB,IAA+BA,IAAI,KAAK,IAA/D,CAAA;EAEA,UAAA,IAAIM,UAAwB,GAAG,EAA/B,CANyB;;EASzB,UAAA,IAAIC,UAAJ,CAAA;;EAEA,UAAA,IAAI5f,MAAM,CAAC6f,eAAP,EAAA,IAA4BP,KAAhC,EAAuC;EACrC,YAAA,IAAIE,eAAJ,EAAqB;EACnBI,cAAAA,UAAU,GAAG,QAAb,CAAA;EACD,aAFD,MAEO;EACLA,cAAAA,UAAU,GAAG,KAAb,CAAA;EACD,aAAA;EACF,WAND,MAMO;EACL;EACA,YAAA,IAAIhjB,GAAG,IAAA,IAAH,IAAAA,GAAG,CAAEc,MAAL,IAAe+hB,aAAa,KAAK7iB,GAAG,CAACc,MAAJ,GAAa,CAAlD,EAAqD;EACnDkiB,cAAAA,UAAU,GAAG,SAAb,CAAA;EACD,aAFD,MAEO,IAAIJ,eAAJ,EAAqB;EAC1BI,cAAAA,UAAU,GAAG,QAAb,CAAA;EACD,aAFM,MAEA;EACLA,cAAAA,UAAU,GAAG,SAAb,CAAA;EACD,aAAA;EACF,WAAA;;EAED,UAAA,MAAME,aAAa,GACjB9f,CAAAA,KAAAA,GAAAA,CAAAA,qBAAAA,GAAAA,MAAM,CAAC8f,aADU,KAAA,IAAA,GAAA,qBAAA,GAEjBpjB,QAAQ,CAACkD,OAAT,CAAiBkgB,aAFA,oBAGjB9f,MAAM,CAACif,cAAP,EAA4B,KAAA,MAH9B,CA5ByB;;EAkCzB,UACEW,IAAAA,UAAU,KAAK,QAAf;EAAA,UAAA,CAAA,qBAAA,GACCljB,QAAQ,CAACkD,OAAT,CAAiBmgB,oBADlB,KAAA,IAAA,GAAA,qBAAA,GAC0C,IAD1C,CACmD;EACnD,UAAA,CAACL,cAFD;EAGCJ,UAAAA,KAAK,GAAG5iB,CAAAA,sBAAAA,GAAAA,QAAQ,CAACkD,OAAT,CAAiBogB,iBAApB,KAAyC,IAAA,GAAA,sBAAA,GAAA,IAAzC,GAAgD,IAHtD,CAG+D;EAC9DR,UAAAA,eAAe,IAAf,IAAA,IAAAA,eAAe,CAAEH,IAAjB;EAAA,YACG,CAACS,aADJ,GAEGA,aANJ,CADF,EAQE;EACAF,YAAAA,UAAU,GAAG,QAAb,CAAA;EACD,WAAA;;EAED,UAAIA,IAAAA,UAAU,KAAK,SAAnB,EAA8B;EAC5BD,YAAAA,UAAU,GAAG,CACX;EACE1f,cAAAA,EAAE,EAAED,MAAM,CAACC,EADb;EAEEof,cAAAA,IAAI,EAAEK,cAAc,GAAGL,IAAH,GAAW,CAAC,CAACS,aAAAA;EAFnC,aADW,CAAb,CAAA;EAMD,WAPD,MAOO,IAAIF,UAAU,KAAK,KAAf,IAAwBhjB,GAAxB,IAAwBA,IAAAA,IAAAA,GAAG,CAAEc,MAAjC,EAAyC;EAAA,YAAA,IAAA,qBAAA,CAAA;;EAC9CiiB,YAAAA,UAAU,GAAG,CACX,GAAG/iB,GADQ,EAEX;EACEqD,cAAAA,EAAE,EAAED,MAAM,CAACC,EADb;EAEEof,cAAAA,IAAI,EAAEK,cAAc,GAAGL,IAAH,GAAW,CAAC,CAACS,aAAAA;EAFnC,aAFW,CAAb,CAD8C;;EAS9CH,YAAAA,UAAU,CAAC9J,MAAX,CACE,CADF,EAEE8J,UAAU,CAACjiB,MAAX,6BACGhB,QAAQ,CAACkD,OAAT,CAAiBqgB,oBADpB,oCAEInb,MAAM,CAACC,gBAFX,CAFF,CAAA,CAAA;EAMD,WAfM,MAeA,IAAI6a,UAAU,KAAK,QAAf,IAA2BhjB,GAA3B,IAA2BA,IAAAA,IAAAA,GAAG,CAAEc,MAApC,EAA4C;EACjD;EACAiiB,YAAAA,UAAU,GAAG/iB,GAAG,CAACwF,GAAJ,CAAQtF,CAAC,IAAI;EACxB,cAAA,IAAIA,CAAC,CAACmD,EAAF,KAASD,MAAM,CAACC,EAApB,EAAwB;EACtB,gBAAO,OAAA,EACL,GAAGnD,CADE;EAELuiB,kBAAAA,IAAI,EAAEK,cAAc,GAAGL,IAAH,GAAW,EAACG,eAAD,IAAA,IAAA,IAACA,eAAe,CAAEH,IAAlB,CAAA;EAF1B,iBAAP,CAAA;EAID,eAAA;;EACD,cAAA,OAAOviB,CAAP,CAAA;EACD,aARY,CAAb,CAAA;EASD,WAXM,MAWA,IAAI8iB,UAAU,KAAK,QAAf,IAA2BhjB,GAA3B,IAA2BA,IAAAA,IAAAA,GAAG,CAAEc,MAApC,EAA4C;EACjDiiB,YAAAA,UAAU,GAAG/iB,GAAG,CAAC0T,MAAJ,CAAWxT,CAAC,IAAIA,CAAC,CAACmD,EAAF,KAASD,MAAM,CAACC,EAAhC,CAAb,CAAA;EACD,WAAA;;EAED,UAAA,OAAO0f,UAAP,CAAA;EACD,SApFD,CAAA,CAAA;EAqFD,OAxJI;EA0JLO,MAAAA,UAAU,EAAE,MAAM;EAAA,QAAA,IAAA,qBAAA,EAAA,sBAAA,CAAA;;EAChB,QAAA,OACE,0BAAClgB,MAAM,CAACmgB,aAAR,KAAyB,IAAA,GAAA,qBAAA,GAAA,IAAzB,gCACCzjB,QAAQ,CAACkD,OAAT,CAAiBugB,aADlB,qCACmC,IADnC,CAAA,IAEA,CAAC,CAACngB,MAAM,CAACsB,UAHX,CAAA;EAKD,OAhKI;EAkKLue,MAAAA,eAAe,EAAE,MAAM;EAAA,QAAA,IAAA,KAAA,EAAA,qBAAA,CAAA;;EACrB,QAAA,OAAA,CAAA,KAAA,GAAA,CAAA,qBAAA,GACE7f,MAAM,CAACogB,eADT,KAAA,IAAA,GAAA,qBAAA,GAEE1jB,QAAQ,CAACkD,OAAT,CAAiBwgB,eAFnB,KAGE,IAAA,GAAA,KAAA,GAAA,CAAC,CAACpgB,MAAM,CAACsB,UAHX,CAAA;EAKD,OAxKI;EA0KL+e,MAAAA,WAAW,EAAE,MAAM;EAAA,QAAA,IAAA,qBAAA,CAAA;;EACjB,QAAMC,MAAAA,UAAU,4BAAG5jB,QAAQ,CACxBwJ,QADgB,EAEhBsY,CAAAA,OAFa,qBAAG,qBAEPxO,CAAAA,IAFO,CAEFlT,CAAC,IAAIA,CAAC,CAACmD,EAAF,KAASD,MAAM,CAACC,EAFnB,CAAnB,CAAA;EAIA,QAAO,OAAA,CAACqgB,UAAD,GAAc,KAAd,GAAsBA,UAAU,CAACjB,IAAX,GAAkB,MAAlB,GAA2B,KAAxD,CAAA;EACD,OAhLI;EAkLLkB,MAAAA,YAAY,EAAE,MAAA;EAAA,QAAA,IAAA,sBAAA,EAAA,sBAAA,CAAA;;EAAA,QACZ7jB,OAAAA,CAAAA,sBAAAA,GAAAA,CAAAA,sBAAAA,GAAAA,QAAQ,CAACwJ,QAAT,EAAA,CAAoBsY,OADR,KACZ,IAAA,GAAA,KAAA,CAAA,GAAA,sBAAA,CAA6BhY,SAA7B,CAAuC1J,CAAC,IAAIA,CAAC,CAACmD,EAAF,KAASD,MAAM,CAACC,EAA5D,CADY,KACuD,IAAA,GAAA,sBAAA,GAAA,CAAC,CADxD,CAAA;EAAA,OAlLT;EAqLLugB,MAAAA,YAAY,EAAE,MAAM;EAClB;EACA9jB,QAAAA,QAAQ,CAAC6iB,UAAT,CAAoB3iB,GAAG,IACrBA,GAAG,IAAA,IAAH,IAAAA,GAAG,CAAEc,MAAL,GAAcd,GAAG,CAAC0T,MAAJ,CAAWxT,CAAC,IAAIA,CAAC,CAACmD,EAAF,KAASD,MAAM,CAACC,EAAhC,CAAd,GAAoD,EADtD,CAAA,CAAA;EAGD,OA1LI;EA4LLwgB,MAAAA,uBAAuB,EAAE,MAAM;EAC7B,QAAA,MAAMC,OAAO,GAAG1gB,MAAM,CAACkgB,UAAP,EAAhB,CAAA;EAEA,QAAA,OAAQxY,CAAD,IAAgB;EACrB,UAAI,IAAA,CAACgZ,OAAL,EAAc,OAAA;EACZhZ,UAAAA,CAAD,CAAWC,OAAX,IAACD,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,CAAD,CAAWC,OAAX,EAAA,CAAA;EACD3H,UAAAA,MAAM,CAACof,aAAP,IAAA,IAAA,GAAA,KAAA,CAAA,GAAApf,MAAM,CAACof,aAAP,CACE/d,SADF,EAEErB,MAAM,CAAC6f,eAAP,EAAA,GACInjB,QAAQ,CAACkD,OAAT,CAAiB+e,gBADrB,IAAA,IAAA,GAAA,KAAA,CAAA,GACIjiB,QAAQ,CAACkD,OAAT,CAAiB+e,gBAAjB,CAAoCjX,CAApC,CADJ,GAEI,KAJN,CAAA,CAAA;EAMD,SATD,CAAA;EAUD,OAAA;EAzMI,KAAP,CAAA;EA2MD,GA1OkC;EA4OnChI,EAAAA,cAAc,EACZhD,QADc,IAEiB;EAG/B,IAAO,OAAA;EACL6iB,MAAAA,UAAU,EAAEljB,OAAO,IAAIK,QAAQ,CAACkD,OAAT,CAAiB8e,eAArB,IAAA,IAAA,GAAA,KAAA,CAAA,GAAIhiB,QAAQ,CAACkD,OAAT,CAAiB8e,eAAjB,CAAmCriB,OAAnC,CADlB;EAELskB,MAAAA,YAAY,EAAEzX,YAAY,IAAI;EAAA,QAAA,IAAA,qBAAA,EAAA,sBAAA,CAAA;;EAC5BxM,QAAAA,QAAQ,CAAC6iB,UAAT,CACErW,YAAY,GAAG,EAAH,GAAQxM,CAAAA,qBAAAA,GAAAA,CAAAA,sBAAAA,GAAAA,QAAQ,CAACyM,YAAjB,KAAA,IAAA,GAAA,KAAA,CAAA,GAAQ,sBAAuBqV,CAAAA,OAA/B,oCAA0C,EADxD,CAAA,CAAA;EAGD,OANI;EAOLoC,MAAAA,oBAAoB,EAAE,MAAMlkB,QAAQ,CAAC+U,mBAAT,EAPvB;EAQL2C,MAAAA,iBAAiB,EAAE,MAAM;EACvB,QACE,IAAA,CAAC1X,QAAQ,CAACmkB,kBAAV,IACAnkB,QAAQ,CAACkD,OAAT,CAAiBwU,iBAFnB,EAGE;EACA1X,UAAAA,QAAQ,CAACmkB,kBAAT,GACEnkB,QAAQ,CAACkD,OAAT,CAAiBwU,iBAAjB,CAAmC1X,QAAnC,CADF,CAAA;EAED,SAAA;;EAED,QAAIA,IAAAA,QAAQ,CAACkD,OAAT,CAAiBkhB,aAAjB,IAAkC,CAACpkB,QAAQ,CAACmkB,kBAAhD,EAAoE;EAClE,UAAOnkB,OAAAA,QAAQ,CAACkkB,oBAAT,EAAP,CAAA;EACD,SAAA;;EAED,QAAOlkB,OAAAA,QAAQ,CAACmkB,kBAAT,EAAP,CAAA;EACD,OAAA;EAtBI,KAAP,CAAA;EAwBD,GAAA;EAzQkC;;ECnCrC;AAEO,QAAME,UAAwB,GAAG;EACtCvb,EAAAA,eAAe,EAAGC,KAAD,IAAiC;EAChD,IAAO,OAAA;EACLub,MAAAA,gBAAgB,EAAE,EADb;EAEL,MAAGvb,GAAAA,KAAAA;EAFE,KAAP,CAAA;EAID,GANqC;EAQtCG,EAAAA,iBAAiB,EACflJ,QADiB,IAEY;EAC7B,IAAO,OAAA;EACLukB,MAAAA,wBAAwB,EAAEzkB,gBAAgB,CAAC,kBAAD,EAAqBE,QAArB,CAAA;EADrC,KAAP,CAAA;EAGD,GAdqC;EAgBtCiD,EAAAA,gBAAgB,EAAE,MAAM;EACtB,IAAO,OAAA;EACLuhB,MAAAA,gBAAgB,EAAE,IAAA;EADb,KAAP,CAAA;EAGD,GApBqC;EAsBtClgB,EAAAA,YAAY,EAAE,CACZhB,MADY,EAEZtD,QAFY,KAGS;EACrB,IAAO,OAAA;EACLykB,MAAAA,gBAAgB,EAAEnS,KAAK,IAAI;EACzB,QAAA,IAAIhP,MAAM,CAACohB,UAAP,EAAJ,EAAyB;EACvB1kB,UAAAA,QAAQ,CAAC2kB,mBAAT,CAA6BzkB,GAAG,KAAK,EACnC,GAAGA,GADgC;EAEnC,YAACoD,CAAAA,MAAM,CAACC,EAAR,GAAa+O,KAAb,IAAaA,IAAAA,GAAAA,KAAb,GAAsB,CAAChP,MAAM,CAACshB,YAAP,EAAA;EAFY,WAAL,CAAhC,CAAA,CAAA;EAID,SAAA;EACF,OARI;EASLA,MAAAA,YAAY,EAAE,MAAM;EAAA,QAAA,IAAA,qBAAA,EAAA,sBAAA,CAAA;;EAClB,QAAA,OAAA,CAAA,qBAAA,GAAA,CAAA,sBAAA,GAAO5kB,QAAQ,CAACwJ,QAAT,EAAA,CAAoB8a,gBAA3B,KAAA,IAAA,GAAA,KAAA,CAAA,GAAO,sBAAuChhB,CAAAA,MAAM,CAACC,EAA9C,CAAP,KAAA,IAAA,GAAA,qBAAA,GAA4D,IAA5D,CAAA;EACD,OAXI;EAaLmhB,MAAAA,UAAU,EAAE,MAAM;EAAA,QAAA,IAAA,oBAAA,EAAA,qBAAA,CAAA;;EAChB,QAAA,OACE,CAACphB,CAAAA,oBAAAA,GAAAA,MAAM,CAACuhB,YAAR,mCAAwB,IAAxB,MAAA,CAAA,qBAAA,GACC7kB,QAAQ,CAACkD,OAAT,CAAiB2hB,YADlB,KAAA,IAAA,GAAA,qBAAA,GACkC,IADlC,CADF,CAAA;EAID,OAlBI;EAmBLC,MAAAA,0BAA0B,EAAE,MAAM;EAChC,QAAA,OAAQ9Z,CAAD,IAAgB;EACrB1H,UAAAA,MAAM,CAACmhB,gBAAP,IAAA,IAAA,GAAA,KAAA,CAAA,GAAAnhB,MAAM,CAACmhB,gBAAP,CACIzZ,CAAD,CAAkBgU,MAAnB,CAA+CC,OADjD,CAAA,CAAA;EAGD,SAJD,CAAA;EAKD,OAAA;EAzBI,KAAP,CAAA;EA2BD,GArDqC;EAuDtCzY,EAAAA,SAAS,EAAE,CACTF,GADS,EAETtG,QAFS,KAGoB;EAC7B,IAAO,OAAA;EACL2c,MAAAA,mBAAmB,EAAE1b,IAAI,CACvB,MAAM,CACJqF,GAAG,CACAiB,WADH,EAAA,CAEGqM,MAFH,CAEUnQ,IAAI,IAAIA,IAAI,CAACH,MAAL,CAAYshB,YAAZ,EAFlB,EAGGlf,GAHH,CAGOtF,CAAC,IAAIA,CAAC,CAACmD,EAHd,CAIGgD,CAAAA,IAJH,CAIQ,GAJR,CADI,CADiB,EAQvB2D,CAAC,IAAI;EACH,QAAA,OAAO5D,GAAG,CAACiB,WAAJ,EAAA,CAAkBqM,MAAlB,CAAyBnQ,IAAI,IAAIA,IAAI,CAACH,MAAL,CAAYshB,YAAZ,EAAjC,CAAP,CAAA;EACD,OAVsB,EAWvB;EACE7kB,QAAAA,GAAG,EACDmF,aAAA,KAAyB,YAAzB,CAFJ;EAGE1D,QAAAA,KAAK,EAAE,MAAA;EAAA,UAAA,IAAA,qBAAA,CAAA;;EAAA,UAAMxB,OAAAA,CAAAA,qBAAAA,GAAAA,QAAQ,CAACkD,OAAT,CAAiBgB,QAAvB,oCAAmClE,QAAQ,CAACkD,OAAT,CAAiBuE,SAApD,CAAA;EAAA,SAAA;EAHT,OAXuB,CADpB;EAkBLsd,MAAAA,eAAe,EAAE9jB,IAAI,CACnB,MAAM,CACJqF,GAAG,CAACuW,mBAAJ,EADI,EAEJvW,GAAG,CAACoW,qBAAJ,EAFI,EAGJpW,GAAG,CAACyW,oBAAJ,EAHI,CADa,EAMnB,CAACpB,IAAD,EAAOqJ,MAAP,EAAepJ,KAAf,KAAyB,CAAC,GAAGD,IAAJ,EAAU,GAAGqJ,MAAb,EAAqB,GAAGpJ,KAAxB,CANN,EAOnB;EACE7b,QAAAA,GAAG,EAA4C,qBADjD;EAEEyB,QAAAA,KAAK,EAAE,MAAA;EAAA,UAAA,IAAA,sBAAA,CAAA;;EAAA,UAAMxB,OAAAA,CAAAA,sBAAAA,GAAAA,QAAQ,CAACkD,OAAT,CAAiBgB,QAAvB,qCAAmClE,QAAQ,CAACkD,OAAT,CAAiBuE,SAApD,CAAA;EAAA,SAAA;EAFT,OAPmB,CAAA;EAlBhB,KAAP,CAAA;EA+BD,GA1FqC;EA4FtCzE,EAAAA,cAAc,EACZhD,QADc,IAEoB;EAClC,IAAA,MAAMilB,wBAAwB,GAAG,CAC/BllB,GAD+B,EAE/BmlB,UAF+B,KAGC;EAChC,MAAA,OAAOjkB,IAAI,CACT,MAAM,CACJikB,UAAU,EADN,EAEJA,UAAU,EAAA,CACPtR,MADH,CACUxT,CAAC,IAAIA,CAAC,CAACwkB,YAAF,EADf,CAAA,CAEGlf,GAFH,CAEOtF,CAAC,IAAIA,CAAC,CAACmD,EAFd,CAGGgD,CAAAA,IAHH,CAGQ,GAHR,CAFI,CADG,EAQTlC,OAAO,IAAI;EACT,QAAA,OAAOA,OAAO,CAACuP,MAAR,CAAexT,CAAC,IAAIA,CAAC,CAACwkB,YAAN,IAAIxkB,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,CAAC,CAACwkB,YAAF,EAApB,CAAP,CAAA;EACD,OAVQ,EAWT;EACE7kB,QAAAA,GADF;EAEEyB,QAAAA,KAAK,EAAE,MAAA;EAAA,UAAA,IAAA,sBAAA,CAAA;;EAAA,UACLxB,OAAAA,CAAAA,sBAAAA,GAAAA,QAAQ,CAACkD,OAAT,CAAiBgB,QADZ,qCACwBlE,QAAQ,CAACkD,OAAT,CAAiBiB,YADzC,CAAA;EAAA,SAAA;EAFT,OAXS,CAAX,CAAA;EAiBD,KArBD,CAAA;;EAuBA,IAAO,OAAA;EACLghB,MAAAA,qBAAqB,EAAEF,wBAAwB,CAC7C,uBAD6C,EAE7C,MAAMjlB,QAAQ,CAAC2F,iBAAT,EAFuC,CAD1C;EAKLgE,MAAAA,qBAAqB,EAAEsb,wBAAwB,CAC7C,uBAD6C,EAE7C,MAAMjlB,QAAQ,CAACgG,iBAAT,EAFuC,CAL1C;EASL4D,MAAAA,yBAAyB,EAAEqb,wBAAwB,CACjD,2BADiD,EAEjD,MAAMjlB,QAAQ,CAACkd,kBAAT,EAF2C,CAT9C;EAaLrT,MAAAA,0BAA0B,EAAEob,wBAAwB,CAClD,4BADkD,EAElD,MAAMjlB,QAAQ,CAACmd,mBAAT,EAF4C,CAb/C;EAiBLiI,MAAAA,2BAA2B,EAAEH,wBAAwB,CACnD,6BADmD,EAEnD,MAAMjlB,QAAQ,CAACod,oBAAT,EAF6C,CAjBhD;EAsBLuH,MAAAA,mBAAmB,EAAEhlB,OAAO,IAC1BK,QAAQ,CAACkD,OAAT,CAAiBqhB,wBADS,IAAA,IAAA,GAAA,KAAA,CAAA,GAC1BvkB,QAAQ,CAACkD,OAAT,CAAiBqhB,wBAAjB,CAA4C5kB,OAA5C,CAvBG;EAyBL0lB,MAAAA,qBAAqB,EAAE7Y,YAAY,IAAI;EAAA,QAAA,IAAA,qBAAA,CAAA;;EACrCxM,QAAAA,QAAQ,CAAC2kB,mBAAT,CACEnY,YAAY,GAAG,EAAH,GAAQxM,CAAAA,qBAAAA,GAAAA,QAAQ,CAACyM,YAAT,CAAsB6X,gBAA9B,oCAAkD,EADhE,CAAA,CAAA;EAGD,OA7BI;EA+BLgB,MAAAA,uBAAuB,EAAEhT,KAAK,IAAI;EAAA,QAAA,IAAA,MAAA,CAAA;;EAChCA,QAAAA,KAAK,aAAGA,KAAH,KAAA,IAAA,GAAA,MAAA,GAAY,CAACtS,QAAQ,CAACulB,sBAAT,EAAlB,CAAA;EAEAvlB,QAAAA,QAAQ,CAAC2kB,mBAAT,CACE3kB,QAAQ,CAACgG,iBAAT,EAAA,CAA6BnC,MAA7B,CACE,CAACC,GAAD,EAAMR,MAAN,MAAkB,EAChB,GAAGQ,GADa;EAEhB,UAAA,CAACR,MAAM,CAACC,EAAR,GAAa,CAAC+O,KAAD,GAAS,EAAChP,MAAM,CAACohB,UAAR,IAACphB,IAAAA,IAAAA,MAAM,CAACohB,UAAP,EAAD,CAAT,GAAkCpS,KAAAA;EAF/B,SAAlB,CADF,EAKE,EALF,CADF,CAAA,CAAA;EASD,OA3CI;EA6CLiT,MAAAA,sBAAsB,EAAE,MACtB,CAACvlB,QAAQ,CAACgG,iBAAT,EAA6BnE,CAAAA,IAA7B,CAAkCyB,MAAM,IAAI,EAACA,MAAM,CAACshB,YAAR,IAAA,IAAA,IAACthB,MAAM,CAACshB,YAAP,EAAD,CAA5C,CA9CE;EAgDLY,MAAAA,uBAAuB,EAAE,MACvBxlB,QAAQ,CAACgG,iBAAT,GAA6BnE,IAA7B,CAAkCyB,MAAM,IAAIA,MAAM,CAACshB,YAAX,IAAA,IAAA,GAAA,KAAA,CAAA,GAAIthB,MAAM,CAACshB,YAAP,EAA5C,CAjDG;EAmDLa,MAAAA,oCAAoC,EAAE,MAAM;EAC1C,QAAA,OAAQza,CAAD,IAAgB;EAAA,UAAA,IAAA,OAAA,CAAA;;EACrBhL,UAAAA,QAAQ,CAACslB,uBAAT,CAAA,CAAA,OAAA,GACIta,CAAD,CAAkBgU,MADrB,KACE,IAAA,GAAA,KAAA,CAAA,GAAA,OAAA,CAAgDC,OADlD,CAAA,CAAA;EAGD,SAJD,CAAA;EAKD,OAAA;EAzDI,KAAP,CAAA;EA2DD,GAAA;EAjLqC;;EClBxC;AAEO,QAAMyG,OAAO,GAAG;EACrB1iB,EAAAA,cAAc,EACZhD,QADc,IAEiB;EAC/B,IAAO,OAAA;EACLwK,MAAAA,YAAY,EAAE,CACZlH,MADY,EAEZJ,OAFY,KAST;EAAA,QAAA,IAAA,WAAA,CAAA;;EACH,QAAMK,MAAAA,EAAE,kBAAGL,OAAO,CAACK,EAAX,KAAiBD,IAAAA,GAAAA,WAAAA,GAAAA,MAAM,CAACC,EAAhC,CAAA;EAEA,QAAA,IAAIH,MAA6B,GAAG;EAClCG,UAAAA,EADkC;EAElCD,UAAAA,MAFkC;EAGlCvB,UAAAA,KAAK,EAAEmB,OAAO,CAACnB,KAHmB;EAIlC4jB,UAAAA,aAAa,EAAEziB,OAAO,CAACyiB,aAJW;EAKlCC,UAAAA,aAAa,EAAE1iB,OAAO,CAAC0iB,aALW;EAMlCphB,UAAAA,KAAK,EAAEtB,OAAO,CAACsB,KANmB;EAOlCkG,UAAAA,UAAU,EAAE,EAPsB;EAQlCmb,UAAAA,OAAO,EAAE,CARyB;EASlCC,UAAAA,OAAO,EAAE,CATyB;EAUlClb,UAAAA,WAAW,EAAE,IAVqB;EAWlCQ,UAAAA,cAAc,EAAE,MAA2B;EACzC,YAAM2a,MAAAA,WAAoC,GAAG,EAA7C,CAAA;;EAEA,YAAMC,MAAAA,aAAa,GAAIC,CAAD,IAA8B;EAClD,cAAIA,IAAAA,CAAC,CAACvb,UAAF,IAAgBub,CAAC,CAACvb,UAAF,CAAa1J,MAAjC,EAAyC;EACvCilB,gBAAAA,CAAC,CAACvb,UAAF,CAAahF,GAAb,CAAiBsgB,aAAjB,CAAA,CAAA;EACD,eAAA;;EACDD,cAAAA,WAAW,CAACjlB,IAAZ,CAAiBmlB,CAAjB,CAAA,CAAA;EACD,aALD,CAAA;;EAOAD,YAAAA,aAAa,CAAC5iB,MAAD,CAAb,CAAA;EAEA,YAAA,OAAO2iB,WAAP,CAAA;EACD,WAxBiC;EAyBlCG,UAAAA,YAAY,EAAE,MACZ5iB,MAAM,CAACF,MAAP,GACIpD,QAAQ,CAAC8H,OAAT,CAAiBxE,MAAM,CAACF,MAAxB,EAAgC;EAC9BpD,YAAAA,QAD8B;EAE9BoD,YAAAA,MAAM,EAAEA,MAFsB;EAG9BE,YAAAA,MAAAA;EAH8B,WAAhC,CADJ,GAMI,IAhC4B;EAiClC6iB,UAAAA,YAAY,EAAE,MACZ7iB,MAAM,CAACE,MAAP,GACIxD,QAAQ,CAAC8H,OAAT,CAAiBxE,MAAM,CAACE,MAAxB,EAAgC;EAC9BxD,YAAAA,QAD8B;EAE9BoD,YAAAA,MAAM,EAAEA,MAFsB;EAG9BE,YAAAA,MAAAA;EAH8B,WAAhC,CADJ,GAMI,IAAA;EAxC4B,SAApC,CAAA;;EA2CAtD,QAAAA,QAAQ,CAAC4D,SAAT,CAAmBhD,OAAnB,CAA2BmD,OAAO,IAAI;EACpCC,UAAAA,MAAM,CAACC,MAAP,CAAcb,MAAd,EAAsBW,OAAO,CAACyG,YAA9B,IAAA,IAAA,GAAA,KAAA,CAAA,GAAsBzG,OAAO,CAACyG,YAAR,CAAuBpH,MAAvB,EAA+BpD,QAA/B,CAAtB,CAAA,CAAA;EACD,SAFD,CAAA,CAAA;;EAIA,QAAA,OAAOoD,MAAP,CAAA;EACD,OA7DI;EA+DL;EAEAwJ,MAAAA,eAAe,EAAE3L,IAAI,CACnB,MAAM,CACJjB,QAAQ,CAACuF,aAAT,EADI,EAEJvF,QAAQ,CAAC2J,qBAAT,EAFI,EAGJ3J,QAAQ,CAACwJ,QAAT,EAAA,CAAoBsS,aAApB,CAAkCH,IAH9B,EAIJ3b,QAAQ,CAACwJ,QAAT,EAAA,CAAoBsS,aAApB,CAAkCF,KAJ9B,CADa,EAOnB,CAAChW,UAAD,EAAaN,WAAb,EAA0BqW,IAA1B,EAAgCC,KAAhC,KAA0C;EAAA,QAAA,IAAA,gBAAA,EAAA,iBAAA,CAAA;;EACxC,QAAA,MAAMwK,WAAW,GAAA,CAAA,gBAAA,GACfzK,IADe,IAAA,IAAA,GAAA,KAAA,CAAA,GACfA,IAAI,CACAjW,GADJ,CACQQ,QAAQ,IAAIZ,WAAW,CAACgO,IAAZ,CAAiBlT,CAAC,IAAIA,CAAC,CAACmD,EAAF,KAAS2C,QAA/B,CADpB,CAEG0N,CAAAA,MAFH,CAEU/E,OAFV,CADe,KAAA,IAAA,GAAA,gBAAA,GAGO,EAHxB,CAAA;EAKA,QAAA,MAAMwX,YAAY,GAAA,CAAA,iBAAA,GAChBzK,KADgB,IAAA,IAAA,GAAA,KAAA,CAAA,GAChBA,KAAK,CACDlW,GADJ,CACQQ,QAAQ,IAAIZ,WAAW,CAACgO,IAAZ,CAAiBlT,CAAC,IAAIA,CAAC,CAACmD,EAAF,KAAS2C,QAA/B,CADpB,CAEG0N,CAAAA,MAFH,CAEU/E,OAFV,CADgB,KAAA,IAAA,GAAA,iBAAA,GAGM,EAHxB,CAAA;EAKA,QAAA,MAAMyX,aAAa,GAAGhhB,WAAW,CAACsO,MAAZ,CACpBtQ,MAAM,IAAI,EAACqY,IAAD,IAAA,IAAA,IAACA,IAAI,CAAErL,QAAN,CAAehN,MAAM,CAACC,EAAtB,CAAD,CAAA,IAA8B,EAACqY,KAAD,YAACA,KAAK,CAAEtL,QAAP,CAAgBhN,MAAM,CAACC,EAAvB,CAAD,CADpB,CAAtB,CAAA;EAIA,QAAA,MAAMgjB,YAAY,GAAGC,iBAAiB,CACpC5gB,UADoC,EAEpC,CAAC,GAAGwgB,WAAJ,EAAiB,GAAGE,aAApB,EAAmC,GAAGD,YAAtC,CAFoC,EAGpCrmB,QAHoC,CAAtC,CAAA;EAMA,QAAA,OAAOumB,YAAP,CAAA;EACD,OA7BkB,EA8BnB;EACExmB,QAAAA,GAAG,EAA4C,iBADjD;EAEEyB,QAAAA,KAAK,EAAE,MAAA;EAAA,UAAA,IAAA,qBAAA,CAAA;;EAAA,UACLxB,OAAAA,CAAAA,qBAAAA,GAAAA,QAAQ,CAACkD,OAAT,CAAiBgB,QADZ,oCACwBlE,QAAQ,CAACkD,OAAT,CAAiBujB,YADzC,CAAA;EAAA,SAAA;EAFT,OA9BmB,CAjEhB;EAsGLzZ,MAAAA,qBAAqB,EAAE/L,IAAI,CACzB,MAAM,CACJjB,QAAQ,CAACuF,aAAT,EADI,EAEJvF,QAAQ,CAAC2J,qBAAT,EAFI,EAGJ3J,QAAQ,CAACwJ,QAAT,EAAA,CAAoBsS,aAApB,CAAkCH,IAH9B,EAIJ3b,QAAQ,CAACwJ,QAAT,EAAA,CAAoBsS,aAApB,CAAkCF,KAJ9B,CADmB,EAOzB,CAAChW,UAAD,EAAaN,WAAb,EAA0BqW,IAA1B,EAAgCC,KAAhC,KAA0C;EACxCtW,QAAAA,WAAW,GAAGA,WAAW,CAACsO,MAAZ,CACZtQ,MAAM,IAAI,EAACqY,IAAD,IAAA,IAAA,IAACA,IAAI,CAAErL,QAAN,CAAehN,MAAM,CAACC,EAAtB,CAAD,CAAA,IAA8B,EAACqY,KAAD,YAACA,KAAK,CAAEtL,QAAP,CAAgBhN,MAAM,CAACC,EAAvB,CAAD,CAD5B,CAAd,CAAA;EAGA,QAAOijB,OAAAA,iBAAiB,CAAC5gB,UAAD,EAAaN,WAAb,EAA0BtF,QAA1B,EAAoC,QAApC,CAAxB,CAAA;EACD,OAZwB,EAazB;EACED,QAAAA,GAAG,EACyC,uBAF9C;EAGEyB,QAAAA,KAAK,EAAE,MAAA;EAAA,UAAA,IAAA,sBAAA,CAAA;;EAAA,UACLxB,OAAAA,CAAAA,sBAAAA,GAAAA,QAAQ,CAACkD,OAAT,CAAiBgB,QADZ,qCACwBlE,QAAQ,CAACkD,OAAT,CAAiBujB,YADzC,CAAA;EAAA,SAAA;EAHT,OAbyB,CAtGtB;EA2HL3Z,MAAAA,mBAAmB,EAAE7L,IAAI,CACvB,MAAM,CACJjB,QAAQ,CAACuF,aAAT,EADI,EAEJvF,QAAQ,CAAC2J,qBAAT,EAFI,EAGJ3J,QAAQ,CAACwJ,QAAT,EAAoBsS,CAAAA,aAApB,CAAkCH,IAH9B,CADiB,EAMvB,CAAC/V,UAAD,EAAaN,WAAb,EAA0BqW,IAA1B,KAAmC;EAAA,QAAA,IAAA,iBAAA,CAAA;;EACjC,QAAA,MAAM+K,kBAAkB,GAAA,CAAA,iBAAA,GACtB/K,IADsB,IAAA,IAAA,GAAA,KAAA,CAAA,GACtBA,IAAI,CACAjW,GADJ,CACQQ,QAAQ,IAAIZ,WAAW,CAACgO,IAAZ,CAAiBlT,CAAC,IAAIA,CAAC,CAACmD,EAAF,KAAS2C,QAA/B,CADpB,CAEG0N,CAAAA,MAFH,CAEU/E,OAFV,CADsB,KAAA,IAAA,GAAA,iBAAA,GAGA,EAHxB,CAAA;EAKA,QAAO2X,OAAAA,iBAAiB,CACtB5gB,UADsB,EAEtB8gB,kBAFsB,EAGtB1mB,QAHsB,EAItB,MAJsB,CAAxB,CAAA;EAMD,OAlBsB,EAmBvB;EACED,QAAAA,GAAG,EAA4C,qBADjD;EAEEyB,QAAAA,KAAK,EAAE,MAAA;EAAA,UAAA,IAAA,sBAAA,CAAA;;EAAA,UACLxB,OAAAA,CAAAA,sBAAAA,GAAAA,QAAQ,CAACkD,OAAT,CAAiBgB,QADZ,qCACwBlE,QAAQ,CAACkD,OAAT,CAAiBujB,YADzC,CAAA;EAAA,SAAA;EAFT,OAnBuB,CA3HpB;EAqJLvZ,MAAAA,oBAAoB,EAAEjM,IAAI,CACxB,MAAM,CACJjB,QAAQ,CAACuF,aAAT,EADI,EAEJvF,QAAQ,CAAC2J,qBAAT,EAFI,EAGJ3J,QAAQ,CAACwJ,QAAT,EAAoBsS,CAAAA,aAApB,CAAkCF,KAH9B,CADkB,EAMxB,CAAChW,UAAD,EAAaN,WAAb,EAA0BsW,KAA1B,KAAoC;EAAA,QAAA,IAAA,kBAAA,CAAA;;EAClC,QAAA,MAAM8K,kBAAkB,GAAA,CAAA,kBAAA,GACtB9K,KADsB,IAAA,IAAA,GAAA,KAAA,CAAA,GACtBA,KAAK,CACDlW,GADJ,CACQQ,QAAQ,IAAIZ,WAAW,CAACgO,IAAZ,CAAiBlT,CAAC,IAAIA,CAAC,CAACmD,EAAF,KAAS2C,QAA/B,CADpB,CAEG0N,CAAAA,MAFH,CAEU/E,OAFV,CADsB,KAAA,IAAA,GAAA,kBAAA,GAGA,EAHxB,CAAA;EAKA,QAAO2X,OAAAA,iBAAiB,CACtB5gB,UADsB,EAEtB8gB,kBAFsB,EAGtB1mB,QAHsB,EAItB,OAJsB,CAAxB,CAAA;EAMD,OAlBuB,EAmBxB;EACED,QAAAA,GAAG,EAA4C,sBADjD;EAEEyB,QAAAA,KAAK,EAAE,MAAA;EAAA,UAAA,IAAA,sBAAA,CAAA;;EAAA,UACLxB,OAAAA,CAAAA,sBAAAA,GAAAA,QAAQ,CAACkD,OAAT,CAAiBgB,QADZ,qCACwBlE,QAAQ,CAACkD,OAAT,CAAiBujB,YADzC,CAAA;EAAA,SAAA;EAFT,OAnBwB,CArJrB;EA+KL;EAEAE,MAAAA,eAAe,EAAE1lB,IAAI,CACnB,MAAM,CAACjB,QAAQ,CAAC4M,eAAT,EAAD,CADa,EAEnB2Z,YAAY,IAAI;EACd,QAAA,OAAO,CAAC,GAAGA,YAAJ,CAAA,CAAkBK,OAAlB,EAAP,CAAA;EACD,OAJkB,EAKnB;EACE7mB,QAAAA,GAAG,EAA4C,iBADjD;EAEEyB,QAAAA,KAAK,EAAE,MAAA;EAAA,UAAA,IAAA,sBAAA,CAAA;;EAAA,UACLxB,OAAAA,CAAAA,sBAAAA,GAAAA,QAAQ,CAACkD,OAAT,CAAiBgB,QADZ,qCACwBlE,QAAQ,CAACkD,OAAT,CAAiBujB,YADzC,CAAA;EAAA,SAAA;EAFT,OALmB,CAjLhB;EA6LLI,MAAAA,mBAAmB,EAAE5lB,IAAI,CACvB,MAAM,CAACjB,QAAQ,CAAC8M,mBAAT,EAAD,CADiB,EAEvByZ,YAAY,IAAI;EACd,QAAA,OAAO,CAAC,GAAGA,YAAJ,CAAA,CAAkBK,OAAlB,EAAP,CAAA;EACD,OAJsB,EAKvB;EACE7mB,QAAAA,GAAG,EAA4C,qBADjD;EAEEyB,QAAAA,KAAK,EAAE,MAAA;EAAA,UAAA,IAAA,sBAAA,CAAA;;EAAA,UACLxB,OAAAA,CAAAA,sBAAAA,GAAAA,QAAQ,CAACkD,OAAT,CAAiBgB,QADZ,qCACwBlE,QAAQ,CAACkD,OAAT,CAAiBujB,YADzC,CAAA;EAAA,SAAA;EAFT,OALuB,CA7LpB;EAyMLK,MAAAA,qBAAqB,EAAE7lB,IAAI,CACzB,MAAM,CAACjB,QAAQ,CAACgN,qBAAT,EAAD,CADmB,EAEzBuZ,YAAY,IAAI;EACd,QAAA,OAAO,CAAC,GAAGA,YAAJ,CAAA,CAAkBK,OAAlB,EAAP,CAAA;EACD,OAJwB,EAKzB;EACE7mB,QAAAA,GAAG,EACyC,uBAF9C;EAGEyB,QAAAA,KAAK,EAAE,MAAA;EAAA,UAAA,IAAA,sBAAA,CAAA;;EAAA,UACLxB,OAAAA,CAAAA,sBAAAA,GAAAA,QAAQ,CAACkD,OAAT,CAAiBgB,QADZ,qCACwBlE,QAAQ,CAACkD,OAAT,CAAiBujB,YADzC,CAAA;EAAA,SAAA;EAHT,OALyB,CAzMtB;EAsNLM,MAAAA,oBAAoB,EAAE9lB,IAAI,CACxB,MAAM,CAACjB,QAAQ,CAACkN,oBAAT,EAAD,CADkB,EAExBqZ,YAAY,IAAI;EACd,QAAA,OAAO,CAAC,GAAGA,YAAJ,CAAA,CAAkBK,OAAlB,EAAP,CAAA;EACD,OAJuB,EAKxB;EACE7mB,QAAAA,GAAG,EAA4C,sBADjD;EAEEyB,QAAAA,KAAK,EAAE,MAAA;EAAA,UAAA,IAAA,sBAAA,CAAA;;EAAA,UACLxB,OAAAA,CAAAA,sBAAAA,GAAAA,QAAQ,CAACkD,OAAT,CAAiBgB,QADZ,qCACwBlE,QAAQ,CAACkD,OAAT,CAAiBujB,YADzC,CAAA;EAAA,SAAA;EAFT,OALwB,CAtNrB;EAkOL;EAEAO,MAAAA,cAAc,EAAE/lB,IAAI,CAClB,MAAM,CAACjB,QAAQ,CAAC4M,eAAT,EAAD,CADY,EAElB2Z,YAAY,IAAI;EACd,QAAA,OAAOA,YAAY,CAChB7gB,GADI,CACAkF,WAAW,IAAI;EAClB,UAAOA,OAAAA,WAAW,CAACC,OAAnB,CAAA;EACD,SAHI,CAAA,CAIJpK,IAJI,EAAP,CAAA;EAKD,OARiB,EASlB;EACEV,QAAAA,GAAG,EAA4C,gBADjD;EAEEyB,QAAAA,KAAK,EAAE,MAAA;EAAA,UAAA,IAAA,sBAAA,CAAA;;EAAA,UACLxB,OAAAA,CAAAA,sBAAAA,GAAAA,QAAQ,CAACkD,OAAT,CAAiBgB,QADZ,qCACwBlE,QAAQ,CAACkD,OAAT,CAAiBujB,YADzC,CAAA;EAAA,SAAA;EAFT,OATkB,CApOf;EAoPLQ,MAAAA,kBAAkB,EAAEhmB,IAAI,CACtB,MAAM,CAACjB,QAAQ,CAAC8M,mBAAT,EAAD,CADgB,EAEtB6O,IAAI,IAAI;EACN,QAAA,OAAOA,IAAI,CACRjW,GADI,CACAkF,WAAW,IAAI;EAClB,UAAOA,OAAAA,WAAW,CAACC,OAAnB,CAAA;EACD,SAHI,CAAA,CAIJpK,IAJI,EAAP,CAAA;EAKD,OARqB,EAStB;EACEV,QAAAA,GAAG,EAA4C,oBADjD;EAEEyB,QAAAA,KAAK,EAAE,MAAA;EAAA,UAAA,IAAA,uBAAA,CAAA;;EAAA,UACLxB,OAAAA,CAAAA,uBAAAA,GAAAA,QAAQ,CAACkD,OAAT,CAAiBgB,QADZ,sCACwBlE,QAAQ,CAACkD,OAAT,CAAiBujB,YADzC,CAAA;EAAA,SAAA;EAFT,OATsB,CApPnB;EAoQLS,MAAAA,oBAAoB,EAAEjmB,IAAI,CACxB,MAAM,CAACjB,QAAQ,CAACgN,qBAAT,EAAD,CADkB,EAExB2O,IAAI,IAAI;EACN,QAAA,OAAOA,IAAI,CACRjW,GADI,CACAkF,WAAW,IAAI;EAClB,UAAOA,OAAAA,WAAW,CAACC,OAAnB,CAAA;EACD,SAHI,CAAA,CAIJpK,IAJI,EAAP,CAAA;EAKD,OARuB,EASxB;EACEV,QAAAA,GAAG,EAA4C,sBADjD;EAEEyB,QAAAA,KAAK,EAAE,MAAA;EAAA,UAAA,IAAA,uBAAA,CAAA;;EAAA,UACLxB,OAAAA,CAAAA,uBAAAA,GAAAA,QAAQ,CAACkD,OAAT,CAAiBgB,QADZ,sCACwBlE,QAAQ,CAACkD,OAAT,CAAiBujB,YADzC,CAAA;EAAA,SAAA;EAFT,OATwB,CApQrB;EAoRLU,MAAAA,mBAAmB,EAAElmB,IAAI,CACvB,MAAM,CAACjB,QAAQ,CAACkN,oBAAT,EAAD,CADiB,EAEvByO,IAAI,IAAI;EACN,QAAA,OAAOA,IAAI,CACRjW,GADI,CACAkF,WAAW,IAAI;EAClB,UAAOA,OAAAA,WAAW,CAACC,OAAnB,CAAA;EACD,SAHI,CAAA,CAIJpK,IAJI,EAAP,CAAA;EAKD,OARsB,EASvB;EACEV,QAAAA,GAAG,EAA4C,qBADjD;EAEEyB,QAAAA,KAAK,EAAE,MAAA;EAAA,UAAA,IAAA,uBAAA,CAAA;;EAAA,UACLxB,OAAAA,CAAAA,uBAAAA,GAAAA,QAAQ,CAACkD,OAAT,CAAiBgB,QADZ,sCACwBlE,QAAQ,CAACkD,OAAT,CAAiBujB,YADzC,CAAA;EAAA,SAAA;EAFT,OATuB,CApRpB;EAoSL;EAEAW,MAAAA,oBAAoB,EAAEnmB,IAAI,CACxB,MAAM,CAACjB,QAAQ,CAACknB,oBAAT,EAAD,CADkB,EAExBG,WAAW,IAAI;EACb,QAAA,OAAOA,WAAW,CAACzT,MAAZ,CAAmBxQ,MAAM,IAAA;EAAA,UAAA,IAAA,kBAAA,CAAA;;EAAA,UAAA,OAAI,wBAACA,MAAM,CAACsH,UAAR,KAAC,IAAA,IAAA,kBAAA,CAAmB1J,MAApB,CAAJ,CAAA;EAAA,SAAzB,CAAP,CAAA;EACD,OAJuB,EAKxB;EACEjB,QAAAA,GAAG,EAA4C,sBADjD;EAEEyB,QAAAA,KAAK,EAAE,MAAA;EAAA,UAAA,IAAA,uBAAA,CAAA;;EAAA,UACLxB,OAAAA,CAAAA,uBAAAA,GAAAA,QAAQ,CAACkD,OAAT,CAAiBgB,QADZ,sCACwBlE,QAAQ,CAACkD,OAAT,CAAiBujB,YADzC,CAAA;EAAA,SAAA;EAFT,OALwB,CAtSrB;EAkTLa,MAAAA,kBAAkB,EAAErmB,IAAI,CACtB,MAAM,CAACjB,QAAQ,CAACinB,kBAAT,EAAD,CADgB,EAEtBI,WAAW,IAAI;EACb,QAAA,OAAOA,WAAW,CAACzT,MAAZ,CAAmBxQ,MAAM,IAAA;EAAA,UAAA,IAAA,mBAAA,CAAA;;EAAA,UAAA,OAAI,yBAACA,MAAM,CAACsH,UAAR,KAAC,IAAA,IAAA,mBAAA,CAAmB1J,MAApB,CAAJ,CAAA;EAAA,SAAzB,CAAP,CAAA;EACD,OAJqB,EAKtB;EACEjB,QAAAA,GAAG,EAA4C,oBADjD;EAEEyB,QAAAA,KAAK,EAAE,MAAA;EAAA,UAAA,IAAA,uBAAA,CAAA;;EAAA,UACLxB,OAAAA,CAAAA,uBAAAA,GAAAA,QAAQ,CAACkD,OAAT,CAAiBgB,QADZ,sCACwBlE,QAAQ,CAACkD,OAAT,CAAiBujB,YADzC,CAAA;EAAA,SAAA;EAFT,OALsB,CAlTnB;EA8TLc,MAAAA,mBAAmB,EAAEtmB,IAAI,CACvB,MAAM,CAACjB,QAAQ,CAACmnB,mBAAT,EAAD,CADiB,EAEvBE,WAAW,IAAI;EACb,QAAA,OAAOA,WAAW,CAACzT,MAAZ,CAAmBxQ,MAAM,IAAA;EAAA,UAAA,IAAA,mBAAA,CAAA;;EAAA,UAAA,OAAI,yBAACA,MAAM,CAACsH,UAAR,KAAC,IAAA,IAAA,mBAAA,CAAmB1J,MAApB,CAAJ,CAAA;EAAA,SAAzB,CAAP,CAAA;EACD,OAJsB,EAKvB;EACEjB,QAAAA,GAAG,EAA4C,qBADjD;EAEEyB,QAAAA,KAAK,EAAE,MAAA;EAAA,UAAA,IAAA,uBAAA,CAAA;;EAAA,UACLxB,OAAAA,CAAAA,uBAAAA,GAAAA,QAAQ,CAACkD,OAAT,CAAiBgB,QADZ,sCACwBlE,QAAQ,CAACkD,OAAT,CAAiBujB,YADzC,CAAA;EAAA,SAAA;EAFT,OALuB,CA9TpB;EA0ULrb,MAAAA,cAAc,EAAEnK,IAAI,CAClB,MAAM,CACJjB,QAAQ,CAAC8M,mBAAT,EADI,EAEJ9M,QAAQ,CAACgN,qBAAT,EAFI,EAGJhN,QAAQ,CAACkN,oBAAT,EAHI,CADY,EAMlB,CAACyO,IAAD,EAAOqJ,MAAP,EAAepJ,KAAf,KAAyB;EAAA,QAAA,IAAA,eAAA,EAAA,MAAA,EAAA,iBAAA,EAAA,QAAA,EAAA,gBAAA,EAAA,OAAA,CAAA;;EACvB,QAAA,OAAO,CACL,IAAID,CAAAA,eAAAA,GAAAA,CAAAA,MAAAA,GAAAA,IAAI,CAAC,CAAD,CAAR,qBAAI,MAAS9Q,CAAAA,OAAb,KAAwB,IAAA,GAAA,eAAA,GAAA,EAAxB,CADK,EAEL,IAAA,CAAA,iBAAA,GAAA,CAAA,QAAA,GAAIma,MAAM,CAAC,CAAD,CAAV,KAAI,IAAA,GAAA,KAAA,CAAA,GAAA,QAAA,CAAWna,OAAf,KAAA,IAAA,GAAA,iBAAA,GAA0B,EAA1B,CAFK,EAGL,mCAAI+Q,KAAK,CAAC,CAAD,CAAT,KAAA,IAAA,GAAA,KAAA,CAAA,GAAI,OAAU/Q,CAAAA,OAAd,+BAAyB,EAAzB,CAHK,EAKJnF,GALI,CAKAtC,MAAM,IAAI;EACb,UAAOA,OAAAA,MAAM,CAACgI,cAAP,EAAP,CAAA;EACD,SAPI,CAAA,CAQJ3K,IARI,EAAP,CAAA;EASD,OAhBiB,EAiBlB;EACEV,QAAAA,GAAG,EAA4C,gBADjD;EAEEyB,QAAAA,KAAK,EAAE,MAAA;EAAA,UAAA,IAAA,uBAAA,CAAA;;EAAA,UACLxB,OAAAA,CAAAA,uBAAAA,GAAAA,QAAQ,CAACkD,OAAT,CAAiBgB,QADZ,sCACwBlE,QAAQ,CAACkD,OAAT,CAAiBujB,YADzC,CAAA;EAAA,SAAA;EAFT,OAjBkB,CA1Uf;EAkWLe,MAAAA,SAAS,EAAGjkB,EAAD,IAAgB;EACzB,QAAA,MAAMH,MAAM,GAAG,CACb,GAAGpD,QAAQ,CAACgnB,cAAT,EADU,EAEb,GAAGhnB,QAAQ,CAACknB,oBAAT,EAFU,EAGb,GAAGlnB,QAAQ,CAACinB,kBAAT,EAHU,EAIb,GAAGjnB,QAAQ,CAACmnB,mBAAT,EAJU,CAKb7T,CAAAA,IALa,CAKRlT,CAAC,IAAIA,CAAC,CAACmD,EAAF,KAASA,EALN,CAAf,CAAA;;EAOA,QAAI,IAAA,CAACH,MAAL,EAAa;EACX,UAA2C;EACzCT,YAAAA,OAAO,CAACwD,IAAR,CAAA,iCAAA,GAA+C5C,EAA/C,CAAA,CAAA;EACD,WAAA;;EACD,UAAM,MAAA,IAAIuB,KAAJ,EAAN,CAAA;EACD,SAAA;;EAED,QAAA,OAAO1B,MAAP,CAAA;EACD,OAAA;EAlXI,KAAP,CAAA;EAoXD,GAAA;EAxXoB,EAAhB;EA2XA,SAASojB,iBAAT,CACL5gB,UADK,EAEL6hB,cAFK,EAGLznB,QAHK,EAIL0nB,YAJK,EAKL;EAAA,EAAA,IAAA,qBAAA,EAAA,cAAA,CAAA;;EACA;EACA;EACA;EACA;EACA;EAEA,EAAI1Y,IAAAA,QAAQ,GAAG,CAAf,CAAA;;EAEA,EAAA,MAAM2Y,YAAY,GAAG,UAACtjB,OAAD,EAA+BG,KAA/B,EAA6C;EAAA,IAAA,IAAdA,KAAc,KAAA,KAAA,CAAA,EAAA;EAAdA,MAAAA,KAAc,GAAN,CAAM,CAAA;EAAA,KAAA;;EAChEwK,IAAAA,QAAQ,GAAG7M,IAAI,CAACU,GAAL,CAASmM,QAAT,EAAmBxK,KAAnB,CAAX,CAAA;EAEAH,IAAAA,OAAO,CACJuP,MADH,CACUtQ,MAAM,IAAIA,MAAM,CAACshB,YAAP,EADpB,CAAA,CAEGhkB,OAFH,CAEW0C,MAAM,IAAI;EAAA,MAAA,IAAA,eAAA,CAAA;;EACjB,MAAA,IAAA,CAAA,eAAA,GAAIA,MAAM,CAACe,OAAX,KAAI,IAAA,IAAA,eAAA,CAAgBrD,MAApB,EAA4B;EAC1B2mB,QAAAA,YAAY,CAACrkB,MAAM,CAACe,OAAR,EAAiBG,KAAK,GAAG,CAAzB,CAAZ,CAAA;EACD,OAAA;EACF,KANH,EAMK,CANL,CAAA,CAAA;EAOD,GAVD,CAAA;;EAYAmjB,EAAAA,YAAY,CAAC/hB,UAAD,CAAZ,CAAA;EAEA,EAAI2gB,IAAAA,YAAsC,GAAG,EAA7C,CAAA;;EAEA,EAAA,MAAMqB,iBAAiB,GAAG,CACxBC,cADwB,EAExBrjB,KAFwB,KAGrB;EACH;EACA,IAAA,MAAMoG,WAAmC,GAAG;EAC1CpG,MAAAA,KAD0C;EAE1CjB,MAAAA,EAAE,EAAE,CAACmkB,YAAD,OAAkBljB,KAAlB,CAAA,CAA2BoP,MAA3B,CAAkC/E,OAAlC,CAAA,CAA2CtI,IAA3C,CAAgD,GAAhD,CAFsC;EAG1CsE,MAAAA,OAAO,EAAE,EAAA;EAHiC,KAA5C,CAFG;;EASH,IAAA,MAAMid,oBAAyC,GAAG,EAAlD,CATG;;EAYHD,IAAAA,cAAc,CAACjnB,OAAf,CAAuBmnB,aAAa,IAAI;EACtC;EAEA,MAAMC,MAAAA,yBAAyB,GAAG,CAAC,GAAGF,oBAAJ,CAA0BlB,CAAAA,OAA1B,EAAoC,CAAA,CAApC,CAAlC,CAAA;EAEA,MAAMqB,MAAAA,YAAY,GAAGF,aAAa,CAACzkB,MAAd,CAAqBkB,KAArB,KAA+BoG,WAAW,CAACpG,KAAhE,CAAA;EAEA,MAAA,IAAIlB,MAAJ,CAAA;EACA,MAAIqiB,IAAAA,aAAa,GAAG,KAApB,CAAA;;EAEA,MAAA,IAAIsC,YAAY,IAAIF,aAAa,CAACzkB,MAAd,CAAqBmB,MAAzC,EAAiD;EAC/C;EACAnB,QAAAA,MAAM,GAAGykB,aAAa,CAACzkB,MAAd,CAAqBmB,MAA9B,CAAA;EACD,OAHD,MAGO;EACL;EACAnB,QAAAA,MAAM,GAAGykB,aAAa,CAACzkB,MAAvB,CAAA;EACAqiB,QAAAA,aAAa,GAAG,IAAhB,CAAA;EACD,OAAA;;EAED,MAAI,IAAA,CAAAqC,yBAAyB,IAAzB,IAAA,GAAA,KAAA,CAAA,GAAAA,yBAAyB,CAAE1kB,MAA3B,MAAsCA,MAA1C,EAAkD;EAChD;EACA0kB,QAAAA,yBAAyB,CAACtd,UAA1B,CAAqC5J,IAArC,CAA0CinB,aAA1C,CAAA,CAAA;EACD,OAHD,MAGO;EACL;EACA,QAAA,MAAM3kB,MAAM,GAAGpD,QAAQ,CAACwK,YAAT,CAAsBlH,MAAtB,EAA8B;EAC3CC,UAAAA,EAAE,EAAE,CAACmkB,YAAD,EAAeljB,KAAf,EAAsBlB,MAAM,CAACC,EAA7B,EAAiCwkB,aAAjC,oBAAiCA,aAAa,CAAExkB,EAAhD,CAAA,CACDqQ,MADC,CACM/E,OADN,CAEDtI,CAAAA,IAFC,CAEI,GAFJ,CADuC;EAI3Cof,UAAAA,aAJ2C;EAK3CC,UAAAA,aAAa,EAAED,aAAa,QACrBmC,oBAAoB,CAAClU,MAArB,CAA4BxT,CAAC,IAAIA,CAAC,CAACkD,MAAF,KAAaA,MAA9C,CAAsDtC,CAAAA,MADjC,GAExB2D,SAPuC;EAQ3CH,UAAAA,KAR2C;EAS3CzC,UAAAA,KAAK,EAAE+lB,oBAAoB,CAAC9mB,MAAAA;EATe,SAA9B,CAAf,CAFK;;EAeLoC,QAAAA,MAAM,CAACsH,UAAP,CAAkB5J,IAAlB,CAAuBinB,aAAvB,EAfK;EAiBL;;EACAD,QAAAA,oBAAoB,CAAChnB,IAArB,CAA0BsC,MAA1B,CAAA,CAAA;EACD,OAAA;;EAEDwH,MAAAA,WAAW,CAACC,OAAZ,CAAoB/J,IAApB,CAAyBinB,aAAzB,CAAA,CAAA;EACAA,MAAAA,aAAa,CAACnd,WAAd,GAA4BA,WAA5B,CAAA;EACD,KA7CD,CAAA,CAAA;EA+CA2b,IAAAA,YAAY,CAACzlB,IAAb,CAAkB8J,WAAlB,CAAA,CAAA;;EAEA,IAAIpG,IAAAA,KAAK,GAAG,CAAZ,EAAe;EACbojB,MAAAA,iBAAiB,CAACE,oBAAD,EAAuBtjB,KAAK,GAAG,CAA/B,CAAjB,CAAA;EACD,KAAA;EACF,GAnED,CAAA;;EAqEA,EAAA,MAAM0jB,aAAa,GAAGT,cAAc,CAAC/hB,GAAf,CAAmB,CAACpC,MAAD,EAASvB,KAAT,KACvC/B,QAAQ,CAACwK,YAAT,CAAsBlH,MAAtB,EAA8B;EAC5BkB,IAAAA,KAAK,EAAEwK,QADqB;EAE5BjN,IAAAA,KAAAA;EAF4B,GAA9B,CADoB,CAAtB,CAAA;EAOA6lB,EAAAA,iBAAiB,CAACM,aAAD,EAAgBlZ,QAAQ,GAAG,CAA3B,CAAjB,CAAA;EAEAuX,EAAAA,YAAY,CAACK,OAAb,EAAA,CAvGA;EA0GA;EACA;;EAEA,EAAMuB,MAAAA,sBAAsB,GAAItd,OAAD,IAAkC;EAC/D,IAAA,MAAMud,eAAe,GAAGvd,OAAO,CAAC+I,MAAR,CAAexQ,MAAM,IAC3CA,MAAM,CAACE,MAAP,CAAcshB,YAAd,EADsB,CAAxB,CAAA;EAIA,IAAA,OAAOwD,eAAe,CAAC1iB,GAAhB,CAAoBtC,MAAM,IAAI;EACnC,MAAIyiB,IAAAA,OAAO,GAAG,CAAd,CAAA;EACA,MAAIC,IAAAA,OAAO,GAAG,CAAd,CAAA;EACA,MAAA,IAAIuC,aAAa,GAAG,CAAC,CAAD,CAApB,CAAA;;EAEA,MAAIjlB,IAAAA,MAAM,CAACsH,UAAP,IAAqBtH,MAAM,CAACsH,UAAP,CAAkB1J,MAA3C,EAAmD;EACjDqnB,QAAAA,aAAa,GAAG,EAAhB,CAAA;EAEAF,QAAAA,sBAAsB,CAAC/kB,MAAM,CAACsH,UAAR,CAAtB,CAA0C9J,OAA1C,CACE,IAAsD,IAAA;EAAA,UAArD,IAAA;EAAEilB,YAAAA,OAAO,EAAEyC,YAAX;EAAyBxC,YAAAA,OAAO,EAAEyC,YAAAA;EAAlC,WAAqD,GAAA,IAAA,CAAA;EACpD1C,UAAAA,OAAO,IAAIyC,YAAX,CAAA;EACAD,UAAAA,aAAa,CAACvnB,IAAd,CAAmBynB,YAAnB,CAAA,CAAA;EACD,SAJH,CAAA,CAAA;EAMD,OATD,MASO;EACL1C,QAAAA,OAAO,GAAG,CAAV,CAAA;EACD,OAAA;;EAED,MAAM2C,MAAAA,eAAe,GAAGrmB,IAAI,CAACW,GAAL,CAAS,GAAGulB,aAAZ,CAAxB,CAAA;EACAvC,MAAAA,OAAO,GAAGA,OAAO,GAAG0C,eAApB,CAAA;EAEAplB,MAAAA,MAAM,CAACyiB,OAAP,GAAiBA,OAAO,GAAG,CAAV,GAAcA,OAAd,GAAwBlhB,SAAzC,CAAA;EACAvB,MAAAA,MAAM,CAAC0iB,OAAP,GAAiBA,OAAO,GAAG,CAAV,GAAcA,OAAd,GAAwBnhB,SAAzC,CAAA;EAEA,MAAO,OAAA;EAAEkhB,QAAAA,OAAF;EAAWC,QAAAA,OAAAA;EAAX,OAAP,CAAA;EACD,KAzBM,CAAP,CAAA;EA0BD,GA/BD,CAAA;;EAiCAqC,EAAAA,sBAAsB,CAAC5B,CAAAA,qBAAAA,GAAAA,CAAAA,cAAAA,GAAAA,YAAY,CAAC,CAAD,CAAb,KAAA,IAAA,GAAA,KAAA,CAAA,GAAC,cAAiB1b,CAAAA,OAAlB,KAA6B,IAAA,GAAA,qBAAA,GAAA,EAA7B,CAAtB,CAAA;EAEA,EAAA,OAAO0b,YAAP,CAAA;EACD;;EClfD;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EAEO,SAASkC,mBAAT,CACLvlB,OADK,EAEqB;EAAA,EAAA,IAAA,qBAAA,CAAA;;EAC1B,EAAA,IAAIA,OAAO,CAACgB,QAAR,IAAoBhB,OAAO,CAAC8X,UAAhC,EAA4C;EAC1CrY,IAAAA,OAAO,CAACC,IAAR,CAAa,4BAAb,CAAA,CAAA;EACD,GAAA;;EAED,EAAA,IAAI5C,QAAQ,GAAG;EACb4D,IAAAA,SAAS,EAAE,CACTb,OADS,EAETqD,IAFS,EAGTkB,KAHS,EAIToe,OAJS,EAKTrB,UALS,EAMT7L,QANS,EAOTqD,OAPS,EAQThK,OARS,EASTgQ,OATS,EAUTxL,QAVS,EAWT7I,SAXS,EAYTiM,UAZS,EAaT4D,YAbS,EAcTxU,YAdS,CAAA;EADE,GAAf,CAAA;;EAmBA,EAAA,MAAM6f,cAAc,GAAG1oB,QAAQ,CAAC4D,SAAT,CAAmBC,MAAnB,CAA0B,CAACC,GAAD,EAAMC,OAAN,KAAkB;EACjE,IAAA,OAAOC,MAAM,CAACC,MAAP,CAAcH,GAAd,EAAmBC,OAAO,CAACmF,iBAA3B,IAAA,IAAA,GAAA,KAAA,CAAA,GAAmBnF,OAAO,CAACmF,iBAAR,CAA4BlJ,QAA5B,CAAnB,CAAP,CAAA;EACD,GAFsB,EAEpB,EAFoB,CAAvB,CAAA;;EAIA,EAAM2oB,MAAAA,YAAY,GAAIzlB,OAAD,IAAsC;EACzD,IAAA,IAAIlD,QAAQ,CAACkD,OAAT,CAAiBylB,YAArB,EAAmC;EACjC,MAAO3oB,OAAAA,QAAQ,CAACkD,OAAT,CAAiBylB,YAAjB,CAA8BD,cAA9B,EAA8CxlB,OAA9C,CAAP,CAAA;EACD,KAAA;;EAED,IAAO,OAAA,EACL,GAAGwlB,cADE;EAEL,MAAGxlB,GAAAA,OAAAA;EAFE,KAAP,CAAA;EAID,GATD,CAAA;;EAWA,EAAM0lB,MAAAA,gBAAgC,GAAG;EAAA,GAAzC,CAAA;EAIA,EAAA,IAAInc,YAAY,GAAG,EACjB,GAAGmc,gBADc;EAEjB,IAAA,IAAA,CAAA,qBAAA,GAAI1lB,OAAO,CAACuJ,YAAZ,KAAA,IAAA,GAAA,qBAAA,GAA4B,EAA5B,CAAA;EAFiB,GAAnB,CAAA;;EAKAzM,EAAAA,QAAQ,CAAC4D,SAAT,CAAmBhD,OAAnB,CAA2BmD,OAAO,IAAI;EAAA,IAAA,IAAA,qBAAA,CAAA;;EACpC0I,IAAAA,YAAY,GAAA,CAAA,qBAAA,GAAG1I,OAAO,CAAC+E,eAAX,IAAA,IAAA,GAAA,KAAA,CAAA,GAAG/E,OAAO,CAAC+E,eAAR,CAA0B2D,YAA1B,CAAH,oCAA8CA,YAA1D,CAAA;EACD,GAFD,CAAA,CAAA;;EAIA,EAAMsB,MAAAA,MAAsB,GAAG,EAA/B,CAAA;EACA,EAAI8a,IAAAA,aAAa,GAAG,KAApB,CAAA;EAEA,EAAA,MAAMC,WAAoC,GAAG,EAC3C,GAAG9oB,QADwC;EAE3C;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACAkD,IAAAA,OAAO,EAAE,EACP,GAAGwlB,cADI;EAEP,MAAGxlB,GAAAA,OAAAA;EAFI,KAXkC;EAe3CuJ,IAAAA,YAf2C;EAgB3CwB,IAAAA,MAAM,EAAE8a,EAAE,IAAI;EACZhb,MAAAA,MAAM,CAACjN,IAAP,CAAYioB,EAAZ,CAAA,CAAA;;EAEA,MAAI,IAAA,CAACF,aAAL,EAAoB;EAClBA,QAAAA,aAAa,GAAG,IAAhB,CADkB;EAIlB;;EACAG,QAAAA,OAAO,CAACC,OAAR,EACGC,CAAAA,IADH,CACQ,MAAM;EACV,UAAOnb,OAAAA,MAAM,CAAC/M,MAAd,EAAsB;EACpB+M,YAAAA,MAAM,CAACkL,KAAP,EAAA,EAAA,CAAA;EACD,WAAA;;EACD4P,UAAAA,aAAa,GAAG,KAAhB,CAAA;EACD,SANH,EAOGM,KAPH,CAOSC,KAAK,IACVC,UAAU,CAAC,MAAM;EACf,UAAA,MAAMD,KAAN,CAAA;EACD,SAFS,CARd,CAAA,CAAA;EAYD,OAAA;EACF,KArC0C;EAsC3CE,IAAAA,KAAK,EAAE,MAAM;EACXtpB,MAAAA,QAAQ,CAACC,QAAT,CAAkBD,QAAQ,CAACyM,YAA3B,CAAA,CAAA;EACD,KAxC0C;EAyC3C8c,IAAAA,UAAU,EAAE5pB,OAAO,IAAI;EACrB,MAAM6pB,MAAAA,UAAU,GAAG9pB,gBAAgB,CAACC,OAAD,EAAUK,QAAQ,CAACkD,OAAnB,CAAnC,CAAA;EACAlD,MAAAA,QAAQ,CAACkD,OAAT,GAAmBylB,YAAY,CAACa,UAAD,CAA/B,CAAA;EACD,KA5C0C;EA6C3C1hB,IAAAA,OAAO,EAAE,CAACoQ,QAAD,EAAW7U,KAAX,KAAqB;EAC5B,MAAI,IAAA,OAAOrD,QAAQ,CAACkD,OAAT,CAAiBumB,MAAxB,KAAmC,UAAvC,EAAmD;EACjD,QAAOzpB,OAAAA,QAAQ,CAACkD,OAAT,CAAiBumB,MAAjB,CAAwBvR,QAAxB,EAAkC7U,KAAlC,CAAP,CAAA;EACD,OAAA;;EAED,MAAA,IAAI,OAAO6U,QAAP,KAAoB,UAAxB,EAAoC;EAClC,QAAQA,OAAAA,QAAD,CAAuB7U,KAAvB,CAAP,CAAA;EACD,OAAA;;EAED,MAAA,OAAO6U,QAAP,CAAA;EACD,KAvD0C;EAyD3C1O,IAAAA,QAAQ,EAAE,MAAM;EACd,MAAA,OAAOxJ,QAAQ,CAACkD,OAAT,CAAiB6F,KAAxB,CAAA;EACD,KA3D0C;EA6D3C9I,IAAAA,QAAQ,EAAGN,OAAD,IAAkC;EAC1CK,MAAAA,QAAQ,CAACkD,OAAT,CAAiBwmB,aAAjB,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA1pB,QAAQ,CAACkD,OAAT,CAAiBwmB,aAAjB,CAAiC/pB,OAAjC,CAAA,CAAA;EACD,KA/D0C;EAkE3C;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EAEA;EACA;EACA;EAEA;EACA;EACA;EACA;;EAxF2C,GAA7C,CAAA;EA2FAK,EAAAA,QAAQ,GAAGgE,MAAM,CAACC,MAAP,CAAcjE,QAAd,EAAwB8oB,WAAxB,CAAX,CAAA;;EAEA9oB,EAAAA,QAAQ,CAAC4D,SAAT,CAAmBhD,OAAnB,CAA2BmD,OAAO,IAAI;EACpC,IAAA,OAAOC,MAAM,CAACC,MAAP,CAAcjE,QAAd,EAAwB+D,OAAO,CAACf,cAAhC,IAAA,IAAA,GAAA,KAAA,CAAA,GAAwBe,OAAO,CAACf,cAAR,CAAyBhD,QAAzB,CAAxB,CAAP,CAAA;EACD,GAFD,CAAA,CAAA;;EAIA,EAAA,OAAOA,QAAP,CAAA;EACD;;EC1HD;EAEO,SAAS2pB,kBAAT,CAAyDvoB,IAAzD,EAEmE;EACxE,EAAO,OAAA,MAAMwoB,WAAW,CAACjlB,SAAD,EAAYA,SAAZ,EAAuBvD,IAAvB,CAAxB,CAAA;EACD;EAGD;;EACA,SAASwoB,WAAT,CACE1f,CADF,EAEE2f,EAFF,EAGE3mB,OAHF,EAIoB;EAClB,EAAA,MAAM4mB,KAAuB,GAAG;EAC9BC,IAAAA,QAAQ,EAAEplB,SADoB;EAE9BzB,IAAAA,OAAO,EAAEA,OAAF,IAAA,IAAA,GAAEA,OAAF,GAAa;EAClBumB,MAAAA,MAAM,EAAE,CAAC,MAAM;EACb,QAAA,MAAM,IAAI3kB,KAAJ,CAAU,EAAV,CAAN,CAAA;EACD,OAFO,GAAA;EADU,KAFU;EAO9BklB,IAAAA,WAAW,EAAE,MAAMF,KAPW;EAQ9BG,IAAAA,UAAU,EAAE,MAAMH,KARY;EAS9BI,IAAAA,gBAAgB,EAAE,MAAMJ,KATM;EAU9BK,IAAAA,iBAAiB,EAAE,MAAML,KAVK;EAW9BM,IAAAA,iBAAiB,EAAE,MAAMN,KAXK;EAY9BP,IAAAA,UAAU,EAAEC,UAAU,IACpBI,WAAW,CAAC1f,CAAD,EAAI2f,EAAJ,EAAQ,EACjB,GAAG3mB,OADc;EAEjB,MAAGsmB,GAAAA,UAAAA;EAFc,KAAR,CAbiB;EAiB9Ba,IAAAA,mBAAmB,EAAE/mB,MAAM,KAAK,EAAE,GAAGA,MAAL;EAAayB,MAAAA,aAAa,EAAE,SAAA;EAA5B,KAAL,CAjBG;EAkB9BulB,IAAAA,WAAW,EAAEhnB,MAAM,KAAK,EAAE,GAAGA,MAAL;EAAayB,MAAAA,aAAa,EAAE,OAAA;EAA5B,KAAL,CAlBW;EAmB9BwlB,IAAAA,gBAAgB,EAAE,CAACC,QAAD,EAAWlnB,MAAX,KAA2B;EAC3CA,MAAAA,MAAM,GAAG,EACP,GAAGA,MADI;EAEPyB,QAAAA,aAAa,EAAE,MAFR;EAGPxB,QAAAA,EAAE,EAAED,MAAM,CAACC,EAAAA;EAHJ,OAAT,CAAA;;EAMA,MAAA,IAAI,OAAOinB,QAAP,KAAoB,QAAxB,EAAkC;EAAA,QAAA,IAAA,UAAA,CAAA;;EAChC,QAAO,OAAA,EACL,GAAGlnB,MADE;EAELC,UAAAA,EAAE,EAAED,CAAAA,UAAAA,GAAAA,MAAM,CAACC,EAAT,yBAAeinB,QAFZ;EAGL9lB,UAAAA,WAAW,EAAE8lB,QAAAA;EAHR,SAAP,CAAA;EAKD,OAAA;;EAED,MAAA,IAAI,OAAOA,QAAP,KAAoB,UAAxB,EAAoC;EAClC,QAAO,OAAA,EACL,GAAGlnB,MADE;EAELsB,UAAAA,UAAU,EAAE4lB,QAAAA;EAFP,SAAP,CAAA;EAID,OAAA;;EAED,MAAA,MAAM,IAAI1lB,KAAJ,CAAU,kBAAV,CAAN,CAAA;EACD,KAAA;EA1C6B,GAAhC,CAAA;EA6CA,EAAA,OAAOglB,KAAP,CAAA;EACD;;ECrLM,SAAS9iB,eAAT,GAEwB;EAC7B,EAAA,OAAOhH,QAAQ,IACbiB,IAAI,CACF,MAAM,CAACjB,QAAQ,CAACkD,OAAT,CAAiBunB,IAAlB,CADJ,EAGAA,IADF,IAMK;EACH,IAAA,MAAMpM,QAA6B,GAAG;EACpC5C,MAAAA,IAAI,EAAE,EAD8B;EAEpCjN,MAAAA,QAAQ,EAAE,EAF0B;EAGpCnH,MAAAA,QAAQ,EAAE,EAAA;EAH0B,KAAtC,CAAA;EAMA,IAAA,IAAIoU,IAAJ,CAAA;EACA,IAAA,IAAInV,GAAJ,CAAA;EACA,IAAA,IAAIzB,WAAJ,CAAA;;EAEA,IAAM6lB,MAAAA,UAAU,GAAG,UACjBC,YADiB,EAEjBnmB,KAFiB,EAGjBC,MAHiB,EAII;EAAA,MAAA,IAFrBD,KAEqB,KAAA,KAAA,CAAA,EAAA;EAFrBA,QAAAA,KAEqB,GAFb,CAEa,CAAA;EAAA,OAAA;;EACrBiX,MAAAA,IAAI,GAAG,EAAP,CAAA;;EAEA,MAAA,KAAK,IAAI1U,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG4jB,YAAY,CAAC3pB,MAAjC,EAAyC+F,CAAC,EAA1C,EAA8C;EAC5ClC,QAAAA,WAAW,GAAG8lB,YAAY,CAAC5jB,CAAD,CAA1B,CAD4C;EAI5C;EACA;EACA;EACA;EACA;EAEA;;EACAT,QAAAA,GAAG,GAAGtG,QAAQ,CAACwG,SAAT,CACJxG,QAAQ,CAACqG,QAAT,CAAkBxB,WAAlB,EAA+BkC,CAA/B,EAAkCtC,MAAlC,CADI,EAEJI,WAFI,EAGJkC,CAHI,EAIJvC,KAJI,CAAN,CAX4C;;EAmB5C6Z,QAAAA,QAAQ,CAAC7P,QAAT,CAAkB1N,IAAlB,CAAuBwF,GAAvB,EAnB4C;;EAqB5C+X,QAAAA,QAAQ,CAAChX,QAAT,CAAkBf,GAAG,CAAC/C,EAAtB,CAAA,GAA4B+C,GAA5B,CArB4C;;EAuB5CmV,QAAAA,IAAI,CAAC3a,IAAL,CAAUwF,GAAV,EAvB4C;;EA0B5C,QAAA,IAAItG,QAAQ,CAACkD,OAAT,CAAiB0nB,UAArB,EAAiC;EAAA,UAAA,IAAA,oBAAA,CAAA;;EAC/BtkB,UAAAA,GAAG,CAACukB,eAAJ,GAAsB7qB,QAAQ,CAACkD,OAAT,CAAiB0nB,UAAjB,CAA4B/lB,WAA5B,EAAyCkC,CAAzC,CAAtB,CAD+B;;EAI/B,UAAA,IAAA,CAAA,oBAAA,GAAIT,GAAG,CAACukB,eAAR,KAAI,IAAA,IAAA,oBAAA,CAAqB7pB,MAAzB,EAAiC;EAC/BsF,YAAAA,GAAG,CAACK,OAAJ,GAAc+jB,UAAU,CAACpkB,GAAG,CAACukB,eAAL,EAAsBrmB,KAAK,GAAG,CAA9B,EAAiC8B,GAAjC,CAAxB,CAAA;EACD,WAAA;EACF,SAAA;EACF,OAAA;;EAED,MAAA,OAAOmV,IAAP,CAAA;EACD,KA5CD,CAAA;;EA8CA4C,IAAAA,QAAQ,CAAC5C,IAAT,GAAgBiP,UAAU,CAACD,IAAD,CAA1B,CAAA;EAEA,IAAA,OAAOpM,QAAP,CAAA;EACD,GApEC,EAqEF;EACEte,IAAAA,GAAG,EAA4C,aADjD;EAEEyB,IAAAA,KAAK,EAAE,MAAA;EAAA,MAAA,IAAA,qBAAA,CAAA;;EAAA,MAAMxB,OAAAA,CAAAA,qBAAAA,GAAAA,QAAQ,CAACkD,OAAT,CAAiBgB,QAAvB,oCAAmClE,QAAQ,CAACkD,OAAT,CAAiB8X,UAApD,CAAA;EAAA,KAFT;EAGE/Y,IAAAA,QAAQ,EAAE,MAAM;EACdjC,MAAAA,QAAQ,CAAC4Z,mBAAT,EAAA,CAAA;EACD,KAAA;EALH,GArEE,CADN,CAAA;EA8ED;;EClFM,SAASkR,UAAT,CACLrP,IADK,EAELsP,aAFK,EAGL/qB,QAHK,EAIL;EACA,EAAA,IAAIA,QAAQ,CAACkD,OAAT,CAAiBiP,kBAArB,EAAyC;EACvC,IAAA,OAAO6Y,uBAAuB,CAACvP,IAAD,EAAOsP,aAAP,EAAsB/qB,QAAtB,CAA9B,CAAA;EACD,GAAA;;EAED,EAAA,OAAOirB,sBAAsB,CAACxP,IAAD,EAAOsP,aAAP,EAAsB/qB,QAAtB,CAA7B,CAAA;EACD,CAAA;EAEM,SAASgrB,uBAAT,CACLE,YADK,EAELC,SAFK,EAGLnrB,QAHK,EAIgB;EACrB,EAAMorB,MAAAA,mBAAqC,GAAG,EAA9C,CAAA;EACA,EAAMC,MAAAA,mBAAmD,GAAG,EAA5D,CAAA;EAEA,EAAA,IAAI/kB,GAAJ,CAAA;EACA,EAAA,IAAIglB,MAAJ,CAAA;;EAEA,EAAA,MAAMC,iBAAiB,GAAG,UAACL,YAAD,EAAiC1mB,KAAjC,EAA+C;EAAA,IAAA,IAAdA,KAAc,KAAA,KAAA,CAAA,EAAA;EAAdA,MAAAA,KAAc,GAAN,CAAM,CAAA;EAAA,KAAA;;EACvE,IAAA,MAAMiX,IAAsB,GAAG,EAA/B,CADuE;;EAIvE,IAAA,KAAK,IAAI1U,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGmkB,YAAY,CAAClqB,MAAjC,EAAyC+F,CAAC,EAA1C,EAA8C;EAAA,MAAA,IAAA,YAAA,CAAA;;EAC5CT,MAAAA,GAAG,GAAG4kB,YAAY,CAACnkB,CAAD,CAAlB,CAAA;;EAEA,MAAA,IAAA,CAAA,YAAA,GAAIT,GAAG,CAACK,OAAR,KAAI,IAAA,IAAA,YAAA,CAAa3F,MAAjB,EAAyB;EACvBsqB,QAAAA,MAAM,GAAGtrB,QAAQ,CAACwG,SAAT,CAAmBF,GAAG,CAAC/C,EAAvB,EAA2B+C,GAAG,CAACG,QAA/B,EAAyCH,GAAG,CAACvE,KAA7C,EAAoDuE,GAAG,CAAC9B,KAAxD,CAAT,CAAA;EACA8mB,QAAAA,MAAM,CAACvZ,aAAP,GAAuBzL,GAAG,CAACyL,aAA3B,CAAA;EACAuZ,QAAAA,MAAM,CAAC3kB,OAAP,GAAiB4kB,iBAAiB,CAACjlB,GAAG,CAACK,OAAL,EAAcnC,KAAK,GAAG,CAAtB,CAAlC,CAAA;;EACA,QAAA,IAAI,CAAC8mB,MAAM,CAAC3kB,OAAP,CAAe3F,MAApB,EAA4B;EAC1B,UAAA,SAAA;EACD,SAAA;;EACDsF,QAAAA,GAAG,GAAGglB,MAAN,CAAA;EACD,OAAA;;EAED,MAAA,IAAIH,SAAS,CAAC7kB,GAAD,CAAb,EAAoB;EAClBmV,QAAAA,IAAI,CAAC3a,IAAL,CAAUwF,GAAV,CAAA,CAAA;EACA+kB,QAAAA,mBAAmB,CAAC/kB,GAAG,CAAC/C,EAAL,CAAnB,GAA8B+C,GAA9B,CAAA;EACA+kB,QAAAA,mBAAmB,CAACtkB,CAAD,CAAnB,GAAyBT,GAAzB,CAAA;EACD,OAAA;EACF,KAAA;;EAED,IAAA,OAAOmV,IAAP,CAAA;EACD,GAzBD,CAAA;;EA2BA,EAAO,OAAA;EACLA,IAAAA,IAAI,EAAE8P,iBAAiB,CAACL,YAAD,CADlB;EAEL1c,IAAAA,QAAQ,EAAE4c,mBAFL;EAGL/jB,IAAAA,QAAQ,EAAEgkB,mBAAAA;EAHL,GAAP,CAAA;EAKD,CAAA;EAEM,SAASJ,sBAAT,CACLC,YADK,EAELC,SAFK,EAGLnrB,QAHK,EAIgB;EACrB,EAAMorB,MAAAA,mBAAqC,GAAG,EAA9C,CAAA;EACA,EAAMC,MAAAA,mBAAmD,GAAG,EAA5D,CAAA;EAEA,EAAA,IAAI5P,IAAJ,CAAA;EACA,EAAA,IAAInV,GAAJ,CAAA;EACA,EAAIglB,IAAAA,MAAJ,CANqB;;EASrB,EAAA,MAAMC,iBAAiB,GAAG,UAACL,YAAD,EAAiC1mB,KAAjC,EAA+C;EAAA,IAAA,IAAdA,KAAc,KAAA,KAAA,CAAA,EAAA;EAAdA,MAAAA,KAAc,GAAN,CAAM,CAAA;EAAA,KAAA;;EACvE;EAEAiX,IAAAA,IAAI,GAAG,EAAP,CAHuE;;EAMvE,IAAA,KAAK,IAAI1U,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGmkB,YAAY,CAAClqB,MAAjC,EAAyC+F,CAAC,EAA1C,EAA8C;EAC5CT,MAAAA,GAAG,GAAG4kB,YAAY,CAACnkB,CAAD,CAAlB,CAAA;EAEA,MAAA,MAAMykB,IAAI,GAAGL,SAAS,CAAC7kB,GAAD,CAAtB,CAAA;;EAEA,MAAA,IAAIklB,IAAJ,EAAU;EAAA,QAAA,IAAA,aAAA,CAAA;;EACR,QAAA,IAAA,CAAA,aAAA,GAAIllB,GAAG,CAACK,OAAR,KAAI,IAAA,IAAA,aAAA,CAAa3F,MAAjB,EAAyB;EACvBsqB,UAAAA,MAAM,GAAGtrB,QAAQ,CAACwG,SAAT,CACPF,GAAG,CAAC/C,EADG,EAEP+C,GAAG,CAACG,QAFG,EAGPH,GAAG,CAACvE,KAHG,EAIPuE,GAAG,CAAC9B,KAJG,CAAT,CAAA;EAMA8mB,UAAAA,MAAM,CAAC3kB,OAAP,GAAiB4kB,iBAAiB,CAACjlB,GAAG,CAACK,OAAL,EAAcnC,KAAK,GAAG,CAAtB,CAAlC,CAAA;EACA8B,UAAAA,GAAG,GAAGglB,MAAN,CAAA;EACD,SAAA;;EAED7P,QAAAA,IAAI,CAAC3a,IAAL,CAAUwF,GAAV,CAAA,CAAA;EACA8kB,QAAAA,mBAAmB,CAACtqB,IAApB,CAAyBwF,GAAzB,CAAA,CAAA;EACA+kB,QAAAA,mBAAmB,CAAC/kB,GAAG,CAAC/C,EAAL,CAAnB,GAA8B+C,GAA9B,CAAA;EACD,OAAA;EACF,KAAA;;EAED,IAAA,OAAOmV,IAAP,CAAA;EACD,GA9BD,CAAA;;EAgCA,EAAO,OAAA;EACLA,IAAAA,IAAI,EAAE8P,iBAAiB,CAACL,YAAD,CADlB;EAEL1c,IAAAA,QAAQ,EAAE4c,mBAFL;EAGL/jB,IAAAA,QAAQ,EAAEgkB,mBAAAA;EAHL,GAAP,CAAA;EAKD;;ECxGM,SAAStW,mBAAT,GAEwB;EAC7B,EAAA,OAAO/U,QAAQ,IACbiB,IAAI,CACF,MAAM,CACJjB,QAAQ,CAACgU,sBAAT,EADI,EAEJhU,QAAQ,CAACwJ,QAAT,EAAA,CAAoBuI,aAFhB,EAGJ/R,QAAQ,CAACwJ,QAAT,EAAA,CAAoBwI,YAHhB,CADJ,EAMF,CAACqM,QAAD,EAAWtM,aAAX,EAA0BC,YAA1B,KAA2C;EACzC,IAAA,IACE,CAACqM,QAAQ,CAAC5C,IAAT,CAAcza,MAAf,IACC,EAAC+Q,aAAD,IAAA,IAAA,IAACA,aAAa,CAAE/Q,MAAhB,CAA0B,IAAA,CAACgR,YAF9B,EAGE;EACA,MAAA,KAAK,IAAIjL,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGsX,QAAQ,CAAC7P,QAAT,CAAkBxN,MAAtC,EAA8C+F,CAAC,EAA/C,EAAmD;EACjDsX,QAAAA,QAAQ,CAAC7P,QAAT,CAAkBzH,CAAlB,CAAsBgL,CAAAA,aAAtB,GAAsC,EAAtC,CAAA;EACAsM,QAAAA,QAAQ,CAAC7P,QAAT,CAAkBzH,CAAlB,CAAsBuN,CAAAA,iBAAtB,GAA0C,EAA1C,CAAA;EACD,OAAA;;EACD,MAAA,OAAO+J,QAAP,CAAA;EACD,KAAA;;EAED,IAAMoN,MAAAA,qBAAwD,GAAG,EAAjE,CAAA;EACA,IAAMC,MAAAA,qBAAwD,GAAG,EAAjE,CAAA;EAEC,IAAC3Z,CAAAA,aAAD,WAACA,aAAD,GAAkB,EAAlB,EAAsBnR,OAAtB,CAA8BR,CAAC,IAAI;EAAA,MAAA,IAAA,qBAAA,CAAA;;EAClC,MAAMkD,MAAAA,MAAM,GAAGtD,QAAQ,CAACiG,SAAT,CAAmB7F,CAAC,CAACmD,EAArB,CAAf,CAAA;;EAEA,MAAI,IAAA,CAACD,MAAL,EAAa;EACX,QAA2C;EACzCX,UAAAA,OAAO,CAACwD,IAAR,CAC6D/F,0DAAAA,GAAAA,CAAC,CAACmD,EAD/D,CAAA,CAAA;EAGD,SAAA;EACF,OAAA;;EAED,MAAA,MAAMuO,QAAQ,GAAGxO,MAAM,CAACqP,WAAP,EAAjB,CAAA;;EAEA,MAAI,IAAA,CAACb,QAAL,EAAe;EACb,QAA2C;EACzCnP,UAAAA,OAAO,CAACwD,IAAR,CACsE7C,mEAAAA,GAAAA,MAAM,CAACC,EAD7E,GAAA,GAAA,CAAA,CAAA;EAGD,SAAA;;EACD,QAAA,OAAA;EACD,OAAA;;EAEDkoB,MAAAA,qBAAqB,CAAC3qB,IAAtB,CAA2B;EACzByC,QAAAA,EAAE,EAAEnD,CAAC,CAACmD,EADmB;EAEzBuO,QAAAA,QAFyB;EAGzB6Z,QAAAA,aAAa,EAAE7Z,CAAAA,qBAAAA,GAAAA,QAAQ,CAACX,kBAAX,oBAAEW,QAAQ,CAACX,kBAAT,CAA8B/Q,CAAC,CAACkS,KAAhC,CAAF,KAAA,IAAA,GAAA,qBAAA,GAA4ClS,CAAC,CAACkS,KAAAA;EAHlC,OAA3B,CAAA,CAAA;EAKD,KA3BA,CAAA,CAAA;EA6BD,IAAMsZ,MAAAA,aAAa,GAAG7Z,aAAa,CAACrM,GAAd,CAAkBtF,CAAC,IAAIA,CAAC,CAACmD,EAAzB,CAAtB,CAAA;EAEA,IAAA,MAAM6O,cAAc,GAAGpS,QAAQ,CAACyU,iBAAT,EAAvB,CAAA;EAEA,IAAA,MAAMoX,yBAAyB,GAAG7rB,QAAQ,CACvCgG,iBAD+B,EAE/B4N,CAAAA,MAF+B,CAExBtQ,MAAM,IAAIA,MAAM,CAAC2P,kBAAP,EAFc,CAAlC,CAAA;;EAIA,IAAA,IACEjB,YAAY,IACZI,cADA,IAEAyZ,yBAAyB,CAAC7qB,MAH5B,EAIE;EACA4qB,MAAAA,aAAa,CAAC9qB,IAAd,CAAmB,YAAnB,CAAA,CAAA;EAEA+qB,MAAAA,yBAAyB,CAACjrB,OAA1B,CAAkC0C,MAAM,IAAI;EAAA,QAAA,IAAA,qBAAA,CAAA;;EAC1CooB,QAAAA,qBAAqB,CAAC5qB,IAAtB,CAA2B;EACzByC,UAAAA,EAAE,EAAED,MAAM,CAACC,EADc;EAEzBuO,UAAAA,QAAQ,EAAEM,cAFe;EAGzBuZ,UAAAA,aAAa,EAAA,CAAA,qBAAA,GACXvZ,cAAc,CAACjB,kBADJ,IAAA,IAAA,GAAA,KAAA,CAAA,GACXiB,cAAc,CAACjB,kBAAf,CAAoCa,YAApC,CADW,KAEXA,IAAAA,GAAAA,qBAAAA,GAAAA,YAAAA;EALuB,SAA3B,CAAA,CAAA;EAOD,OARD,CAAA,CAAA;EASD,KAAA;;EAED,IAAA,IAAI8Z,mBAAJ,CAAA;EACA,IAAIC,IAAAA,mBAAJ,CAvEyC;;EA0EzC,IAAA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG3N,QAAQ,CAAC7P,QAAT,CAAkBxN,MAAtC,EAA8CgrB,CAAC,EAA/C,EAAmD;EACjD,MAAA,MAAM1lB,GAAG,GAAG+X,QAAQ,CAAC7P,QAAT,CAAkBwd,CAAlB,CAAZ,CAAA;EAEA1lB,MAAAA,GAAG,CAACyL,aAAJ,GAAoB,EAApB,CAAA;;EAEA,MAAI0Z,IAAAA,qBAAqB,CAACzqB,MAA1B,EAAkC;EAChC,QAAA,KAAK,IAAI+F,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG0kB,qBAAqB,CAACzqB,MAA1C,EAAkD+F,CAAC,EAAnD,EAAuD;EACrD+kB,UAAAA,mBAAmB,GAAGL,qBAAqB,CAAC1kB,CAAD,CAA3C,CAAA;EACA,UAAA,MAAMxD,EAAE,GAAGuoB,mBAAmB,CAACvoB,EAA/B,CAFqD;;EAKrD+C,UAAAA,GAAG,CAACyL,aAAJ,CAAkBxO,EAAlB,CAAA,GAAwBuoB,mBAAmB,CAACha,QAApB,CACtBxL,GADsB,EAEtB/C,EAFsB,EAGtBuoB,mBAAmB,CAACH,aAHE,EAItBM,UAAU,IAAI;EACZ3lB,YAAAA,GAAG,CAACgO,iBAAJ,CAAsB/Q,EAAtB,IAA4B0oB,UAA5B,CAAA;EACD,WANqB,CAAxB,CAAA;EAQD,SAAA;EACF,OAAA;;EAED,MAAIP,IAAAA,qBAAqB,CAAC1qB,MAA1B,EAAkC;EAChC,QAAA,KAAK,IAAI+F,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG2kB,qBAAqB,CAAC1qB,MAA1C,EAAkD+F,CAAC,EAAnD,EAAuD;EACrDglB,UAAAA,mBAAmB,GAAGL,qBAAqB,CAAC3kB,CAAD,CAA3C,CAAA;EACA,UAAA,MAAMxD,EAAE,GAAGwoB,mBAAmB,CAACxoB,EAA/B,CAFqD;;EAIrD,UAAA,IACEwoB,mBAAmB,CAACja,QAApB,CACExL,GADF,EAEE/C,EAFF,EAGEwoB,mBAAmB,CAACJ,aAHtB,EAIEM,UAAU,IAAI;EACZ3lB,YAAAA,GAAG,CAACgO,iBAAJ,CAAsB/Q,EAAtB,IAA4B0oB,UAA5B,CAAA;EACD,WANH,CADF,EASE;EACA3lB,YAAAA,GAAG,CAACyL,aAAJ,CAAkBma,UAAlB,GAA+B,IAA/B,CAAA;EACA,YAAA,MAAA;EACD,WAAA;EACF,SAAA;;EAED,QAAA,IAAI5lB,GAAG,CAACyL,aAAJ,CAAkBma,UAAlB,KAAiC,IAArC,EAA2C;EACzC5lB,UAAAA,GAAG,CAACyL,aAAJ,CAAkBma,UAAlB,GAA+B,KAA/B,CAAA;EACD,SAAA;EACF,OAAA;EACF,KAAA;;EAED,IAAMC,MAAAA,cAAc,GAAI7lB,GAAD,IAAyB;EAC9C;EACA,MAAA,KAAK,IAAIS,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG6kB,aAAa,CAAC5qB,MAAlC,EAA0C+F,CAAC,EAA3C,EAA+C;EAC7C,QAAIT,IAAAA,GAAG,CAACyL,aAAJ,CAAkB6Z,aAAa,CAAC7kB,CAAD,CAA/B,CAAyC,KAAA,KAA7C,EAAoD;EAClD,UAAA,OAAO,KAAP,CAAA;EACD,SAAA;EACF,OAAA;;EACD,MAAA,OAAO,IAAP,CAAA;EACD,KARD,CA1HyC;;;EAqIzC,IAAO+jB,OAAAA,UAAU,CAACzM,QAAQ,CAAC5C,IAAV,EAAgB0Q,cAAhB,EAAgCnsB,QAAhC,CAAjB,CAAA;EACD,GA5IC,EA6IF;EACED,IAAAA,GAAG,EAA4C,qBADjD;EAEEyB,IAAAA,KAAK,EAAE,MAAA;EAAA,MAAA,IAAA,qBAAA,CAAA;;EAAA,MAAMxB,OAAAA,CAAAA,qBAAAA,GAAAA,QAAQ,CAACkD,OAAT,CAAiBgB,QAAvB,oCAAmClE,QAAQ,CAACkD,OAAT,CAAiB8X,UAApD,CAAA;EAAA,KAFT;EAGE/Y,IAAAA,QAAQ,EAAE,MAAM;EACdjC,MAAAA,QAAQ,CAAC4Z,mBAAT,EAAA,CAAA;EACD,KAAA;EALH,GA7IE,CADN,CAAA;EAsJD;;EC1JM,SAAS7F,kBAAT,GAGwB;EAC7B,EAAA,OAAO,CAAC/T,QAAD,EAAWkG,QAAX,KACLjF,IAAI,CACF,MAAM,CACJjB,QAAQ,CAACgU,sBAAT,EADI,EAEJhU,QAAQ,CAACwJ,QAAT,EAAoBuI,CAAAA,aAFhB,EAGJ/R,QAAQ,CAACwJ,QAAT,EAAA,CAAoBwI,YAHhB,EAIJhS,QAAQ,CAAC+U,mBAAT,EAJI,CADJ,EAOF,CAACqX,WAAD,EAAcra,aAAd,EAA6BC,YAA7B,KAA8C;EAC5C,IAAA,IACE,CAACoa,WAAW,CAAC3Q,IAAZ,CAAiBza,MAAlB,IACC,EAAC+Q,aAAD,IAAA,IAAA,IAACA,aAAa,CAAE/Q,MAAhB,CAA0B,IAAA,CAACgR,YAF9B,EAGE;EACA,MAAA,OAAOoa,WAAP,CAAA;EACD,KAAA;;EAED,IAAA,MAAMR,aAAa,GAAG,CACpB,GAAG7Z,aAAa,CAACrM,GAAd,CAAkBtF,CAAC,IAAIA,CAAC,CAACmD,EAAzB,EAA6BqQ,MAA7B,CAAoCxT,CAAC,IAAIA,CAAC,KAAK8F,QAA/C,CADiB,EAEpB8L,YAAY,GAAG,YAAH,GAAkBrN,SAFV,CAAA,CAGpBiP,MAHoB,CAGb/E,OAHa,CAAtB,CAAA;;EAKA,IAAMsd,MAAAA,cAAc,GAAI7lB,GAAD,IAAyB;EAC9C;EACA,MAAA,KAAK,IAAIS,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG6kB,aAAa,CAAC5qB,MAAlC,EAA0C+F,CAAC,EAA3C,EAA+C;EAC7C,QAAIT,IAAAA,GAAG,CAACyL,aAAJ,CAAkB6Z,aAAa,CAAC7kB,CAAD,CAA/B,CAAyC,KAAA,KAA7C,EAAoD;EAClD,UAAA,OAAO,KAAP,CAAA;EACD,SAAA;EACF,OAAA;;EACD,MAAA,OAAO,IAAP,CAAA;EACD,KARD,CAAA;;EAUA,IAAO+jB,OAAAA,UAAU,CAACsB,WAAW,CAAC3Q,IAAb,EAAmB0Q,cAAnB,EAAmCnsB,QAAnC,CAAjB,CAAA;EACD,GA/BC,EAgCF;EACED,IAAAA,GAAG,EAED,qBAAA,GAAwBmG,QAH5B;EAIE1E,IAAAA,KAAK,EAAE,MAAA;EAAA,MAAA,IAAA,qBAAA,CAAA;;EAAA,MAAMxB,OAAAA,CAAAA,qBAAAA,GAAAA,QAAQ,CAACkD,OAAT,CAAiBgB,QAAvB,oCAAmClE,QAAQ,CAACkD,OAAT,CAAiB8X,UAApD,CAAA;EAAA,KAJT;EAKE/Y,IAAAA,QAAQ,EAAE,MAAM,EAAE;EALpB,GAhCE,CADN,CAAA;EAyCD;;EC9CM,SAASiS,sBAAT,GAGqB;EAC1B,EAAO,OAAA,CAAClU,QAAD,EAAWkG,QAAX,KACLjF,IAAI,CACF,MAAM,CAACjB,QAAQ,CAACiG,SAAT,CAAmBC,QAAnB,CAA6B6N,CAAAA,kBAA7B,EAAD,CADJ,EAEFsY,eAAe,IAAI;EACjB,IAAA,IAAIC,mBAAmB,GAAG,IAAInY,GAAJ,EAA1B,CAAA;;EAEA,IAAA,KAAK,IAAIpN,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGslB,eAAe,CAAC7d,QAAhB,CAAyBxN,MAA7C,EAAqD+F,CAAC,EAAtD,EAA0D;EAAA,MAAA,IAAA,qBAAA,CAAA;;EACxD,MAAA,MAAMuL,KAAK,GAAA,CAAA,qBAAA,GAAG+Z,eAAe,CAAC7d,QAAhB,CAAyBzH,CAAzB,CAAH,KAAG,IAAA,GAAA,KAAA,CAAA,GAAA,qBAAA,CAA6BrD,QAA7B,CAAsCwC,QAAtC,CAAd,CAAA;;EAEA,MAAA,IAAIomB,mBAAmB,CAACC,GAApB,CAAwBja,KAAxB,CAAJ,EAAoC;EAAA,QAAA,IAAA,qBAAA,CAAA;;EAClCga,QAAAA,mBAAmB,CAACE,GAApB,CACEla,KADF,EAEE,CAACga,CAAAA,qBAAAA,GAAAA,mBAAmB,CAACG,GAApB,CAAwBna,KAAxB,CAAD,KAAmC,IAAA,GAAA,qBAAA,GAAA,CAAnC,IAAwC,CAF1C,CAAA,CAAA;EAID,OALD,MAKO;EACLga,QAAAA,mBAAmB,CAACE,GAApB,CAAwBla,KAAxB,EAA+B,CAA/B,CAAA,CAAA;EACD,OAAA;EACF,KAAA;;EAED,IAAA,OAAOga,mBAAP,CAAA;EACD,GAnBC,EAoBF;EACEvsB,IAAAA,GAAG,EAED,yBAAA,GAA4BmG,QAHhC;EAIE1E,IAAAA,KAAK,EAAE,MAAA;EAAA,MAAA,IAAA,qBAAA,CAAA;;EAAA,MAAMxB,OAAAA,CAAAA,qBAAAA,GAAAA,QAAQ,CAACkD,OAAT,CAAiBgB,QAAvB,oCAAmClE,QAAQ,CAACkD,OAAT,CAAiB8X,UAApD,CAAA;EAAA,KAJT;EAKE/Y,IAAAA,QAAQ,EAAE,MAAM,EAAE;EALpB,GApBE,CADN,CAAA;EA6BD;;ECjCM,SAASoS,sBAAT,GAGiC;EACtC,EAAO,OAAA,CAACrU,QAAD,EAAWkG,QAAX,KACLjF,IAAI,CACF,MAAM,CAACjB,QAAQ,CAACiG,SAAT,CAAmBC,QAAnB,CAA6B6N,CAAAA,kBAA7B,EAAD,CADJ,EAEFsY,eAAe,IAAI;EAAA,IAAA,IAAA,qBAAA,CAAA;;EACjB,IAAA,MAAMK,UAAU,GAAA,CAAA,qBAAA,GAAGL,eAAe,CAAC7d,QAAhB,CAAyB,CAAzB,CAAH,KAAG,IAAA,GAAA,KAAA,CAAA,GAAA,qBAAA,CAA6B9K,QAA7B,CAAsCwC,QAAtC,CAAnB,CAAA;;EAEA,IAAA,IAAI,OAAOwmB,UAAP,KAAsB,WAA1B,EAAuC;EACrC,MAAA,OAAO/nB,SAAP,CAAA;EACD,KAAA;;EAED,IAAA,IAAIgoB,mBAA+B,GAAG,CAACD,UAAD,EAAaA,UAAb,CAAtC,CAAA;;EAEA,IAAA,KAAK,IAAI3lB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGslB,eAAe,CAAC7d,QAAhB,CAAyBxN,MAA7C,EAAqD+F,CAAC,EAAtD,EAA0D;EAAA,MAAA,IAAA,sBAAA,CAAA;;EACxD,MAAA,MAAMuL,KAAK,GAAA,CAAA,sBAAA,GAAG+Z,eAAe,CAAC7d,QAAhB,CAAyBzH,CAAzB,CAAH,KAAG,IAAA,GAAA,KAAA,CAAA,GAAA,sBAAA,CAA6BrD,QAA7B,CAAsCwC,QAAtC,CAAd,CAAA;;EAEA,MAAA,IAAIoM,KAAK,GAAGqa,mBAAmB,CAAC,CAAD,CAA/B,EAAoC;EAClCA,QAAAA,mBAAmB,CAAC,CAAD,CAAnB,GAAyBra,KAAzB,CAAA;EACD,OAFD,MAEO,IAAIA,KAAK,GAAGqa,mBAAmB,CAAC,CAAD,CAA/B,EAAoC;EACzCA,QAAAA,mBAAmB,CAAC,CAAD,CAAnB,GAAyBra,KAAzB,CAAA;EACD,OAAA;EACF,KAAA;;EAED,IAAA,OAAOqa,mBAAP,CAAA;EACD,GAtBC,EAuBF;EACE5sB,IAAAA,GAAG,EAED,yBAAA,GAA4BmG,QAHhC;EAIE1E,IAAAA,KAAK,EAAE,MAAA;EAAA,MAAA,IAAA,qBAAA,CAAA;;EAAA,MAAMxB,OAAAA,CAAAA,qBAAAA,GAAAA,QAAQ,CAACkD,OAAT,CAAiBgB,QAAvB,oCAAmClE,QAAQ,CAACkD,OAAT,CAAiB8X,UAApD,CAAA;EAAA,KAJT;EAKE/Y,IAAAA,QAAQ,EAAE,MAAM,EAAE;EALpB,GAvBE,CADN,CAAA;EAgCD;;ECnCM,SAASyV,iBAAT,GAEwB;EAC7B,EAAO1X,OAAAA,QAAQ,IACbiB,IAAI,CACF,MAAM,CAACjB,QAAQ,CAACwJ,QAAT,EAAoBsY,CAAAA,OAArB,EAA8B9hB,QAAQ,CAACkkB,oBAAT,EAA9B,CADJ,EAEF,CAACpC,OAAD,EAAUzD,QAAV,KAAuB;EACrB,IAAA,IAAI,CAACA,QAAQ,CAAC5C,IAAT,CAAcza,MAAf,IAAyB,EAAC8gB,OAAD,IAACA,IAAAA,IAAAA,OAAO,CAAE9gB,MAAV,CAA7B,EAA+C;EAC7C,MAAA,OAAOqd,QAAP,CAAA;EACD,KAAA;;EAED,IAAA,MAAMuO,YAAY,GAAG5sB,QAAQ,CAACwJ,QAAT,GAAoBsY,OAAzC,CAAA;EAEA,IAAA,MAAM+K,cAAgC,GAAG,EAAzC,CAPqB;;EAUrB,IAAA,MAAMC,gBAAgB,GAAGF,YAAY,CAAChZ,MAAb,CAAoB8N,IAAI,IAC/C1hB,QAAQ,CAACiG,SAAT,CAAmByb,IAAI,CAACne,EAAxB,CAA4BigB,CAAAA,UAA5B,EADuB,CAAzB,CAAA;EAIA,IAAMuJ,MAAAA,cAOL,GAAG,EAPJ,CAAA;EASAD,IAAAA,gBAAgB,CAAClsB,OAAjB,CAAyBosB,SAAS,IAAI;EACpC,MAAM1pB,MAAAA,MAAM,GAAGtD,QAAQ,CAACiG,SAAT,CAAmB+mB,SAAS,CAACzpB,EAA7B,CAAf,CAAA;EAEAwpB,MAAAA,cAAc,CAACC,SAAS,CAACzpB,EAAX,CAAd,GAA+B;EAC7B0pB,QAAAA,aAAa,EAAE3pB,MAAM,CAAC2pB,aADO;EAE7BC,QAAAA,aAAa,EAAE5pB,MAAM,CAAC4pB,aAFO;EAG7BnL,QAAAA,SAAS,EAAEze,MAAM,CAACkf,YAAP,EAAA;EAHkB,OAA/B,CAAA;EAKD,KARD,CAAA,CAAA;;EAUA,IAAM2K,MAAAA,QAAQ,GAAI1R,IAAD,IAA4B;EAC3C;EACA;EACA,MAAA,MAAM2R,UAAU,GAAG3R,IAAI,CAAC4G,KAAL,EAAnB,CAAA;EAEA+K,MAAAA,UAAU,CAAC1L,IAAX,CAAgB,CAACb,IAAD,EAAOC,IAAP,KAAgB;EAC9B,QAAA,KAAK,IAAI/Z,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG+lB,gBAAgB,CAAC9rB,MAArC,EAA6C+F,CAAC,IAAI,CAAlD,EAAqD;EAAA,UAAA,IAAA,eAAA,CAAA;;EACnD,UAAA,MAAMimB,SAAS,GAAGF,gBAAgB,CAAC/lB,CAAD,CAAlC,CAAA;EACA,UAAA,MAAMsmB,UAAU,GAAGN,cAAc,CAACC,SAAS,CAACzpB,EAAX,CAAjC,CAAA;EACA,UAAM+pB,MAAAA,MAAM,sBAAGN,SAAH,IAAA,IAAA,GAAA,KAAA,CAAA,GAAGA,SAAS,CAAErK,IAAd,8BAAsB,KAAlC,CAAA;;EAEA,UAAI0K,IAAAA,UAAU,CAACJ,aAAf,EAA8B;EAC5B,YAAMM,MAAAA,MAAM,GAAG1M,IAAI,CAACnd,QAAL,CAAcspB,SAAS,CAACzpB,EAAxB,CAAf,CAAA;EACA,YAAMiqB,MAAAA,MAAM,GAAG1M,IAAI,CAACpd,QAAL,CAAcspB,SAAS,CAACzpB,EAAxB,CAAf,CAAA;EAEA,YAAA,MAAMkqB,UAAU,GAAG,OAAOF,MAAP,KAAkB,WAArC,CAAA;EACA,YAAA,MAAMG,UAAU,GAAG,OAAOF,MAAP,KAAkB,WAArC,CAAA;;EAEA,YAAIC,IAAAA,UAAU,IAAIC,UAAlB,EAA8B;EAC5B,cAAA,OAAOD,UAAU,IAAIC,UAAd,GACH,CADG,GAEHD,UAAU,GACVJ,UAAU,CAACJ,aADD,GAEV,CAACI,UAAU,CAACJ,aAJhB,CAAA;EAKD,aAAA;EACF,WAnBkD;;;EAsBnD,UAAA,IAAIU,OAAO,GAAGN,UAAU,CAACtL,SAAX,CAAqBlB,IAArB,EAA2BC,IAA3B,EAAiCkM,SAAS,CAACzpB,EAA3C,CAAd,CAAA;;EAEA,UAAIoqB,IAAAA,OAAO,KAAK,CAAhB,EAAmB;EACjB,YAAA,IAAIL,MAAJ,EAAY;EACVK,cAAAA,OAAO,IAAI,CAAC,CAAZ,CAAA;EACD,aAAA;;EAED,YAAIN,IAAAA,UAAU,CAACH,aAAf,EAA8B;EAC5BS,cAAAA,OAAO,IAAI,CAAC,CAAZ,CAAA;EACD,aAAA;;EAED,YAAA,OAAOA,OAAP,CAAA;EACD,WAAA;EACF,SAAA;;EAED,QAAA,OAAO9M,IAAI,CAAC9e,KAAL,GAAa+e,IAAI,CAAC/e,KAAzB,CAAA;EACD,OAvCD,EAL2C;;EA+C3CqrB,MAAAA,UAAU,CAACxsB,OAAX,CAAmB0F,GAAG,IAAI;EACxBumB,QAAAA,cAAc,CAAC/rB,IAAf,CAAoBwF,GAApB,CAAA,CAAA;;EACA,QAAA,IAAI,CAACA,GAAG,CAACK,OAAL,IAAgBL,GAAG,CAACK,OAAJ,CAAY3F,MAAZ,IAAsB,CAA1C,EAA6C;EAC3C,UAAA,OAAA;EACD,SAAA;;EACDsF,QAAAA,GAAG,CAACK,OAAJ,GAAcwmB,QAAQ,CAAC7mB,GAAG,CAACK,OAAL,CAAtB,CAAA;EACD,OAND,CAAA,CAAA;EAQA,MAAA,OAAOymB,UAAP,CAAA;EACD,KAxDD,CAAA;;EA0DA,IAAO,OAAA;EACL3R,MAAAA,IAAI,EAAE0R,QAAQ,CAAC9O,QAAQ,CAAC5C,IAAV,CADT;EAELjN,MAAAA,QAAQ,EAAEqe,cAFL;EAGLxlB,MAAAA,QAAQ,EAAEgX,QAAQ,CAAChX,QAAAA;EAHd,KAAP,CAAA;EAKD,GAlGC,EAmGF;EACEtH,IAAAA,GAAG,EAA4C,mBADjD;EAEEyB,IAAAA,KAAK,EAAE,MAAA;EAAA,MAAA,IAAA,qBAAA,CAAA;;EAAA,MAAMxB,OAAAA,CAAAA,qBAAAA,GAAAA,QAAQ,CAACkD,OAAT,CAAiBgB,QAAvB,oCAAmClE,QAAQ,CAACkD,OAAT,CAAiB8X,UAApD,CAAA;EAAA,KAFT;EAGE/Y,IAAAA,QAAQ,EAAE,MAAM;EACdjC,MAAAA,QAAQ,CAAC4Z,mBAAT,EAAA,CAAA;EACD,KAAA;EALH,GAnGE,CADN,CAAA;EA4GD;;EC/GM,SAAStK,kBAAT,GAEwB;EAC7B,EAAOtP,OAAAA,QAAQ,IACbiB,IAAI,CACF,MAAM,CAACjB,QAAQ,CAACwJ,QAAT,EAAoB+M,CAAAA,QAArB,EAA+BvW,QAAQ,CAACyX,qBAAT,EAA/B,CADJ,EAEF,CAAClB,QAAD,EAAW8H,QAAX,KAAwB;EACtB,IAAI,IAAA,CAACA,QAAQ,CAAC5C,IAAT,CAAcza,MAAf,IAAyB,CAACuV,QAAQ,CAACvV,MAAvC,EAA+C;EAC7C,MAAA,OAAOqd,QAAP,CAAA;EACD,KAHqB;;;EAMtB,IAAA,MAAMuP,gBAAgB,GAAGrX,QAAQ,CAAC3C,MAAT,CAAgB1N,QAAQ,IAC/ClG,QAAQ,CAACiG,SAAT,CAAmBC,QAAnB,CADuB,CAAzB,CAAA;EAIA,IAAM2nB,MAAAA,eAAiC,GAAG,EAA1C,CAAA;EACA,IAAA,MAAMC,eAA+C,GAAG,EAAxD,CAXsB;EAatB;EACA;EACA;EAEA;;EACA,IAAMC,MAAAA,kBAAkB,GAAG,UACzBtS,IADyB,EAEzBjX,KAFyB,EAGzBwpB,QAHyB,EAItB;EAAA,MAAA,IAFHxpB,KAEG,KAAA,KAAA,CAAA,EAAA;EAFHA,QAAAA,KAEG,GAFK,CAEL,CAAA;EAAA,OAAA;;EACH;EACA,MAAA,IAAIA,KAAK,KAAKopB,gBAAgB,CAAC5sB,MAA/B,EAAuC;EACrC,QAAA,OAAOya,IAAP,CAAA;EACD,OAAA;;EAED,MAAA,MAAMvV,QAAQ,GAAG0nB,gBAAgB,CAACppB,KAAD,CAAjC,CANG;;EASH,MAAMypB,MAAAA,YAAY,GAAGC,OAAO,CAACzS,IAAD,EAAOvV,QAAP,CAA5B,CATG;;EAYH,MAAA,MAAMioB,qBAAqB,GAAG1b,KAAK,CAAC0D,IAAN,CAAW8X,YAAY,CAACG,OAAb,EAAX,CAAmC1oB,CAAAA,GAAnC,CAC5B,CAAA,IAAA,EAA+B3D,KAA/B,KAAyC;EAAA,QAAA,IAAxC,CAACssB,aAAD,EAAgBC,WAAhB,CAAwC,GAAA,IAAA,CAAA;EACvC,QAAA,IAAI/qB,EAAE,GAAM2C,QAAN,GAAA,GAAA,GAAkBmoB,aAAxB,CAAA;EACA9qB,QAAAA,EAAE,GAAGyqB,QAAQ,GAAMA,QAAN,SAAkBzqB,EAAlB,GAAyBA,EAAtC,CAFuC;;EAKvC,QAAA,MAAMoD,OAAO,GAAGonB,kBAAkB,CAACO,WAAD,EAAc9pB,KAAK,GAAG,CAAtB,EAAyBjB,EAAzB,CAAlC,CALuC;;EAQvC,QAAA,MAAMgrB,QAAQ,GAAG/pB,KAAK,GAClBlE,SAAS,CAACguB,WAAD,EAAchoB,GAAG,IAAIA,GAAG,CAACK,OAAzB,CADS,GAElB2nB,WAFJ,CAAA;EAIA,QAAA,MAAMhoB,GAAG,GAAGtG,QAAQ,CAACwG,SAAT,CAAmBjD,EAAnB,EAAuBoB,SAAvB,EAAkC5C,KAAlC,EAAyCyC,KAAzC,CAAZ,CAAA;EAEAR,QAAAA,MAAM,CAACC,MAAP,CAAcqC,GAAd,EAAmB;EACjBuR,UAAAA,gBAAgB,EAAE3R,QADD;EAEjBmoB,UAAAA,aAFiB;EAGjB1nB,UAAAA,OAHiB;EAIjB4nB,UAAAA,QAJiB;EAKjB7qB,UAAAA,QAAQ,EAAGwC,QAAD,IAAsB;EAC9B;EACA,YAAA,IAAI0nB,gBAAgB,CAACtd,QAAjB,CAA0BpK,QAA1B,CAAJ,EAAyC;EACvC,cAAII,IAAAA,GAAG,CAACM,WAAJ,CAAgBC,cAAhB,CAA+BX,QAA/B,CAAJ,EAA8C;EAC5C,gBAAA,OAAOI,GAAG,CAACM,WAAJ,CAAgBV,QAAhB,CAAP,CAAA;EACD,eAAA;;EAED,cAAA,IAAIooB,WAAW,CAAC,CAAD,CAAf,EAAoB;EAAA,gBAAA,IAAA,qBAAA,CAAA;;EAClBhoB,gBAAAA,GAAG,CAACM,WAAJ,CAAgBV,QAAhB,6BACEooB,WAAW,CAAC,CAAD,CAAX,CAAe5qB,QAAf,CAAwBwC,QAAxB,CADF,oCACuCvB,SADvC,CAAA;EAED,eAAA;;EAED,cAAA,OAAO2B,GAAG,CAACM,WAAJ,CAAgBV,QAAhB,CAAP,CAAA;EACD,aAAA;;EAED,YAAII,IAAAA,GAAG,CAACwR,mBAAJ,CAAwBjR,cAAxB,CAAuCX,QAAvC,CAAJ,EAAsD;EACpD,cAAA,OAAOI,GAAG,CAACwR,mBAAJ,CAAwB5R,QAAxB,CAAP,CAAA;EACD,aAjB6B;;;EAoB9B,YAAA,MAAM5C,MAAM,GAAGtD,QAAQ,CAACiG,SAAT,CAAmBC,QAAnB,CAAf,CAAA;EACA,YAAA,MAAMsoB,WAAW,GAAGlrB,MAAM,CAACgU,sBAAP,EAApB,CAAA;;EAEA,YAAA,IAAIkX,WAAJ,EAAiB;EACfloB,cAAAA,GAAG,CAACwR,mBAAJ,CAAwB5R,QAAxB,CAAoCsoB,GAAAA,WAAW,CAC7C,MACED,QAAQ,CAAC7oB,GAAT,CAAaY,GAAG,IAAI;EAClB,gBAAA,IAAImoB,WAAW,GAAGnoB,GAAG,CAAC5C,QAAJ,CAAawC,QAAb,CAAlB,CAAA;;EAEA,gBAAA,IAAI,CAAC1B,KAAD,IAAUlB,MAAM,CAACorB,cAArB,EAAqC;EACnCD,kBAAAA,WAAW,GAAGnrB,MAAM,CAACorB,cAAP,CAAsBD,WAAtB,CAAd,CAAA;EACD,iBAAA;;EAED,gBAAA,OAAOA,WAAP,CAAA;EACD,eARD,CAF2C,EAW7C,MAAMH,WAAW,CAAC5oB,GAAZ,CAAgBY,GAAG,IAAIA,GAAG,CAAC5C,QAAJ,CAAawC,QAAb,CAAvB,CAXuC,CAA/C,CAAA;EAcA,cAAA,OAAOI,GAAG,CAACwR,mBAAJ,CAAwB5R,QAAxB,CAAP,CAAA;EACD,aAhBD,MAgBO,IAAI5C,MAAM,CAACgT,aAAX,EAA0B;EAC/B3T,cAAAA,OAAO,CAACC,IAAR,CAAa;EAAEU,gBAAAA,MAAAA;EAAF,eAAb,CAAA,CAAA;EACA,cAAA,MAAM,IAAIwB,KAAJ,CAGA,oEAAA,CAHA,CAAN,CAAA;EAKD,aAAA;EACF,WAAA;EApDgB,SAAnB,CAAA,CAAA;EAuDA6B,QAAAA,OAAO,CAAC/F,OAAR,CAAgBwf,MAAM,IAAI;EACxByN,UAAAA,eAAe,CAAC/sB,IAAhB,CAAqBsf,MAArB,CAAA,CAAA;EACA0N,UAAAA,eAAe,CAAC1N,MAAM,CAAC7c,EAAR,CAAf,GAA6B6c,MAA7B,CAFwB;EAIxB;EACA;EACA;EACA;EACA;EACA;EACD,SAVD,CAAA,CAAA;EAYA,QAAA,OAAO9Z,GAAP,CAAA;EACD,OAnF2B,CAA9B,CAAA;EAsFA,MAAA,OAAO6nB,qBAAP,CAAA;EACD,KAvGD,CAAA;;EAyGA,IAAMG,MAAAA,WAAW,GAAGP,kBAAkB,CAAC1P,QAAQ,CAAC5C,IAAV,EAAgB,CAAhB,EAAmB,EAAnB,CAAtC,CAAA;EAEA6S,IAAAA,WAAW,CAAC1tB,OAAZ,CAAoBwf,MAAM,IAAI;EAC5ByN,MAAAA,eAAe,CAAC/sB,IAAhB,CAAqBsf,MAArB,CAAA,CAAA;EACA0N,MAAAA,eAAe,CAAC1N,MAAM,CAAC7c,EAAR,CAAf,GAA6B6c,MAA7B,CAF4B;EAI5B;EACA;EACA;EACA;EACA;EACA;EACD,KAVD,CAAA,CAAA;EAYA,IAAO,OAAA;EACL3E,MAAAA,IAAI,EAAE6S,WADD;EAEL9f,MAAAA,QAAQ,EAAEqf,eAFL;EAGLxmB,MAAAA,QAAQ,EAAEymB,eAAAA;EAHL,KAAP,CAAA;EAKD,GAhJC,EAiJF;EACE/tB,IAAAA,GAAG,EAA4C,oBADjD;EAEEyB,IAAAA,KAAK,EAAE,MAAA;EAAA,MAAA,IAAA,qBAAA,CAAA;;EAAA,MAAMxB,OAAAA,CAAAA,qBAAAA,GAAAA,QAAQ,CAACkD,OAAT,CAAiBgB,QAAvB,oCAAmClE,QAAQ,CAACkD,OAAT,CAAiB8X,UAApD,CAAA;EAAA,KAFT;EAGE/Y,IAAAA,QAAQ,EAAE,MAAM;EACdjC,MAAAA,QAAQ,CAACiO,MAAT,CAAgB,MAAM;EACpBjO,QAAAA,QAAQ,CAACgO,kBAAT,EAAA,CAAA;;EACAhO,QAAAA,QAAQ,CAAC4Z,mBAAT,EAAA,CAAA;EACD,OAHD,CAAA,CAAA;EAID,KAAA;EARH,GAjJE,CADN,CAAA;EA6JD,CAAA;;EAED,SAASsU,OAAT,CACEzS,IADF,EAEEvV,QAFF,EAGE;EACA,EAAA,MAAMyoB,QAAQ,GAAG,IAAIxa,GAAJ,EAAjB,CAAA;EAEA,EAAOsH,OAAAA,IAAI,CAAC5X,MAAL,CAAY,CAAC6B,GAAD,EAAMY,GAAN,KAAc;EAC/B,IAAA,MAAMsoB,MAAM,GAAMtoB,EAAAA,GAAAA,GAAG,CAAC5C,QAAJ,CAAawC,QAAb,CAAlB,CAAA;EACA,IAAA,MAAM2oB,QAAQ,GAAGnpB,GAAG,CAAC+mB,GAAJ,CAAQmC,MAAR,CAAjB,CAAA;;EACA,IAAI,IAAA,CAACC,QAAL,EAAe;EACbnpB,MAAAA,GAAG,CAAC8mB,GAAJ,CAAQoC,MAAR,EAAgB,CAACtoB,GAAD,CAAhB,CAAA,CAAA;EACD,KAFD,MAEO;EACLZ,MAAAA,GAAG,CAAC8mB,GAAJ,CAAQoC,MAAR,EAAgB,CAAC,GAAGC,QAAJ,EAAcvoB,GAAd,CAAhB,CAAA,CAAA;EACD,KAAA;;EACD,IAAA,OAAOZ,GAAP,CAAA;EACD,GATM,EASJipB,QATI,CAAP,CAAA;EAUD;;ECnLM,SAASpf,mBAAT,GAEwB;EAC7B,EAAA,OAAOvP,QAAQ,IACbiB,IAAI,CACF,MAAM,CACJjB,QAAQ,CAACwJ,QAAT,EAAA,CAAoBiE,QADhB,EAEJzN,QAAQ,CAACqP,sBAAT,EAFI,EAGJrP,QAAQ,CAACkD,OAAT,CAAiB2K,oBAHb,CADJ,EAMF,CAACJ,QAAD,EAAW4Q,QAAX,EAAqBxQ,oBAArB,KAA8C;EAC5C,IAAA,IACE,CAACwQ,QAAQ,CAAC5C,IAAT,CAAcza,MAAf;EAEA,IAAA,CAAC6M,oBAFD,IAGCJ,QAAQ,KAAK,IAAb,IAAqB,CAACzJ,MAAM,CAACkL,IAAP,CAAYzB,QAAZ,IAAYA,IAAAA,GAAAA,QAAZ,GAAwB,EAAxB,CAAA,CAA4BzM,MAJrD,EAKE;EACA,MAAA,OAAOqd,QAAP,CAAA;EACD,KAAA;;EAED,IAAA,OAAOyQ,UAAU,CAACzQ,QAAD,EAAWre,QAAX,CAAjB,CAAA;EACD,GAjBC,EAkBF;EACED,IAAAA,GAAG,EAA4C,qBADjD;EAEEyB,IAAAA,KAAK,EAAE,MAAA;EAAA,MAAA,IAAA,qBAAA,CAAA;;EAAA,MAAMxB,OAAAA,CAAAA,qBAAAA,GAAAA,QAAQ,CAACkD,OAAT,CAAiBgB,QAAvB,oCAAmClE,QAAQ,CAACkD,OAAT,CAAiB8X,UAApD,CAAA;EAAA,KAAA;EAFT,GAlBE,CADN,CAAA;EAwBD,CAAA;EAEM,SAAS8T,UAAT,CACLzQ,QADK,EAELre,QAFK,EAGL;EACA,EAAM+uB,MAAAA,YAA8B,GAAG,EAAvC,CAAA;;EAEA,EAAMC,MAAAA,SAAS,GAAI1oB,GAAD,IAAyB;EAAA,IAAA,IAAA,YAAA,CAAA;;EACzCyoB,IAAAA,YAAY,CAACjuB,IAAb,CAAkBwF,GAAlB,CAAA,CAAA;;EAEA,IAAA,IACEtG,QAAQ,CAACkD,OAAT,CAAiB0K,aAAjB,oBACAtH,GAAG,CAACK,OADJ,KAAA,IAAA,IACA,aAAa3F,MADb,IAEAsF,GAAG,CAACwI,aAAJ,EAHF,EAIE;EACAxI,MAAAA,GAAG,CAACK,OAAJ,CAAY/F,OAAZ,CAAoBouB,SAApB,CAAA,CAAA;EACD,KAAA;EACF,GAVD,CAAA;;EAYA3Q,EAAAA,QAAQ,CAAC5C,IAAT,CAAc7a,OAAd,CAAsBouB,SAAtB,CAAA,CAAA;EAEA,EAAO,OAAA;EACLvT,IAAAA,IAAI,EAAEsT,YADD;EAELvgB,IAAAA,QAAQ,EAAE6P,QAAQ,CAAC7P,QAFd;EAGLnH,IAAAA,QAAQ,EAAEgX,QAAQ,CAAChX,QAAAA;EAHd,GAAP,CAAA;EAKD;;ECrDM,SAASF,qBAAT,CAAgE/F,IAAhE,EAE+D;EACpE,EAAOpB,OAAAA,QAAQ,IACbiB,IAAI,CACF,MAAM,CACJjB,QAAQ,CAACwJ,QAAT,EAAoBkQ,CAAAA,UADhB,EAEJ1Z,QAAQ,CAACsb,wBAAT,EAFI,CADJ,EAKF,CAAC5B,UAAD,EAAa2E,QAAb,KAA0B;EACxB,IAAA,IAAI,CAACA,QAAQ,CAAC5C,IAAT,CAAcza,MAAnB,EAA2B;EACzB,MAAA,OAAOqd,QAAP,CAAA;EACD,KAAA;;EAED,IAAM,MAAA;EAAE7E,MAAAA,QAAF;EAAYD,MAAAA,SAAAA;EAAZ,KAAA,GAA0BG,UAAhC,CAAA;EACA,IAAI,IAAA;EAAE+B,MAAAA,IAAF;EAAQjN,MAAAA,QAAR;EAAkBnH,MAAAA,QAAAA;EAAlB,KAAA,GAA+BgX,QAAnC,CAAA;EACA,IAAA,MAAM4Q,SAAS,GAAGzV,QAAQ,GAAGD,SAA7B,CAAA;EACA,IAAA,MAAM2V,OAAO,GAAGD,SAAS,GAAGzV,QAA5B,CAAA;EAEAiC,IAAAA,IAAI,GAAGA,IAAI,CAAC4G,KAAL,CAAW4M,SAAX,EAAsBC,OAAtB,CAAP,CAAA;;EAEA,IAAA,IAAI,CAAClvB,QAAQ,CAACkD,OAAT,CAAiB2K,oBAAtB,EAA4C;EAC1C,MAAA,OAAOihB,UAAU,CACf;EACErT,QAAAA,IADF;EAEEjN,QAAAA,QAFF;EAGEnH,QAAAA,QAAAA;EAHF,OADe,EAMfrH,QANe,CAAjB,CAAA;EAQD,KAAA;;EAED,IAAO,OAAA;EACLyb,MAAAA,IADK;EAELjN,MAAAA,QAFK;EAGLnH,MAAAA,QAAAA;EAHK,KAAP,CAAA;EAKD,GAjCC,EAkCF;EACEtH,IAAAA,GAAG,EAA4C,uBADjD;EAEEyB,IAAAA,KAAK,EAAE,MAAA;EAAA,MAAA,IAAA,qBAAA,CAAA;;EAAA,MAAMxB,OAAAA,CAAAA,qBAAAA,GAAAA,QAAQ,CAACkD,OAAT,CAAiBgB,QAAvB,oCAAmClE,QAAQ,CAACkD,OAAT,CAAiB8X,UAApD,CAAA;EAAA,KAAA;EAFT,GAlCE,CADN,CAAA;EAwCD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}