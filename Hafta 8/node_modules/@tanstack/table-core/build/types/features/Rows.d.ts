import { TableGenerics, TableInstance, Row, RowModel } from '../types';
export declare type CoreRow<TGenerics extends TableGenerics> = {
    id: string;
    index: number;
    original?: TGenerics['Row'];
    depth: number;
    valuesCache: Record<string, any>;
    getValue: (columnId: string) => any;
    subRows: Row<TGenerics>[];
    getLeafRows: () => Row<TGenerics>[];
    originalSubRows?: TGenerics['Row'][];
};
export declare type RowsOptions<TGenerics extends TableGenerics> = {
    getCoreRowModel: (instance: TableInstance<TGenerics>) => () => RowModel<TGenerics>;
    getSubRows?: (originalRow: TGenerics['Row'], index: number) => undefined | TGenerics['Row'][];
    getRowId?: (originalRow: TGenerics['Row'], index: number, parent?: Row<TGenerics>) => string;
};
export declare type RowsInstance<TGenerics extends TableGenerics> = {
    getRowId: (_: TGenerics['Row'], index: number, parent?: Row<TGenerics>) => string;
    createRow: (id: string, original: TGenerics['Row'] | undefined, rowIndex: number, depth: number, subRows?: Row<TGenerics>[]) => Row<TGenerics>;
    getCoreRowModel: () => RowModel<TGenerics>;
    _getCoreRowModel?: () => RowModel<TGenerics>;
    getRowModel: () => RowModel<TGenerics>;
    getRow: (id: string) => Row<TGenerics>;
};
export declare const Rows: {
    createInstance: <TGenerics extends TableGenerics>(instance: TableInstance<TGenerics>) => RowsInstance<TGenerics>;
};
