import { Column, Header, HeaderGroup, TableGenerics, TableInstance } from '../types';
export declare type HeadersInstance<TGenerics extends TableGenerics> = {
    createHeader: (column: Column<TGenerics>, options: {
        id?: string;
        isPlaceholder?: boolean;
        placeholderId?: string;
        index: number;
        depth: number;
    }) => Header<TGenerics>;
    getHeaderGroups: () => HeaderGroup<TGenerics>[];
    getLeftHeaderGroups: () => HeaderGroup<TGenerics>[];
    getCenterHeaderGroups: () => HeaderGroup<TGenerics>[];
    getRightHeaderGroups: () => HeaderGroup<TGenerics>[];
    getFooterGroups: () => HeaderGroup<TGenerics>[];
    getLeftFooterGroups: () => HeaderGroup<TGenerics>[];
    getCenterFooterGroups: () => HeaderGroup<TGenerics>[];
    getRightFooterGroups: () => HeaderGroup<TGenerics>[];
    getFlatHeaders: () => Header<TGenerics>[];
    getLeftFlatHeaders: () => Header<TGenerics>[];
    getCenterFlatHeaders: () => Header<TGenerics>[];
    getRightFlatHeaders: () => Header<TGenerics>[];
    getLeafHeaders: () => Header<TGenerics>[];
    getLeftLeafHeaders: () => Header<TGenerics>[];
    getCenterLeafHeaders: () => Header<TGenerics>[];
    getRightLeafHeaders: () => Header<TGenerics>[];
    getHeader: (id: string) => Header<TGenerics>;
};
export declare const Headers: {
    createInstance: <TGenerics extends TableGenerics>(instance: TableInstance<TGenerics>) => HeadersInstance<TGenerics>;
};
export declare function buildHeaderGroups<TGenerics extends TableGenerics>(allColumns: Column<TGenerics>[], columnsToGroup: Column<TGenerics>[], instance: TableInstance<TGenerics>, headerFamily?: 'center' | 'left' | 'right'): HeaderGroup<TGenerics>[];
