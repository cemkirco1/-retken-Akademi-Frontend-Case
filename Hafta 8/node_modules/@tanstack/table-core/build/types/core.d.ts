import { RequiredKeys } from './utils';
import { Updater, TableOptions, TableState, TableInstance, Renderable, TableFeature, TableGenerics, InitialTableState } from './types';
export declare type CoreTableState = {};
export declare type CoreOptions<TGenerics extends TableGenerics> = {
    data: TGenerics['Row'][];
    state: Partial<TableState>;
    onStateChange: (updater: Updater<TableState>) => void;
    render: TGenerics['Renderer'];
    debugAll?: boolean;
    debugTable?: boolean;
    debugHeaders?: boolean;
    debugColumns?: boolean;
    debugRows?: boolean;
    initialState?: InitialTableState;
    autoResetAll?: boolean;
    mergeOptions?: <T>(defaultOptions: T, options: Partial<T>) => T;
    meta?: TGenerics['TableMeta'];
};
export declare type CoreInstance<TGenerics extends TableGenerics> = {
    initialState: TableState;
    reset: () => void;
    options: RequiredKeys<TableOptions<TGenerics>, 'state'>;
    setOptions: (newOptions: Updater<TableOptions<TGenerics>>) => void;
    getState: () => TableState;
    setState: (updater: Updater<TableState>) => void;
    _queue: (cb: () => void) => void;
    _render: <TProps>(template: Renderable<TGenerics, TProps>, props: TProps) => string | null | TGenerics['Rendered'];
    _features: readonly TableFeature[];
};
export declare function createTableInstance<TGenerics extends TableGenerics>(options: TableOptions<TGenerics>): TableInstance<TGenerics>;
